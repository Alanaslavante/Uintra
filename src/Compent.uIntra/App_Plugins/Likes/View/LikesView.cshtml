@using System.Web.Mvc.Ajax
@using uIntra.Core.Extentions
@model uIntra.Likes.LikesViewModel
@{
    var isLiked = Model.CanAddLike || Model.IsReadOnly ? "" : "_isLiked";
    var entityId = Model.CommentId.HasValue ? Model.CommentId.Value : Model.ActivityId;
}

<div class="like js-readonly-click-warning" data-is-readonly="@Model.IsReadOnly" id="likes_@entityId">
    <input type="hidden" name="readonlyClickTitle" value="@Html.Localize("Likes.ReadonlyClick.Title.lbl")" />
    <input type="hidden" name="readonlyClickMessage" value="@Html.Localize("Likes.ReadonlyClick.Message.lbl")" />

    <span class="like__set @isLiked">
        <i class="icon-like"></i>
        @if (Model.Users.Any() && !Model.IsReadOnly)
        {
            <span>@Model.Users.Count()</span>
        }
    </span>

    @if (!Model.IsReadOnly)
    {

        @(Model.CanAddLike
              ? Ajax.ActionLink("Add", "AddLike", "Likes", new { activityId = Model.ActivityId, commentId = Model.CommentId }, new AjaxOptions { HttpMethod = "Post", InsertionMode = InsertionMode.ReplaceWith, UpdateTargetId = string.Concat("likes_", entityId) }, new { @class = "like__link" })
              : Ajax.ActionLink("Remove", "RemoveLike", "Likes", new { activityId = Model.ActivityId, commentId = Model.CommentId }, new AjaxOptions { HttpMethod = "Post", InsertionMode = InsertionMode.ReplaceWith, UpdateTargetId = string.Concat("likes_", entityId) }, new { @class = "like__link" }))
        if (Model.Users.Any())
        {
            <div class="like__popup">
                <ul class="like__list">
                    @foreach (var name in Model.Users)
                    {
                        <li class="like__list-item">@name</li>
                    }
                </ul>
            </div>
        }
    }
</div>