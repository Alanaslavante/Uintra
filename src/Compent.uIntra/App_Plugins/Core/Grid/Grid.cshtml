@inherits UmbracoViewPage<IPublishedContent>
@using Newtonsoft.Json.Linq

@{
    var grid = Model.GetPropertyValue<dynamic>("grid");
}

@if (grid != null && grid.sections != null)
{
    <div class="row">
        @{
            var sectionOffsetNumber = 12;
            for (var i = 0; i < grid.sections.Count; i++)
            {
                var section = grid.sections[i];
                sectionOffsetNumber -= int.Parse(section.grid.ToString());
                var renderOffset = i == grid.sections.Count - 1 && sectionOffsetNumber > 0;

                <div class="col-md-@(section.grid) @(renderOffset ? "sidebar col-md-offset-" + sectionOffsetNumber : "" )">
                    @foreach (var row in section.rows)
                    {

                        <div class="row">
                            @foreach (var area in row.areas)
                            {
                                <div class="col-md-@area.grid">
                                    <div @RenderElementAttributes(area)>
                                        @foreach (var control in area.controls)
                                        {
                                            if (control != null && control.editor != null && control.editor.view != null)
                                            {
                                                string editor = EditorPath(control);
                                                @RenderControl(editor, control)
                                            }
                                        }
                                    </div>
                                </div>
                            }
                        </div>
                    }
                </div>
            }
        }
    </div>
            }

@helper RenderControl(string partialViewName, dynamic control)
{
try
{
    var config = control.editor?.config;
    if (config == null || config.action == null || config.controller == null)
    {
        var controlObject = control as object;
            @Html.Partial(partialViewName, controlObject)
        return;
    }

    string action = config.action;
    string controller = config.controller;

    if (config.sendModelToController != null && (bool)config.sendModelToController)
    {
        RouteValueDictionary controllerParams =  new RouteValueDictionary(ParseControllerModel(control));
        @Html.Action(action, controller, controllerParams);        
    }

    else
    {
        @Html.Action(action, controller)
    }
}
catch (Exception ex)
{
    if (HttpContext.Current.IsDebuggingEnabled)
    {
            <pre>@ex.ToString()</pre>
    }
}
}

@functions {
    public static MvcHtmlString RenderElementAttributes(dynamic contentItem)
    {
        var attrs = new List<string>();
        JObject cfg = contentItem.config;

        if (cfg != null)
        {
            attrs.AddRange(cfg.Properties().Select(p => p.Name + "=\"" + p.Value + "\""));
        }

        JObject style = contentItem.styles;
        if (style != null)
        {
            var cssVals = style.Properties().Select(p => p.Name + ":" + p.Value + ";").ToList();
            if (cssVals.Any())
                attrs.Add("style=\"" + string.Join(" ", cssVals) + "\"");
        }

        return new MvcHtmlString(string.Join(" ", attrs));
    }

    public static string EditorPath(dynamic control)
    {
        var render = control.editor.render.ToString();
        var view = control.editor.view.ToString();

        var chosen = string.IsNullOrEmpty(render) ? view : render;
        var path = chosen.ToString().ToLower().Replace(".html", ".cshtml");
        return path.Contains("/") ? path : "grid/editors/" + path;
    }
        
    public static IDictionary<string, object> ParseControllerModel(dynamic control)
    {
        return ((Newtonsoft.Json.Linq.JToken)control)["value"].ToObject<Dictionary<string, object>>();
    }   
}
