@using uIntra.Core.Extentions
@using uIntra.BaseControls
@inherits UmbracoViewPage<dynamic>

@{
    var viewModel = Model.value;
    if (viewModel == null)
    {
        return;
    }
    var panelId = "js-content-panel-" + Guid.NewGuid();
    bool isImportant = viewModel.isImportant != null ? viewModel.isImportant.Value : false; //Actual type of viewModel.isImportant will be JValue, not pure boolean
    string importantCssSelector = isImportant ? "_important" : String.Empty;
}

<section class="block _content-panel clearfix @importantCssSelector" id="@panelId">
    @{
        string titleLink = viewModel.titleLink?.link;
        string title = viewModel.title;
        if (string.IsNullOrEmpty(titleLink))
        {
            <h2 class="block__title">@title</h2>
        }
        else
        {
            <h2 class="block__title">
                <a class="block__title-link" href="@titleLink" target="@viewModel.titleLink.target">@title</a>
            </h2>
        }

        int mediaId;
        var hasMedia = int.TryParse(Model.value?.image?.ToString() ?? string.Empty, out mediaId);
        var posterImageUrl = hasMedia ? GetMediaUrl(mediaId) : null;
        var videoUrl = GetUrl(Model.value.videoLink);
        var showAsLightbox = Model.value.videoType == "lightbox";
        var lightboxClass = showAsLightbox ? "js-show-lightbox" : string.Empty;

        if (!string.IsNullOrEmpty(videoUrl))
        {
            var videoSrc = string.Empty;
            var autoplayVideo = "autoplay";
            var autoplayIframe = "?autoplay=1";
            var videoSourceType = (VideoSourceTypes)Model.value.videoLink.sourceType;
            var sizeClass = Model.value.imageVideoSize == "small" ? "_small" : "_large";
            var videoTooltip = Model.value.videoLink.altText.ToString();

            <div class="block__video @sizeClass">
                @if (!string.IsNullOrEmpty(videoTooltip))
                {
                    <div class="block__video-tooltip">
                        <span class="block__video-tooltip-text">@Model.value.videoLink.altText</span>
                    </div>
                }

                @if (string.IsNullOrEmpty(posterImageUrl))
                {
                    videoSrc = Model.value.videoLink.embedUrl;
                    autoplayVideo = string.Empty;
                    autoplayIframe = string.Empty;
                    // posterImageUrl get poster from youtube
                }

                <button class="block__video-play js-videoPoster @lightboxClass" style="background-image: url(@posterImageUrl);"></button>

                @switch (videoSourceType)
                {
                    case VideoSourceTypes.Youtube:
                    case VideoSourceTypes.Vimeo:
                        var embedUrl = Model.value.videoLink.embedUrl + autoplayIframe;

                        <div class="block__video-iframe">
                            <iframe class="block__video-iframe-player js-videoTag js-photoswipe-item" src="@videoSrc" data-src="@embedUrl" width="200" height="200" allowTransparency="true" frameborder="0" allowfullscreen></iframe>
                        </div>
                        break;
                    case VideoSourceTypes.Hyperlink:
                        <div class="block__video-url">
                            <video class="block__video-url-player js-videoTag js-photoswipe-item" src="@videoSrc" data-src="@Model.value.videoLink.embedUrl" @autoplayVideo controls></video>
                        </div>
                        break;
                }

            </div>
        }
        else
        {
            if (!string.IsNullOrEmpty(posterImageUrl))
            {
                if (string.IsNullOrEmpty(titleLink))
                {
                    <div class="block__image">
                        <img class="img-responsive @lightboxClass js-photoswipe-item" width="250" height="200" src="@posterImageUrl" alt="" />
                    </div>
                }
                else
                {
                    <div class="block__image">
                        <a href="@titleLink"><img class="img-responsive @lightboxClass js-photoswipe-item" width="250" height="200" src="@posterImageUrl" alt="" /></a>
                    </div>
                }
            }
        }
    }
    <div class="block__description">@Html.Raw(viewModel.description)</div>

    @if (viewModel.links != null && viewModel.links.Count > 0)
    {
        if (viewModel.linksListTitle != null)
        {
            <h4 class="block__headline">@viewModel.linksListTitle</h4>
        }
        <div class="block__links">
            <ul class="block__links-list">
                @foreach (var link in viewModel.links)
                {
                    <li class="block__links-list-item">
                        <a class="block__links-list-link" href="@GetLinkUrl(link)" target="@link.target">@link.caption</a>
                    </li>
                }
            </ul>
        </div>
    }

    @{
        var filesIds = ((string)viewModel.files).ToIntCollection();
        if (filesIds.Any())
        {
            <ul class="documents">
                @foreach (var id in filesIds)
                {
                    var file = Umbraco.TypedMedia(id);
                    <li class="documents__item">
                        <a class="documents__item-link" target="_blank" href="@file.Url">
                            <span class="documents__icon file-extension _@file.GetMediaExtention()"></span>
                            <span class="documents__item-name">@file.Name</span>
                        </a>
                    </li>
                }
            </ul>
        }
    }

</section>

@functions
{

    private string GetMediaUrl(int mediaId)
    {
        var media = Umbraco.TypedMedia(mediaId);
        return media?.Url;
    }

    private string GetUrl(dynamic media)
    {
        if (media != null && media.url != null && !string.IsNullOrEmpty(media.url.ToString()))
        {
            return media.url;
        }
        return string.Empty;
    }

    private string GetLinkUrl(dynamic link)
    {
        if (link.type == 0)
        {
            return Umbraco.TypedContent((int)link.id)?.Url ?? link.link;
        }

        return link.link;
    }
}

<script type="text/javascript">
    var contentPanelSelectors = contentPanelSelectors || [];
    contentPanelSelectors.push("#@panelId");
</script>