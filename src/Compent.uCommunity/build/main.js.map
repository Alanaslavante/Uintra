{"version":3,"sources":["webpack:///webpack/bootstrap 28b002f1b3ba596026a2","webpack:///./~/css-loader/lib/css-base.js","webpack:///./~/style-loader/addStyles.js","webpack:///./~/jquery/dist/jquery.js","webpack:///./~/npm-font-open-sans/fonts/BoldItalic/OpenSans-BoldItalic.eot","webpack:///./~/npm-font-open-sans/fonts/Bold/OpenSans-Bold.eot","webpack:///./~/npm-font-open-sans/fonts/ExtraBoldItalic/OpenSans-ExtraBoldItalic.eot","webpack:///./~/npm-font-open-sans/fonts/ExtraBold/OpenSans-ExtraBold.eot","webpack:///./~/npm-font-open-sans/fonts/Italic/OpenSans-Italic.eot","webpack:///./~/npm-font-open-sans/fonts/LightItalic/OpenSans-LightItalic.eot","webpack:///./~/npm-font-open-sans/fonts/Light/OpenSans-Light.eot","webpack:///./~/npm-font-open-sans/fonts/Regular/OpenSans-Regular.eot","webpack:///./~/npm-font-open-sans/fonts/SemiboldItalic/OpenSans-SemiboldItalic.eot","webpack:///./~/npm-font-open-sans/fonts/Semibold/OpenSans-Semibold.eot","webpack:///(webpack)/~/node-libs-browser/~/buffer/index.js","webpack:///./App_Plugins/Comments/Comment.js","webpack:///./App_Plugins/Core/Content/Scripts/Core.js","webpack:///./App_Plugins/Core/Content/libs/jquery.unobtrusive-ajax.min.js","webpack:///./App_Plugins/Core/Content/libs/jquery.validate.min.js","webpack:///./App_Plugins/Core/Content/libs/jquery.validate.unobtrusive.min.js","webpack:///./App_Plugins/Core/Content/scripts/AppInitializer.js","webpack:///./App_Plugins/Core/Content/scripts/Helpers.js","webpack:///./App_Plugins/Comments/_comments.css","webpack:///./~/quill/dist/quill.bubble.css","webpack:///./~/quill/dist/quill.core.css","webpack:///./~/quill/dist/quill.snow.css","webpack:///./~/quill/dist/quill.js","webpack:///./~/style-loader/fixUrls.js","webpack:///./App_Plugins/Comments/_comments.css?82cf","webpack:///./~/quill/dist/quill.bubble.css?0927","webpack:///./~/quill/dist/quill.core.css?901a","webpack:///./~/quill/dist/quill.snow.css?9a54","webpack:///./~/npm-font-open-sans/fonts/BoldItalic/OpenSans-BoldItalic.svg","webpack:///./~/npm-font-open-sans/fonts/BoldItalic/OpenSans-BoldItalic.ttf","webpack:///./~/npm-font-open-sans/fonts/BoldItalic/OpenSans-BoldItalic.woff","webpack:///./~/npm-font-open-sans/fonts/BoldItalic/OpenSans-BoldItalic.woff2","webpack:///./~/npm-font-open-sans/fonts/Bold/OpenSans-Bold.svg","webpack:///./~/npm-font-open-sans/fonts/Bold/OpenSans-Bold.ttf","webpack:///./~/npm-font-open-sans/fonts/Bold/OpenSans-Bold.woff","webpack:///./~/npm-font-open-sans/fonts/Bold/OpenSans-Bold.woff2","webpack:///./~/npm-font-open-sans/fonts/ExtraBoldItalic/OpenSans-ExtraBoldItalic.svg","webpack:///./~/npm-font-open-sans/fonts/ExtraBoldItalic/OpenSans-ExtraBoldItalic.ttf","webpack:///./~/npm-font-open-sans/fonts/ExtraBoldItalic/OpenSans-ExtraBoldItalic.woff","webpack:///./~/npm-font-open-sans/fonts/ExtraBoldItalic/OpenSans-ExtraBoldItalic.woff2","webpack:///./~/npm-font-open-sans/fonts/ExtraBold/OpenSans-ExtraBold.svg","webpack:///./~/npm-font-open-sans/fonts/ExtraBold/OpenSans-ExtraBold.ttf","webpack:///./~/npm-font-open-sans/fonts/ExtraBold/OpenSans-ExtraBold.woff","webpack:///./~/npm-font-open-sans/fonts/ExtraBold/OpenSans-ExtraBold.woff2","webpack:///./~/npm-font-open-sans/fonts/Italic/OpenSans-Italic.svg","webpack:///./~/npm-font-open-sans/fonts/Italic/OpenSans-Italic.ttf","webpack:///./~/npm-font-open-sans/fonts/Italic/OpenSans-Italic.woff","webpack:///./~/npm-font-open-sans/fonts/Italic/OpenSans-Italic.woff2","webpack:///./~/npm-font-open-sans/fonts/LightItalic/OpenSans-LightItalic.svg","webpack:///./~/npm-font-open-sans/fonts/LightItalic/OpenSans-LightItalic.ttf","webpack:///./~/npm-font-open-sans/fonts/LightItalic/OpenSans-LightItalic.woff","webpack:///./~/npm-font-open-sans/fonts/LightItalic/OpenSans-LightItalic.woff2","webpack:///./~/npm-font-open-sans/fonts/Light/OpenSans-Light.svg","webpack:///./~/npm-font-open-sans/fonts/Light/OpenSans-Light.ttf","webpack:///./~/npm-font-open-sans/fonts/Light/OpenSans-Light.woff","webpack:///./~/npm-font-open-sans/fonts/Light/OpenSans-Light.woff2","webpack:///./~/npm-font-open-sans/fonts/Regular/OpenSans-Regular.svg","webpack:///./~/npm-font-open-sans/fonts/Regular/OpenSans-Regular.ttf","webpack:///./~/npm-font-open-sans/fonts/Regular/OpenSans-Regular.woff","webpack:///./~/npm-font-open-sans/fonts/Regular/OpenSans-Regular.woff2","webpack:///./~/npm-font-open-sans/fonts/SemiboldItalic/OpenSans-SemiboldItalic.svg","webpack:///./~/npm-font-open-sans/fonts/SemiboldItalic/OpenSans-SemiboldItalic.ttf","webpack:///./~/npm-font-open-sans/fonts/SemiboldItalic/OpenSans-SemiboldItalic.woff","webpack:///./~/npm-font-open-sans/fonts/SemiboldItalic/OpenSans-SemiboldItalic.woff2","webpack:///./~/npm-font-open-sans/fonts/Semibold/OpenSans-Semibold.svg","webpack:///./~/npm-font-open-sans/fonts/Semibold/OpenSans-Semibold.ttf","webpack:///./~/npm-font-open-sans/fonts/Semibold/OpenSans-Semibold.woff","webpack:///./~/npm-font-open-sans/fonts/Semibold/OpenSans-Semibold.woff2","webpack:///(webpack)/buildin/global.js","webpack:///(webpack)/~/node-libs-browser/~/buffer/~/base64-js/index.js","webpack:///(webpack)/~/node-libs-browser/~/buffer/~/ieee754/index.js","webpack:///(webpack)/~/node-libs-browser/~/buffer/~/isarray/index.js","webpack:///./Content/main.js"],"names":["require","CommentOverview","selector","commentOverviewQuillOptions","theme","modules","toolbar","holders","$","length","validator","unobtrusive","parse","each","$this","initCreateControl","find","Comment","holder","createControls","button","data","on","valid","dataStorage","descriptionElem","quill","initQuill","getLength","removeAttr","attr","setText","value","commentQuillOptions","initEdit","initReply","initDelete","editlink","findControl","hideEditlink","editControlContainer","descriptionControl","hide","show","showReplyLink","hideReplyLink","commentReply","scrollToComment","el","comment","closest","animate","scrollTop","offset","top","deleteLink","confirm","filter","parent","add","window","App","jQuery","a","b","d","h","c","split","shift","push","Function","constructor","apply","e","g","setRequestHeader","i","indexOf","getAttribute","toUpperCase","f","firstChild","html","contents","insertBefore","appendChild","replaceWith","j","k","parseInt","extend","type","undefined","url","cache","beforeSend","arguments","complete","success","getResponseHeader","error","name","ajax","validate","document","preventDefault","href","target","parents","Math","round","pageX","left","pageY","setTimeout","removeData","currentTarget","hasClass","action","method","concat","serializeArray","fn","settings","onsubmit","click","cancelSubmit","submitHandler","submitButton","submit","val","appendTo","currentForm","call","remove","debug","form","pendingRequest","formSubmitted","focusInvalid","console","warn","is","element","removeAttrs","rules","staticRules","normalizeRule","messages","normalizeRules","metadataRules","classRules","attributeRules","required","expr","blank","trim","filled","unchecked","checked","defaults","init","format","makeArray","unshift","Array","slice","replace","RegExp","groups","errorClass","validClass","errorElement","errorContainer","errorLabelContainer","ignore","ignoreTitle","onfocusin","lastActive","focusCleanup","blockFocusCleanup","unhighlight","addWrapper","errorsFor","onfocusout","checkable","submitted","optional","onkeyup","lastElement","onclick","parentNode","highlight","addClass","removeClass","setDefaults","remote","email","date","dateISO","number","digits","creditcard","equalTo","accept","maxlength","minlength","rangelength","range","max","min","autoCreateRanges","prototype","labelContainer","errorContext","containers","valueCache","pending","invalid","reset","validateDelegate","invalidHandler","bind","checkForm","errorMap","triggerHandler","showErrors","prepareForm","currentElements","elements","check","clean","prepareElement","numberOfInvalids","toHide","errorList","message","findByName","successList","grep","defaultShowErrors","resetForm","hideErrors","objectLength","size","findLastActive","focus","trigger","not","errors","toShow","parameters","methods","formatAndAdd","log","id","customMetaMessage","metadata","meta","customMessage","String","findDefined","defaultMessage","title","test","wrapper","showLabel","validElements","invalidElements","map","idOrName","generated","wrap","append","errorPlacement","insertAfter","text","getElementsByName","nodeName","toLowerCase","depend","dependTypes","string","startRequest","stopRequest","previousValue","old","classRuleSettings","dateDE","numberDE","addClassRules","param","depends","isFunction","Number","addMethod","originalMessage","mode","port","dataType","Date","charAt","match","unbind","ajaxPrefilter","abort","ajaxSettings","event","special","focusin","focusout","addEventListener","blur","fix","handle","setup","teardown","removeEventListener","handler","substr","lastIndexOf","m","parseJSON","empty","l","n","proxy","options","attachValidation","off","adapters","parseElement","params","adapt","__dummy__","addBack","has","addBool","addMinMax","addSingleVal","exec","index","extension","other","tagName","additionalfields","nonalphamin","regex","queue","forEach","item","appInitializer","func","Quill","easeInOutQuad","t","helpers","deepClone","obj","JSON","stringify","source","Error","delta","oldDelta","container","innerHTML","clipboard","addMatcher","Node","ELEMENT_NODE","node","plaintext","Delta","insert","removeOffset","dateOffset","getTimezoneOffset","getTime","infiniteScrollFactory","onScroll","lock","win","doc","unlock","scroll","height","scrollTo","to","duration","start","change","currentTime","increment","animateScroll","localStorage","getItem","key","setItem","removeItem"],"mappings":";AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA,mDAA2C,cAAc;;AAEzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAK;AACL;AACA;;AAEA;AACA;AACA;AACA,mCAA2B,0BAA0B,EAAE;AACvD,yCAAiC,eAAe;AAChD;AACA;AACA;;AAEA;AACA,8DAAsD,+DAA+D;;AAErH;AACA;;AAEA;AACA;;;;;;;AChEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,mCAAmC,gBAAgB;AACnD,IAAI;AACJ;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA,gBAAgB,iBAAiB;AACjC;AACA;AACA;AACA;AACA,YAAY,oBAAoB;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,qDAAqD,cAAc;;AAEnE;AACA;;;;;;;;AC1EA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA,EAAE;AACF;AACA;AACA,EAAE;AACF;AACA;AACA,EAAE;AACF;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,gBAAgB,mBAAmB;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,sBAAsB;AACtC;AACA;AACA,kBAAkB,2BAA2B;AAC7C;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,eAAe,mBAAmB;AAClC;AACA;AACA;AACA;AACA,iBAAiB,2BAA2B;AAC5C;AACA;AACA,QAAQ,uBAAuB;AAC/B;AACA;AACA,GAAG;AACH;AACA,iBAAiB,uBAAuB;AACxC;AACA;AACA,2BAA2B;AAC3B;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,iBAAiB;AAChC;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA,gCAAgC,sBAAsB;AACtD;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA;AACA;AACA,EAAE;AACF;AACA,EAAE;AACF;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,EAAE;AACF;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,EAAE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE;AACF;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;;AAEA;AACA;AACA,EAAE;AACF;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,EAAE;AACF;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,uDAAuD;AACvD;;AAEA,6BAA6B,mBAAmB;;AAEhD;;AAEA;;AAEA;AACA;AACA;;;;;;;AC9QA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE;AACF;AACA;;AAEA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;;;AAIA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;;;AAIA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,EAAE;;AAEF;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA,EAAE;;AAEF;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,EAAE;;AAEF;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,EAAE;;AAEF;AACA;AACA;AACA,EAAE;;AAEF;AACA;AACA;AACA,GAAG;AACH,EAAE;;AAEF;AACA;AACA,EAAE;;AAEF;AACA;AACA,EAAE;;AAEF;AACA;AACA,EAAE;;AAEF;AACA;AACA;AACA;AACA,EAAE;;AAEF;AACA;AACA,EAAE;;AAEF;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,+BAA+B;AAC/B;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,QAAQ,YAAY;;AAEpB;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,MAAM;AACN;AACA;;AAEA;AACA;;AAEA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,EAAE;;AAEF,oBAAoB;;AAEpB;AACA;AACA,EAAE;;AAEF;;AAEA;AACA;AACA,EAAE;;AAEF;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,EAAE;;AAEF;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,EAAE;;AAEF;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,EAAE;;AAEF;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,EAAE;;AAEF;AACA;AACA;AACA,EAAE;;AAEF,gCAAgC;AAChC;AACA;AACA;AACA;AACA,EAAE;;AAEF;AACA;AACA,EAAE;;AAEF;AACA;;AAEA;AACA;AACA,UAAU,YAAY;AACtB;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,EAAE;;AAEF;AACA;AACA;AACA;AACA;AACA,EAAE;;AAEF;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;;AAEA;AACA,EAAE;;AAEF;AACA;AACA,EAAE;;AAEF;AACA;AACA;AACA;AACA;AACA;;AAEA,SAAS,SAAS;AAClB;AACA;;AAEA;;AAEA;AACA,EAAE;;AAEF;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,SAAS,YAAY;AACrB;AACA;AACA;AACA;AACA;;AAEA;AACA,EAAE;;AAEF;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,UAAU,YAAY;AACtB;;AAEA;AACA;AACA;AACA;;AAEA;AACA,GAAG;AACH;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,EAAE;;AAEF;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,EAAE;;AAEF;;AAEA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,CAAC;;AAED;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE;;AAEF;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,SAAS;AAClB;AACA;AACA;AACA;AACA;AACA,EAAE;;AAEF;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,0BAA0B;AAC1B;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE;;AAEF;AACA;;AAEA,gBAAgB,IAAI;;AAEpB;AACA;;AAEA;;AAEA;AACA;AACA,wCAAwC,IAAI;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE;;AAEF;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,EAAE;;AAEF;AACA;AACA;AACA;AACA;AACA;AACA,EAAE;;AAEF;AACA;AACA;AACA,GAAG;AACH,GAAG;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,SAAS;;AAET;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA,MAAM;;AAEN;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,KAAK;AACL;AACA;;AAEA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA,MAAM;AACN;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,aAAa,yBAAyB;AACtC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,WAAW,SAAS;AACpB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,WAAW,SAAS;AACpB;AACA;AACA;;AAEA;AACA;AACA,EAAE;AACF;AACA,EAAE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,SAAS;AACpB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,WAAW,OAAO;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,WAAW,OAAO;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,WAAW,QAAQ,6BAA6B;AAChD;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,GAAG;AACH;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,WAAW,SAAS;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH,EAAE;AACF;;AAEA;AACA;AACA,WAAW,gBAAgB;AAC3B,aAAa,uBAAuB;AACpC;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,WAAW,eAAe;AAC1B,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,WAAW,eAAe;AAC1B,aAAa,OAAO;AACpB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,GAAG;AACH;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE;;AAEF;AACA;;AAEA;AACA;AACA;AACA;AACA,EAAE;;AAEF;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE;;AAEF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,IAAI;AACJ;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,EAAE;AACF;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,GAAG;AACH;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,WAAW,UAAU;AACrB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,WAAW,cAAc;AACzB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE;AACF;AACA;AACA;AACA;AACA,GAAG;AACH;AACA,gCAAgC,MAAM;AACtC;AACA;AACA;AACA,EAAE;AACF;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA,eAAe;;AAEf,SAAS;;AAET;AACA,QAAQ,iCAAiC;AACzC,QAAQ,oBAAoB;AAC5B,QAAQ,sCAAsC;AAC9C,QAAQ;AACR,EAAE;;AAEF;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,IAAI;AACJ;AACA;;AAEA;AACA,GAAG;;AAEH;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,IAAI;AACJ;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,EAAE;;AAEF;;AAEA;AACA;AACA;AACA,gBAAgB,aAAa,EAAE;AAC/B;AACA;AACA;AACA,GAAG;;AAEH;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL,GAAG;;AAEH;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA,4DAA4D;;AAE5D;AACA;AACA;AACA,yCAAyC;;AAEzC;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO;AACP;AACA;AACA;AACA;AACA,6DAA6D;;AAE7D;AACA;AACA;AACA,0CAA0C;;AAE1C;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,gEAAgE;;AAEhE;AACA;AACA;AACA,6CAA6C;;AAE7C;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;;AAEA;AACA;AACA,EAAE;;AAEF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA,GAAG;;AAEH;AACA;AACA,GAAG;;AAEH;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,GAAG;;AAEH;AACA;AACA;AACA,iEAAiE,UAAU;AAC3E,sCAAsC,2BAA2B;AACjE;AACA,gCAAgC,MAAM;AACtC;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA,GAAG;;AAEH;AACA;AACA,GAAG;;AAEH;AACA;AACA,UAAU,YAAY;AACtB;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA,UAAU,YAAY;AACtB;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA,UAAU,UAAU;AACpB;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA,UAAU,cAAc;AACxB;AACA;AACA;AACA,GAAG;AACH;AACA;;AAEA;;AAEA;AACA,YAAY,uEAAuE;AACnF;AACA;AACA,YAAY,4BAA4B;AACxC;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,QAAQ,SAAS;AACjB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA,2DAA2D;;AAE3D;AACA;AACA,oFAAoF;;AAEpF;AACA;AACA,OAAO;AACP;;AAEA;AACA;AACA,OAAO;AACP;AACA;;AAEA,mCAAmC;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;;AAEA;AACA;AACA;AACA,QAAQ,SAAS;AACjB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,QAAQ,SAAS;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA,EAAE;AACF;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH,QAAQ,SAAS;AACjB;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA;AACA,WAAW,SAAS;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,iDAAiD;AACxF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,iDAAiD;AACjD,UAAU,wCAAwC;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,gBAAgB;AAC3B;AACA,WAAW,QAAQ;AACnB,WAAW,MAAM;AACjB,WAAW,MAAM;AACjB;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,IAAI;AACJ;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA,EAAE;AACF;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA,EAAE;AACF;;AAEA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE;AACF;;AAEA;;AAEA,CAAC;;;;AAID;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AAKA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;;AAEA,QAAQ,GAAG;AACX;AACA;AACA;AACA;;AAEA;AACA;;;AAGA;;AAEA;;;;AAIA;;AAEA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,EAAE;AACF;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,EAAE;AACF;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,gBAAgB,SAAS;AACzB;AACA;AACA;AACA;AACA,IAAI;AACJ;;AAEA;;AAEA,cAAc,SAAS;AACvB;AACA;;AAEA;AACA,EAAE;AACF;AACA;AACA,EAAE;AACF;AACA;AACA,EAAE;AACF;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;;AAGD;;;AAGA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,IAAI;AACJ;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,QAAQ;AACR;AACA;AACA;AACA;;AAEA;;AAEA;AACA,KAAK;AACL;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,IAAI;AACJ;;AAEA;AACA;AACA,IAAI;AACJ;AACA;;AAEA;AACA,GAAG;AACH;AACA;AACA;;AAEA;AACA;AACA,GAAG;AACH;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;;AAGA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,UAAU,OAAO;AACjB;AACA;AACA;AACA;AACA,GAAG;AACH,EAAE;;AAEF;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,UAAU,OAAO;AACjB,0BAA0B,wBAAwB;;AAElD;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,EAAE;;AAEF;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,EAAE;;AAEF;AACA;AACA;AACA;AACA;AACA;AACA,EAAE;;AAEF;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,EAAE;AACF;AACA;AACA,EAAE;AACF;AACA;AACA,EAAE;AACF;AACA;AACA,EAAE;AACF;AACA;AACA,EAAE;AACF;AACA;AACA,EAAE;AACF;AACA;AACA,EAAE;AACF;AACA;AACA,EAAE;AACF;AACA;AACA,EAAE;AACF;AACA,0CAA0C;AAC1C,EAAE;AACF;AACA;AACA,EAAE;AACF;AACA;AACA;AACA,CAAC;AACD;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,CAAC;AACD;;;;AAIA;AACA;AACA;AACA;AACA;AACA,EAAE;AACF;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,mBAAmB;;AAEnB;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,UAAU,cAAc;AACxB;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,KAAK;AACL;AACA;AACA;AACA,GAAG;;AAEH;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;;AAER;AACA;AACA;AACA,OAAO;AACP,MAAM;;AAEN;AACA;AACA;AACA;AACA;AACA,IAAI;;AAEJ;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,IAAI;;AAEJ;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;;AAEJ;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;;AAEJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA,IAAI;;AAEJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA,IAAI;;AAEJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;;AAEJ;AACA;AACA;AACA;AACA,IAAI;;AAEJ;AACA;AACA;AACA;AACA;;AAEA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA,GAAG;AACH;;AAEA;AACA,GAAG;;AAEH;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,EAAE;;AAEF;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;;AAEL;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA,wCAAwC,sCAAsC;AAC9E,oCAAoC,uCAAuC;AAC3E,oCAAoC,sCAAsC;AAC1E;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR,OAAO;AACP;AACA,MAAM;AACN,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,WAAW;;AAEX;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;;AAEX;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;;AAER;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,MAAM;;AAEN;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,oCAAoC;AACpC,qCAAqC;AACrC,oCAAoC;AACpC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,EAAE;;AAEF;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,CAAC;;;AAGD;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;;;;AAKA;AACA;AACA;AACA,EAAE;AACF;;;;;AAKA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,EAAE;;AAEF;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,CAAC;;AAED;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,CAAC;;AAED;AACA;;AAEA;AACA;AACA;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,EAAE;AACF;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,UAAU,SAAS;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AAKA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;;AAEA;AACA,EAAE;AACF;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,uBAAuB,aAAa;AACpC,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA,EAAE;AACF;AACA;AACA;;AAEA;AACA;AACA,EAAE;AACF;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,EAAE;AACF;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,IAAI;AACJ;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA,EAAE;AACF;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,oBAAoB,SAAS;AAC7B;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,IAAI;;AAEJ;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,EAAE;;AAEF;AACA;AACA,EAAE;;AAEF;AACA;AACA,EAAE;;AAEF;AACA;AACA;AACA;AACA,EAAE;;AAEF;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,IAAI;AACJ;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,IAAI;AACJ,GAAG;AACH,EAAE;;AAEF;AACA;AACA;AACA,GAAG;AACH;AACA,CAAC;;;AAGD;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,EAAE;;AAEF;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,EAAE;;AAEF;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ,GAAG;AACH;AACA,CAAC;;AAED;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,IAAI;AACJ,EAAE;AACF;AACA;AACA;AACA,GAAG;AACH,EAAE;AACF;AACA;AACA,EAAE;;AAEF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;;AAEA;;;AAGA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA,IAAI;AACJ;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,GAAG;AACH;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,QAAQ,gBAAgB;AACxB;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,iBAAiB,gBAAgB;AACjC;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,EAAE;AACF;AACA;AACA,EAAE;AACF;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA,GAAG;AACH;AACA,CAAC;AACD;;AAEA;;AAEA;;;;AAIA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;;AAGA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA,EAAE;AACF;;AAEA,EAAE;AACF;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;;AAGA;AACA;AACA;AACA;;AAEA,QAAQ,OAAO;AACf;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA,sBAAsB;;AAEtB;AACA;AACA;AACA;AACA;AACA;;AAEA,QAAQ,OAAO;AACf;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,IAAI;AACJ;;AAEA;AACA,IAAI;AACJ;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,CAAC;AACD;;;;AAIA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,EAAE,gBAAgB;AAClB;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,EAAE;AACF;;AAEA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE;AACF;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,EAAE;AACF;;AAEA;AACA;AACA;AACA;AACA;;AAEA,WAAW;;AAEX;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;;AAEJ;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,IAAI;AACJ;AACA;;AAEA;AACA;AACA;;AAEA,EAAE;;AAEF;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,2CAA2C;AAC3C;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,EAAE;;AAEF;;AAEA;AACA;;AAEA;AACA;AACA,oDAAoD;AACpD;;AAEA;AACA;;AAEA,cAAc,sBAAsB;AACpC;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,yBAAyB;AACzB;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA,+DAA+D;AAC/D;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,EAAE;;AAEF;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,UAAU,cAAc;;AAExB;AACA;AACA;AACA;AACA;AACA,iBAAiB,mBAAmB;AACpC;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,uCAAuC;AACjE;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,uBAAuB,uDAAuD;AAC9E;;AAEA;AACA,EAAE;;AAEF;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,GAAG;AACH,EAAE;;AAEF;AACA;AACA;AACA;AACA,EAAE;;AAEF;AACA;;AAEA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;;AAEJ;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,sCAAsC;AACtC;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,EAAE;AACF;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,EAAE;AACF;AACA;;AAEA;;AAEA;AACA;AACA;AACA,EAAE;AACF;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,qCAAqC,cAAc;AACnD;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,qCAAqC;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;;AAEA;AACA;AACA,EAAE;AACF;AACA;AACA,EAAE;AACF;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA,CAAC;;;AAGD;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,EAAE;AACF;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,2CAA2C,OAAO;AAClD;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,8BAA8B;;AAE9B;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,EAAE;AACF;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,UAAU,OAAO;AACjB;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA,gBAAgB,gBAAgB;AAChC;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,QAAQ,+BAA+B;AACvC;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,EAAE;;AAEF;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,uCAAuC,OAAO;AAC9C;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,wCAAwC,OAAO;AAC/C;AACA;AACA,IAAI;AACJ;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,EAAE;;AAEF;AACA;AACA;AACA;;AAEA,SAAS,qCAAqC;AAC9C;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,QAAQ;AACR;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA,EAAE;;AAEF;AACA;AACA,EAAE;;AAEF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,GAAG;AACH,EAAE;;AAEF;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH,EAAE;;AAEF;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH,EAAE;;AAEF;AACA;AACA;AACA;AACA;AACA,GAAG;AACH,EAAE;;AAEF;AACA;AACA;AACA;AACA;AACA,GAAG;AACH,EAAE;;AAEF;AACA;AACA;;AAEA,SAAS,8BAA8B;AACvC;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,EAAE;;AAEF;AACA;AACA;;AAEA;AACA;AACA,GAAG;AACH,EAAE;;AAEF;AACA;AACA,6BAA6B;AAC7B;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA,YAAY,OAAO;AACnB;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA,GAAG;AACH,EAAE;;AAEF;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,GAAG;AACH;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;;AAEA,SAAS,WAAW;AACpB;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,CAAC;AACD;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;;;AAIA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,0BAA0B;AAC1B,sBAAsB,cAAc;AACpC,gBAAgB,WAAW,YAAY;AACvC,WAAW;AACX;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,qCAAqC,UAAU,SAAS,MAAM,aAAa;AAC3E,aAAa,eAAe;AAC5B;;AAEA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,EAAE;AACF,CAAC;;;AAGD;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;;AAGA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,kBAAkB;AAClB;AACA;AACA;AACA;;;AAGA;;AAEA;AACA;AACA;AACA;AACA,YAAY,+DAA+D;AAC3E;AACA;AACA;AACA,EAAE;;AAEF;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,EAAE;AACF;AACA;;AAEA,QAAQ,OAAO;;AAEf;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE;;AAEF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE;;AAEF;AACA;AACA;AACA;AACA,EAAE;;AAEF;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA,GAAG;;AAEH;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,EAAE;;AAEF;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,kBAAkB,gBAAgB;AAClC;AACA,MAAM;AACN;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA,iBAAiB;;AAEjB;AACA;;AAEA,UAAU,OAAO;AACjB;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA,YAAY;AACZ;;AAEA;AACA;AACA;;AAEA,WAAW,SAAS;AACpB;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,GAAG;AACH;AACA,CAAC;;;AAGD;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE;AACF;AACA;;AAEA;AACA;AACA;AACA,EAAE;AACF;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,EAAE;AACF;AACA;AACA,EAAE;AACF;AACA;;AAEA;;AAEA;AACA;;;;;AAKA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,EAAE;AACF;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW;;AAEX;AACA;AACA;AACA,QAAQ,OAAO;AACf;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,QAAQ,gBAAgB;AACxB;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ,GAAG;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;;AAEJ;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ,iDAAiD,0BAA0B;AAC3E;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,UAAU,gBAAgB;AAC1B;AACA;;AAEA;;AAEA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,2BAA2B;AAC3B;AACA,qBAAqB;AACrB;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,gBAAgB;AAC3B;AACA;;AAEA,6CAA6C;AAC7C;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA;;AAEA,QAAQ,gBAAgB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH,EAAE;;AAEF;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;;AAEA;AACA;AACA;;AAEA,SAAS,gBAAgB;AACzB;AACA;AACA;AACA;AACA,EAAE;;AAEF;;AAEA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,CAAC;;AAED;AACA,iEAAiE;AACjE;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,EAAE;AACF;AACA;AACA;;AAEA,IAAI;AACJ;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA,oBAAoB,cAAc;AAClC,EAAE;AACF;AACA;AACA;AACA;;AAEA;AACA,iDAAiD;;AAEjD;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,EAAE;AACF;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;;AAEA,+BAA+B,SAAS;AACxC;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH,EAAE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,+BAA+B,SAAS;AACxC;AACA;AACA;AACA;AACA;;AAEA;AACA,mBAAmB,gBAAgB;AACnC;AACA;AACA;AACA;;AAEA;AACA;AACA,GAAG;AACH;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,UAAU,kBAAkB;AAC5B,WAAW,kBAAkB;AAC7B,cAAc;AACd,CAAC;AACD;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;;AAEA;;AAEA,QAAQ,mBAAmB;AAC3B;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,EAAE;AACF;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,EAAE;AACF;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,EAAE;AACF;;;AAGA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;;AAGD;AACA;;AAEA;AACA;AACA;AACA,EAAE;;AAEF;AACA;AACA;AACA,GAAG;AACH;AACA,CAAC;;AAED;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,EAAE;;AAEF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE;;AAEF;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;;AAEA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;;;;AAKD;AACA;;AAEA;AACA;AACA;AACA,EAAE;;AAEF;AACA;AACA;AACA,GAAG;AACH;AACA,CAAC;;AAED;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,EAAE;;AAEF;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,EAAE;;AAEF;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;;;;AAKD;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,IAAI;AACJ;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,EAAE;;AAEF;AACA;AACA;;AAEA;AACA;AACA;AACA,IAAI;AACJ;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,EAAE;;AAEF;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;;AAEA;AACA,IAAI;AACJ;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH,EAAE;;AAEF;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,CAAC;;;;;AAKD;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,IAAI;AACJ;AACA;;AAEA,iCAAiC;AACjC;AACA;;AAEA,IAAI;AACJ;;AAEA,IAAI;AACJ;AACA;AACA,KAAK;AACL;;AAEA;;AAEA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA,CAAC;;AAED;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,KAAK;AACL;AACA;;AAEA;AACA,WAAW,SAAS;AACpB;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,IAAI;;AAEJ;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;;;;AAKD;;;AAGA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA,sCAAsC;AACtC;AACA;AACA;;AAEA;;AAEA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,8CAA8C;AAC9C;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,2CAA2C;AAC3C;;AAEA;AACA;AACA;AACA;AACA,UAAU,KAAK;AACf;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,iDAAiD;AACjD;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,EAAE;;AAEF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,CAAC;;AAED;;AAEA;AACA;AACA;AACA,GAAG;AACH,EAAE;AACF;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;;AAGD;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA,CAAC;;;;;AAKD;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,qCAAqC;;AAEpD;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;;AAEA;AACA;AACA;;AAEA,KAAK;AACL;AACA;AACA;AACA;AACA,EAAE;AACF;AACA;;AAEA;;AAEA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,EAAE;AACF;AACA;;AAEA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA,IAAI;;AAEJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH,EAAE;;AAEF;AACA;AACA;AACA;;AAEA,EAAE;;AAEF;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,GAAG;;AAEH,EAAE;;AAEF;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,EAAE;AACF;AACA;;AAEA;AACA;AACA;AACA,GAAG;AACH;AACA;;AAEA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,aAAa;AACb,KAAK;AACL;;AAEA,WAAW;AACX,GAAG;AACH;AACA,CAAC;;;AAGD;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;;AAEhB;AACA;AACA;AACA;AACA;AACA,gBAAgB;;AAEhB,gDAAgD;AAChD;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,mBAAmB;AACnB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA,GAAG;AACH;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,wDAAwD;AACxD;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,EAAE;;AAEF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,iBAAiB;;AAEjB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA,IAAI;;AAEJ;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAAS;AACT;;AAEA;;AAEA;AACA;;AAEA;AACA,iBAAiB;AACjB,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kDAAkD;;AAElD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE;;AAEF;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,EAAE;;AAEF;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA,2BAA2B;;AAE3B;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,kCAAkC;;AAElC;AACA,sBAAsB;AACtB,2BAA2B;;AAE3B;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,OAAO;;AAEP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,IAAI;;AAEJ;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,GAAG;AACH;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,sDAAsD;AACtD;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA,IAAI;;AAEJ;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,KAAK;AACL;;AAEA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,IAAI;;AAEJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,IAAI;AACJ;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,EAAE;;AAEF;AACA;AACA,EAAE;;AAEF;AACA;AACA;AACA,CAAC;;AAED;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA,CAAC;;;AAGD;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE;AACF;;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,IAAI;AACJ;;AAEA;AACA,EAAE;;AAEF;AACA;AACA;AACA;AACA,IAAI;AACJ;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA,IAAI;AACJ;AACA;AACA,GAAG;AACH,EAAE;;AAEF;AACA;;AAEA;AACA;AACA,GAAG;AACH,EAAE;;AAEF;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,CAAC;;;AAGD;AACA;AACA;AACA;AACA;AACA;;;;;AAKA;AACA;AACA;AACA,EAAE;AACF;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,EAAE;AACF;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,QAAQ;;AAER;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA,mDAAmD;AACnD;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,WAAW,uBAAuB;AAClC,WAAW,yBAAyB;AACpC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA,IAAI;;AAEJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;;;;AAKD;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,EAAE;AACF;AACA;AACA,EAAE;AACF;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;;;;AAKD;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,GAAG;AACH;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,IAAI;AACJ;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,GAAG;;AAEH;AACA;AACA;AACA,CAAC;;;;;AAKD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;;AAGD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,EAAE;AACF;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,IAAI;AACJ,GAAG;AACH;;AAEA;AACA;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;;;;AAKD;AACA;AACA;AACA,EAAE;AACF;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,GAAG;AACH;AACA;AACA;;AAEA;;AAEA;AACA,qDAAqD;AACrD;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,GAAG;AACH;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW;AACX;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,EAAE;;AAEF;AACA;AACA;AACA;;AAEA;AACA;AACA,mBAAmB;;AAEnB,4DAA4D,eAAe;AAC3E;AACA;;AAEA;AACA;;AAEA,GAAG;;AAEH;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,EAAE;;AAEF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,GAAG;AACH;AACA,CAAC;;AAED;AACA,cAAc,sDAAsD;AACpE;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,IAAI;AACJ;AACA;AACA,GAAG;AACH;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;;AAGD;AACA,cAAc,mCAAmC;AACjD,eAAe,6DAA6D;AAC5E;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA,IAAI;AACJ;AACA,EAAE;AACF,CAAC;;;AAGD;;AAEA;AACA;AACA,EAAE;AACF;AACA;AACA,EAAE;;AAEF;AACA;AACA,EAAE;AACF;;AAEA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,EAAE;AAAA;AACF;;;;;AAKA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;;;;;AAMA;AACA,CAAC;;;;;;;AC3+TD,gF;;;;;;ACAA,gF;;;;;;ACAA,gF;;;;;;ACAA,gF;;;;;;ACAA,gF;;;;;;ACAA,gF;;;;;;ACAA,gF;;;;;;ACAA,gF;;;;;;ACAA,gF;;;;;;ACAA,gF;;;;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,qBAAqB,mDAAmD;AACxE;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,mBAAmB,UAAU;AAC7B;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,iBAAiB,YAAY;AAC7B;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA;;AAEA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,0BAA0B;AAC1B;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA,uCAAuC,SAAS;AAChD;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,iBAAiB;AAChC;AACA;AACA;;AAEA;AACA;AACA,aAAa,iBAAiB;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,iBAAiB,SAAS;AAC1B;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,iBAAiB,SAAS;AAC1B;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,iBAAiB,SAAS;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,gDAAgD,EAAE;AAClD;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA,iBAAiB,SAAS;AAC1B;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC;AACzC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA,wBAAwB,eAAe;AACvC;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,GAAG;AACH;AACA,wBAAwB,QAAQ;AAChC;AACA,qBAAqB,eAAe;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,iBAAiB,YAAY;AAC7B;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,qBAAqB,SAAS;AAC9B;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,qBAAqB,SAAS;AAC9B;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA,qBAAqB,SAAS;AAC9B;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,iBAAiB,kBAAkB;AACnC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,GAAG;AACH;AACA;;AAEA;AACA;AACA;AACA,GAAG;AACH;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,mBAAmB,cAAc;AACjuDAAuD,OAAO;AAC9D;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;;AAEA;AACA;AACA,uDAAuD,OAAO;AAC9D;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,kBAAkB;AAClB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,qBAAqB,QAAQ;AAC7B;AACA;AACA,GAAG;AACH;AACA,eAAe,SAAS;AACxB;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA,mBAAmB,SAAS;AAC5B;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,eAAe,iBAAiB;AAChC;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AAC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AA+C,cAAc;AAC7D;;;AAGA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA,oBAAoB,sBAAsB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,WAAW;AAC3C,iCAAiC,2BAA2B;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,mBAAmB;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,eAAe;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA,EAAE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA,+CAA+C,cAAc;AAC7D;;;AAGA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,uBAAuB;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,qBAAqB;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,mBAAmB;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE;AACF,+CAA+C,cAAc;AAC7D;;;AAGA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,oBAAoB;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,gBAAgB;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE;AACF;AACA,+CAA+C,cAAc;AAC7D;;;AAGA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA,oBAAoB,sBAAsB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE,8CAA8C;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,gBAAgB;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,mBAAmB;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,uBAAuB;AAC5C;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;;;AAGA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA,oBAAoB,sBAAsB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE;AACF,+CAA+C,cAAc;AAC7D;;;AAGA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA,kCAAkC,cAAc;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE;AACF,+CAA+C,cAAc;AAC7D;;;AAGA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU,IAAI;AACd;AACA;AACA,EAAE;AACF,+CAA+C,cAAc;AAC7D;;;AAGA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA,oBAAoB,sBAAsB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA,2DAA2D;AAC3D;AACA;AACA;AACA,EAAE;AACF,+CAA+C,cAAc;AAC7D;;;AAGA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA,oBAAoB,sBAAsB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2DAA2D;AAC3D;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE;AACF,+CAA+C,cAAc;AAC7D;;;AAGA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA,oBAAoB,sBAAsB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB;AACvB;AACA;AACA;AACA,EAAE;AACF;AACA,+CAA+C,cAAc;AAC7D;;;AAGA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA,oBAAoB,sBAAsB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,gBAAgB;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC,mBAAmB;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,sBAAsB;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC;AAClC;AACA,0BAA0B;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA,EAAE;AACF;AACA;AACA;AACA;AACA,+CAA+C,cAAc;AAC7D;;;AAGA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA,oBAAoB,sBAAsB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE;AACF;AACA;AACA;AACA,+CAA+C,cAAc;AAC7D;;;AAGA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA,oBAAoB,sBAAsB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE;AACF;AACA;AACA;AACA,+CAA+C,cAAc;AAC7D;;;AAGA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA,oBAAoB,sBAAsB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE;AACF,+CAA+C,cAAc;AAC7D;;;AAGA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA,oBAAoB,sBAAsB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,mBAAmB;AACvD;AACA;AACA;AACA,gCAAgC,eAAe;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE;AACF;AACA;AACA,+CAA+C,cAAc;AAC7D;;;AAGA,OAAO;AACP;AACA;;AAEA;;AAEA;AACA;AACA,EAAE;AACF;;AAEA,qGAAqG,mBAAmB,EAAE,mBAAmB,8HAA8H;;AAE3Q,mCAAmC,iCAAiC,eAAe,eAAe,gBAAgB,oBAAoB,MAAM,0CAA0C,+BAA+B,aAAa,qBAAqB,mCAAmC,EAAE,EAAE,cAAc,WAAW,UAAU,EAAE,UAAU,MAAM,yCAAyC,EAAE,UAAU,kBAAkB,EAAE,EAAE,aAAa,EAAE,2BAA2B,0BAA0B,YAAY,EAAE,2CAA2C,8BAA8B,EAAE,OAAO,6EAA6E,EAAE,GAAG,EAAE;;AAEtpB,iCAAiC,2CAA2C,gBAAgB,kBAAkB,OAAO,2BAA2B,wDAAwD,gCAAgC,uDAAuD,2DAA2D,EAAE,EAAE,yDAAyD,qEAAqE,6DAA6D,oBAAoB,GAAG,EAAE;;AAEljB;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA,uCAAuC,uCAAuC,gBAAgB;;AAE9F,4CAA4C,kBAAkB,kCAAkC,qEAAqE,EAAE,EAAE,OAAO,kBAAkB,EAAE,YAAY;;AAEhN,kDAAkD,0CAA0C,0DAA0D,EAAE;;AAExJ;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA,YAAY;AACZ;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;;AAEJ;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR,MAAM;AACN,gGAAgG;AAChG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,QAAQ;AACR;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV,0FAA0F;AAC1F,UAAU;AACV;AACA;AACA,UAAU;AACV,0FAA0F;AAC1F;AACA;AACA;AACA,QAAQ;AACR;AACA,IAAI;AACJ;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,QAAQ;AACR;AACA,IAAI;AACJ;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,QAAQ;AACR;AACA,IAAI;AACJ;AACA;AACA;;AAEA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;;AAEA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;;AAEA;AACA,qBAAqB;AACrB;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;;AAEA;;AAEA;AACA;AACA,QAAQ;AACR;AACA,IAAI;AACJ;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,QAAQ;AACR;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,QAAQ;AACR;AACA,IAAI;AACJ;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA,QAAQ;AACR;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;;AAEA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;;AAEA,+CAA+C;AAC/C;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,QAAQ;AACR;AACA,IAAI;;AAEJ;AACA,EAAE;;AAEF;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA,mDAAmD;AACnD;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA,IAAI,IAAI;AACR;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C,mBAAmB,wBAAwB;AACzF;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA,IAAI,IAAI;AACR;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;;AAEN;;AAEA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA,MAAM;;AAEN;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,OAAO;AACP;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA,IAAI;AACJ;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,sBAAsB,YAAY;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;;AAEA;AACA;AACA;AACA,EAAE;;AAEF,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;;;AAGA,6CAA6C;;;AAG7C;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA,IAAI;AACJ;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,qBAAqB,mBAAmB;AACxC;;AAEA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,0BAA0B;AAC1B;AACA;AACA,8BAA8B;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC;AAChC;AACA;AACA,QAAQ;AACR,gCAAgC;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,IAAI;AACJ;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA,MAAM;AACN,oDAAoD;AACpD;AACA;AACA;AACA;AACA,uBAAuB;AACvB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;;;AAGA;;;AAGA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA,YAAY,OAAO;AACnB,YAAY,OAAO;AACnB,YAAY,IAAI;AAChB,aAAa,MAAM;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA,YAAY,OAAO;AACnB,YAAY,OAAO;AACnB,aAAa,MAAM;AACnB;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;AAGA;AACA;AACA;AACA;AACA,YAAY,OAAO;AACnB,YAAY,OAAO;AACnB,aAAa,MAAM;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,cAAc;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,WAAW;AAC7B;AACA,gCAAgC,iBAAiB;AACjD;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,gCAAgC,iBAAiB;AACjD;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA,YAAY,OAAO;AACnB,YAAY,OAAO;AACnB,YAAY,OAAO;AACnB,YAAY,OAAO;AACnB,aAAa,MAAM;AACnB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;;AAGA;AACA;AACA,YAAY,OAAO;AACnB,YAAY,OAAO;AACnB,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA,YAAY,OAAO;AACnB,YAAY,OAAO;AACnB,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA,YAAY,OAAO;AACnB,YAAY,OAAO;AACnB,aAAa,eAAe;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;;AAEA;AACA;AACA;AACA;AACA,cAAc,OAAO;AACrB,cAAc,OAAO;AACrB,cAAc,OAAO;AACrB,eAAe,eAAe;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA,IAAI;AACJ;AACA,IAAI;AACJ;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA,YAAY,MAAM;AAClB;AACA;AACA,gCAAgC;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,MAAM;AAClB,YAAY,IAAI;AAChB,aAAa,MAAM;AACnB;AACA;AACA;AACA;AACA;AACA,mCAAmC,kBAAkB;AACrD;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,MAAM;AAClB,YAAY,IAAI;AAChB,aAAa,MAAM;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,YAAY,MAAM;AAClB,YAAY,IAAI;AAChB,YAAY,IAAI;AAChB,aAAa,MAAM;AACnB;AACA;AACA;AACA,mCAAmC,0BAA0B;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA,OAAO;AACP;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,IAAI;AACJ;;AAEA;AACA;AACA,IAAI;AACJ;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,cAAc;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,YAAY;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,QAAQ;AAClC;AACA;AACA;AACA;AACA;AACA,0BAA0B,QAAQ;AAClC;AACA;AACA;AACA;AACA;;;AAGA,OAAO;AACP;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;;AAGA,OAAO;AACP;AACA;;AAEA;AACA;AACA,EAAE;;AAEF;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA,OAAO;AACP;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,oBAAoB;;AAEpB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;;AAEA,QAAQ,YAAY;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;;AAEA;AACA;;AAEA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;;AAIA,OAAO;AACP;AACA;;AAEA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA,uCAAuC;AACvC;AACA;AACA;AACA;AACA;AACA;AACA,UAAU,IAAI;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;;AAEN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,IAAI;AACZ;AACA,MAAM;;AAEN;AACA;AACA;AACA,+BAA+B;AAC/B;AACA,4DAA4D;AAC5D;AACA,QAAQ,IAAI;AACZ;AACA;AACA,IAAI;;AAEJ;AACA;AACA,IAAI;;AAEJ;AACA;AACA;AACA,MAAM;AACN;AACA,MAAM;AACN;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA,eAAe;AACf,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ,aAAa;AACb;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;;;AAGA;;;AAGA,OAAO;AACP;AACA;;AAEA;;AAEA;AACA;AACA,EAAE;;AAEF,qGAAqG,mBAAmB,EAAE,mBAAmB,8HAA8H;;AAE3Q,mCAAmC,iCAAiC,eAAe,eAAe,gBAAgB,oBAAoB,MAAM,0CAA0C,+BAA+B,aAAa,qBAAqB,mCAAmC,EAAE,EAAE,cAAc,WAAW,UAAU,EAAE,UAAU,MAAM,yCAAyC,EAAE,UAAU,kBAAkB,EAAE,EAAE,aAAa,EAAE,2BAA2B,0BAA0B,YAAY,EAAE,2CAA2C,8BAA8B,EAAE,OAAO,6EAA6E,EAAE,GAAG,EAAE;;AAEtpB,iCAAiC,2CAA2C,gBAAgB,kBAAkB,OAAO,2BAA2B,wDAAwD,gCAAgC,uDAAuD,2DAA2D,EAAE,EAAE,yDAAyD,qEAAqE,6DAA6D,oBAAoB,GAAG,EAAE;;AAEljB;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA,uCAAuC,uCAAuC,gBAAgB;;AAE9F,4CAA4C,kBAAkB,kCAAkC,qEAAqE,EAAE,EAAE,OAAO,kBAAkB,EAAE,YAAY;;AAEhN,kDAAkD,0CAA0C,0DAA0D,EAAE;;AAExJ;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,mDAAmD;AACnD;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAY;AACZ,iDAAiD;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA,UAAU;AACV,QAAQ;AACR;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;;AAEA;;AAEA;AACA;AACA,QAAQ;AACR;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA,IAAI;AACJ;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,YAAY;AACZ;AACA;AACA,UAAU;AACV,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA,QAAQ;AACR;AACA,IAAI;AACJ;AACA;AACA;AACA,4FAA4F;AAC5F;AACA,IAAI;AACJ;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA,YAAY;AACZ;AACA,UAAU;AACV,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;;AAEJ;AACA,EAAE;;AAEF;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA,IAAI,IAAI;AACR;;AAEA;AACA;AACA;AACA;AACA;AACA,4BAA4B,6BAA6B;AACzD;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;;AAEA;;AAEA,OAAO;AACP;AACA;;AAEA;;AAEA;AACA;AACA,EAAE;AACF;;AAEA,mCAAmC,iCAAiC,eAAe,eAAe,gBAAgB,oBAAoB,MAAM,0CAA0C,+BAA+B,aAAa,qBAAqB,mCAAmC,EAAE,EAAE,cAAc,WAAW,UAAU,EAAE,UAAU,MAAM,yCAAyC,EAAE,UAAU,kBAAkB,EAAE,EAAE,aAAa,EAAE,2BAA2B,0BAA0B,YAAY,EAAE,2CAA2C,8BAA8B,EAAE,OAAO,6EAA6E,EAAE,GAAG,EAAE;;AAEtpB,iCAAiC,2CAA2C,gBAAgB,kBAAkB,OAAO,2BA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AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,OAAO;AACP;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAY,SAAS;AACrB,YAAY,MAAM;AAClB,YAAY,QAAQ;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,YAAY,cAAc;AAC1B,YAAY,QAAQ;AACpB,cAAc;AACd;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,2DAA2D,OAAO;AAClE;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,YAAY,cAAc;AAC1B,cAAc,QAAQ;AACtB;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,0CAA0C,SAAS;AACnD;AACA;;AAEA;AACA,IAAI;AACJ;AACA;;AAEA,gBAAgB,YAAY;AAC5B;;AAEA;AACA,4DAA4D;AAC5D,gEAAgE;AAChE,oEAAoE;AACpE,wEAAwE;AACxE;AACA,2DAA2D,SAAS;AACpE;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,YAAY,cAAc;AAC1B,YAAY,SAAS;AACrB,YAAY,MAAM;AAClB,cAAc,aAAa;AAC3B;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,YAAY,cAAc;AAC1B,YAAY,SAAS;AACrB,YAAY,MAAM;AAClB,cAAc,aAAa;AAC3B;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,YAAY,cAAc;AAC1B,YAAY,SAAS;AACrB,YAAY,MAAM;AAClB,YAAY,QAAQ;AACpB,cAAc,aAAa;AAC3B;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ,4DAA4D,YAAY;AACxE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,YAAY,cAAc;AAC1B,cAAc,aAAa;AAC3B;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;;AAGA,OAAO;AACP;AACA;;AAEA;;AAEA;AACA;AACA,EAAE;AACF;AACA;;AAEA;AACA;AACA,uFAAuF,aAAa;AACpG;AACA;;AAEA,0CAA0C;AAC1C;AACA;;AAEA;AACA;AACA;AACA;AACA,IAAI,IAAI;AACR;;AAEA;AACA;AACA;;AAEA;;AAEA,OAAO;AACP;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,EAAE;AACF;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,EAAE;AACF;AACA;;AAEA;AACA;AACA;AACA,EAAE;AACF;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,MAAM;AACN;AACA,MAAM;AACN;AACA;AACA;AACA,UAAU;AACV;AACA,UAAU;AACV,QAAQ;AACR,MAAM;AACN;AACA,MAAM;AACN;AACA;AACA,MAAM;AACN;AACA,MAAM;AACN;AACA;AACA;AACA,MAAM;AACN;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,sBAAsB,oBAAoB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;;AAEA;AACA;AACA,sBAAsB,6BAA6B;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,EAAE;;AAEF;AACA;AACA;;;AAGA,OAAO;AACP;AACA;;AAEA;;AAEA;AACA;AACA,EAAE;;AAEF,kDAAkD,0CAA0C,0DAA0D,EAAE;;AAExJ;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA,OAAO;AACP;AACA;;AAEA;;AAEA;AACA;AACA,EAAE;AACF;;AAEA,mCAAmC,iCAAiC,eAAe,eAAe,gBAAgB,oBAAoB,MAAM,0CAA0C,+BAA+B,aAAa,qBAAqB,mCAAmC,EAAE,EAAE,cAAc,WAAW,UAAU,EAAE,UAAU,MAAM,yCAAyC,EAAE,UAAU,kBAAkB,EAAE,EAAE,aAAa,EAAE,2BAA2B,0BAA0B,YAAY,EAAE,2CAA2C,8BAA8B,EAAE,OAAO,6EAA6E,EAAE,GAAG,EAAE;;AAEtpB,iCAAiC,2CAA2C,gBAAgB,kBAAkB,OAAO,2BAA2B,wDAAwD,gCAAgC,uDAAuD,2DAA2D,EAAE,EAAE,yDAAyD,qEAAqE,6DAA6D,oBAAoB,GAAG,EAAE;;AAEljB;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA,uCAAuC,uCAAuC,gBAAgB;;AAE9F,mCAAmC,0BAA0B,0CAA0C,gBAAgB,OAAO,kBAAkB,EAAE,aAAa,EAAE,OAAO,wBAAwB,EAAE;;AAElM,kDAAkD,0CAA0C,0DAA0D,EAAE;;AAExJ;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR,MAAM;AACN;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA,+DAA+D;AAC/D;AACA;AACA;AACA;AACA,UAAU;AACV,QAAQ;AACR,MAAM;AACN;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV,kEAAkE;AAClE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,oEAAoE;AACrF,eAAe,gEAAgE;AAC/E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA,UAAU;AACV;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,QAAQ;AACR;AACA;AACA;;AAEA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kDAAkD;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA,+BAA+B;AAC/B;AACA;AACA,IAAI;AACJ;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA,UAAU;AACV,QAAQ;AACR;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,IAAI;;AAEJ;AACA,EAAE;;AAEF;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,OAAO;AACP;AACA;;AAEA;;AAEA;AACA;AACA,EAAE;;AAEF,iCAAiC,2CAA2C,gBAAgB,kBAAkB,OAAO,2BAA2B,wDAAwD,gCAAgC,uDAAuD,2DAA2D,EAAE,EAAE,yDAAyD,qEAAqE,6DAA6D,oBAAoB,GAAG,EAAE;;AAEljB,kDAAkD,0CAA0C,0DAA0D,EAAE;;AAExJ;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA,IAAI;AACJ;AACA;AACA;AACA,wFAAwF;AACxF;AACA;AACA,IAAI;;AAEJ;AACA,EAAE;;AAEF;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,OAAO;AACP;AACA;;AAEA;;AAEA;AACA;AACA,EAAE;;AAEF;;AAEA;;AAEA;;AAEA;;AAEA,uCAAuC,uCAAuC,gBAAgB;;AAE9F,kDAAkD,0CAA0C,0DAA0D,EAAE;;AAExJ,kDAAkD,aAAa,uFAAuF,EAAE,uFAAuF;;AAE/O,2CAA2C,+DAA+D,qGAAqG,EAAE,yEAAyE,eAAe,yEAAyE,EAAE,EAAE,uHAAuH;;AAE7e;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA,EAAE;;AAEF;;AAEA;;AAEA,OAAO;AACP;AACA;;AAEA;;AAEA;AACA;AACA,EAAE;;AAEF,mCAAmC,iCAAiC,eAAe,eAAe,gBAAgB,oBAAoB,MAAM,0CAA0C,+BAA+B,aAAa,qBAAqB,mCAAmC,EAAE,EAAE,cAAc,WAAW,UAAU,EAAE,UAAU,MAAM,yCAAyC,EAAE,UAAU,kBAAkB,EAAE,EAAE,aAAa,EAAE,2BAA2B,0BAA0B,YAAY,EAAE,2CAA2C,8BAA8B,EAAE,OAAO,6EAA6E,EAAE,GAAG,EAAE;;AAEtpB,iCAAiC,2CAA2C,gBAAgB,kBAAkB,OAAO,2BAA2B,wDAAwD,gCAAgC,uDAAuD,2DAA2D,EAAE,EAAE,yDAAyD,qEAAqE,6DAA6D,oBAAoB,GAAG,EAAE;;AAEljB,sDAAsD,kDAAkD,8DAA8D,0BAA0B,4CAA4C,uBAAuB,kBAAkB,EAAE,OAAO,wCAAwC,EAAE,EAAE,4BAA4B,mBAAmB,EAAE,OAAO,uBAAuB,4BAA4B,kBAAkB,EAAE,8BAA8B,EAAE;;AAEze;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA,uCAAuC,uCAAuC,gBAAgB;;AAE9F,kDAAkD,0CAA0C,0DAA0D,EAAE;;AAExJ,kDAAkD,aAAa,uFAAuF,EAAE,uFAAuF;;AAE/O,2CAA2C,+DAA+D,qGAAqG,EAAE,yEAAyE,eAAe,yEAAyE,EAAE,EAAE,uHAAuH;;AAE7e;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA,QAAQ,IAAI;AACZ;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;;AAEA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA,mIAAmI;AACnI;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oIAAoI;AACpI;AACA;AACA;AACA;AACA,IAAI;;AAEJ;AACA,EAAE;;AAEF;AACA;AACA;AACA;AACA;;AAEA;;AAEA,OAAO;AACP;AACA;;AAEA;;AAEA;AACA;AACA,EAAE;AACF;;AAEA,mCAAmC,iCAAiC,eAAe,eAAe,gBAAgB,oBAAoB,MAAM,0CAA0C,+BAA+B,aAAa,qBAAqB,mCAAmC,EAAE,EAAE,cAAc,WAAW,UAAU,EAAE,UAAU,MAAM,yCAAyC,EAAE,UAAU,kBAAkB,EAAE,EAAE,aAAa,EAAE,2BAA2B,0BAA0B,YAAY,EAAE,2CAA2C,8BAA8B,EAAE,OAAO,6EAA6E,EAAE,GAAG,EAAE;;AAEtpB,iCAAiC,2CAA2C,gBAAgB,kBAAkB,OAAO,2BAA2B,wDAAwD,gCAAgC,uDAAuD,2DAA2D,EAAE,EAAE,yDAAyD,qEAAqE,6DAA6D,oBAAoB,GAAG,EAAE;;AAEljB;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA,uCAAuC,uCAAuC,gBAAgB;;AAE9F,4CAA4C,kBAAkB,kCAAkC,qEAAqE,EAAE,EAAE,OAAO,kBAAkB,EAAE,YAAY;;AAEhN,mCAAmC,0BAA0B,0CAA0C,gBAAgB,OAAO,kBAAkB,EAAE,aAAa,EAAE,OAAO,wBAAwB,EAAE;;AAElM,kDAAkD,0CAA0C,0DAA0D,EAAE;;AAExJ,kDAAkD,aAAa,uFAAuF,EAAE,uFAAuF;;AAE/O,2CAA2C,+DAA+D,qGAAqG,EAAE,yEAAyE,eAAe,yEAAyE,EAAE,EAAE,uHAAuH;;AAE7e;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA,EAAE,IAAI;;AAEN;AACA;AACA;AACA,EAAE,IAAI;;AAEN;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;;AAEA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA,IAAI;AACJ;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA,QAAQ;AACR;AACA;AACA,IAAI;;AAEJ;AACA,EAAE;;AAEF;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,qCAAqC,wCAAwC;AAC7E;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,kDAAkD;AAClD;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA,UAAU;AACV;AACA;AACA,MAAM;AACN,IAAI;AACJ;AACA;AACA;;AAEA;AACA,4FAA4F;AAC5F;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ,qCAAqC;AACrC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,iDAAiD;AACjD;AACA;AACA;AACA;AACA;AACA;AACA,+CAA+C;AAC/C;AACA;AACA;AACA,kEAAkE;AAClE;AACA;AACA;A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AEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA,uCAAuC,uCAAuC,gBAAgB;;AAE9F,kDAAkD,0CAA0C,0DAA0D,EAAE;;AAExJ,kDAAkD,aAAa,uFAAuF,EAAE,uFAAuF;;AAE/O,2CAA2C,+DAA+D,qGAAqG,EAAE,yEAAyE,eAAe,yEAAyE,EAAE,EAAE,uHAAuH;;AAE7e;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA,IAAI;;AAEJ;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN,uBAAuB,2CAA2C;AAClE,uBAAuB,uEAAuE,gBAAgB;AAC9G;AACA;AACA,yBAAyB,+BAA+B,GAAG,kBAAkB;AAC7E,yBAAyB,4BAA4B,GAAG,kBAAkB;AAC1E,MAAM;AACN,yBAAyB,+BAA+B,GAAG,kCAAkC;AAC7F,yBAAyB,4BAA4B,GAAG,kCAAkC;AAC1F;AACA,uBAAuB,+BAA+B,GAAG,mBAAmB;AAC5E,uBAAuB,4BAA4B,GAAG,mBAAmB;AACzE;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA,QAAQ;AACR;AACA,IAAI;;AAEJ;AACA,EAAE;;AAEF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA,UAAU;AACV;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA,gBAAgB,kBAAkB;AAClC;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA,gBAAgB,cAAc;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,2DAA2D;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,IAAI;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;;AAEA;AACA;AACA;AACA;AACA,cAAc,qBAAqB;AACnC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA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AEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA,MAAM;AACN;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA,6CAA6C;;;AAG7C;AACA,MAAM;AACN;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;;AAEA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA,UAAU;AACV;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,UAAU;AACV;AACA;AACA,oIAAoI;AACpI,UAAU;AACV;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA,uCAAuC;AACvC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B;AAC9B;AACA,YAAY;AACZ;AACA;AACA,UAAU;AACV;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA,QAAQ;AACR;AACA,IAAI;;AAEJ;AACA,EAAE;;AAEF;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA,MAAM;AACN;AACA,IAAI;AACJ;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA,IAAI;AACJ;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV,QAAQ;AACR;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,OAAO;AACP;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;;AAEA,OAAO;AACP;AACA;;AAEA;;AAEA,OAAO;AACP;AACA;;AAEA;;AAEA,OAAO;AACP;AACA;;AAEA;;AAEA,OAAO;AACP;AACA;;AAEA;;AAEA,OAAO;AACP;AACA;;AAEA;;AAEA,OAAO;AACP;AACA;;AAEA;;AAEA,OAAO;AACP;AACA;;AAEA;;AAEA,OAAO;AACP;AACA;;AAEA;;AAEA,OAAO;AACP;AACA;;AAEA;;AAEA,OAAO;AACP;AACA;;AAEA;;AAEA,OAAO;AACP;AACA;;AAEA;;AAEA,OAAO;AACP;AACA;;AAEA;;AAEA,OAAO;AACP;AACA;;AAEA;;AAEA,OAAO;AACP;AACA;;AAEA;;AAEA,OAAO;AACP;AACA;;AAEA;;AAEA,OAAO;AACP;AACA;;AAEA;;AAEA,OAAO;AACP;AACA;;AAEA;;AAEA,OAAO;AACP;AACA;;AAEA;;AAEA,OAAO;AACP;AACA;;AAEA;;AAEA,OAAO;AACP;AACA;;AAEA;;AAEA,OAAO;AACP;AACA;;AAEA;;AAEA,OAAO;AACP;AACA;;AAEA;;AAEA,OAAO;AACP;AACA;;AAEA;;AAEA,OAAO;AACP;AACA;;AAEA;;AAEA,OAAO;AACP;AACA;;AAEA;;AAEA,OAAO;AACP;AACA;;AAEA;;AAEA,OAAO;AACP;AACA;;AAEA;;AAEA,OAAO;AACP;AACA;;AAEA;;AAEA,OAAO;AACP;AACA;;AAEA;;AAEA,OAAO;AACP;AACA;;AAEA;;AAEA,OAAO;AACP;AACA;;AAEA;;AAEA,OAAO;AACP;AACA;;AAEA;;AAEA,OAAO;AACP;AACA;;AAEA;;AAEA;AACA;AACA,EAAE;;AAEF,qGAAqG,mBAAmB,EAAE,mBAAmB,8HAA8H;;AAE3Q,iCAAiC,2CAA2C,gBAAgB,kBAAkB,OAAO,2BAA2B,wDAAwD,gCAAgC,uDAAuD,2DAA2D,EAAE,EAAE,yDAAyD,qEAAqE,6DAA6D,oBAAoB,GAAG,EAAE;;AAEljB;;AAEA;;AAEA,uCAAuC,uCAAuC,gBAAgB;;AAE9F,kDAAkD,0CAA0C,0DAA0D,EAAE;;AAExJ;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA,IAAI;AACJ;AACA;AACA;;AAEA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA,IAAI;;AAEJ;AACA,EAAE;;AAEF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,EAAE,uFAAuF;;AAE/O,2CAA2C,+DAA+D,qGAAqG,EAAE,yEAAyE,eAAe,yEAAyE,EAAE,EAAE,uHAAuH;;AAE7e;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA,UAAU;AACV,QAAQ;AACR;AACA,IAAI;AACJ;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA,cAAc;AACd;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA,IAAI;;AAEJ;AACA,EAAE;;AAEF,oDAAoD;AACpD;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2HAA2H,yBAAyB;AACpJ;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA,EAAE;;AAEF;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA,QAAQ;AACR;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;;AAEJ;AACA,EAAE;;AAEF;AACA;;AAEA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA,IAAI;AACJ;;AAEA;AACA;;AAEA,OAAO;AACP;AACA;;AAEA;;AAEA;AACA;AACA,EAAE;;AAEF,mCAAmC,iCAAiC,eAAe,eAAe,gBAAgB,oBAAoB,MAAM,0CAA0C,+BAA+B,aAAa,qBAAqB,mCAAmC,EAAE,EAAE,cAAc,WAAW,UAAU,EAAE,UAAU,MAAM,yCAAyC,EAAE,UAAU,kBAAkB,EAAE,EAAE,aAAa,EAAE,2BAA2B,0BAA0B,YAAY,EAAE,2CAA2C,8BAA8B,EAAE,OAAO,6EAA6E,EAAE,GAAG,EAAE;;AAEtpB,sDAAsD,kDAAkD,8DAA8D,0BAA0B,4CAA4C,uBAAuB,kBAAkB,EAAE,OAAO,wCAAwC,EAAE,EAAE,4BAA4B,mBAAmB,EAAE,OAAO,uBAAuB,4BAA4B,kBAAkB,EAAE,8BAA8B,EAAE;;AAEze,iCAAiC,2CAA2C,gBAAgB,kBAAkB,OAAO,2BAA2B,wDAAwD,gCAAgC,uDAAuD,2DAA2D,EAAE,EAAE,yDAAyD,qEAAqE,6DAA6D,oBAAoB,GAAG,EAAE;;AAEljB;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA,uCAAuC,uCAAuC,gBAAgB;;AAE9F,kDAAkD,0CAA0C,0DAA0D,EAAE;;AAExJ,kDAAkD,aAAa,uFAAuF,EAAE,uFAAuF;;AAE/O,2CAA2C,+DAA+D,qGAAqG,EAAE,yEAAyE,eAAe,yEAAyE,EAAE,EAAE,uHAAuH;;AAE7e,yBAAyB,iCAAiC,8CAA8C,kBAAkB,GAAG,iBAAiB;;AAE9I;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC,2BAA2B;AACpE;AACA,UAAU;AACV;AACA;AACA,IAAI;;AAEJ;AACA,EAAE;;AAEF,oDAAoD;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA,EAAE;;AAEF;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA,QAAQ;AACR;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA,IAAI;;AAEJ;AACA,EAAE;;AAEF;;AAEA;;AAEA;AACA;AACA,CAAC;AACD,C;;;;;;;;AC90UA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,wCAAwC,WAAW,EAAE;AACrD,wCAAwC,WAAW,EAAE;;AAErD;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,GAAG;AACH;AACA,sCAAsC;AACtC,GAAG;AACH;AACA,8DAA8D;AAC9D;;AAEA;AACA;AACA,EAAE;;AAEF;AACA;AACA;;;;;;;AC9DA;;AAEA;AACA;AACA;AACA;AACA,+CAAiF;AACjF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,gCAAgC,UAAU,EAAE;AAC5C,C;;;;;;ACpBA;;AAEA;AACA;AACA;AACA;AACA,+CAAoE;AACpE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,gCAAgC,UAAU,EAAE;AAC5C,C;;;;;;ACpBA;;AAEA;AACA;AACA;AACA;AACA,+CAAoE;AACpE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,gCAAgC,UAAU,EAAE;AAC5C,C;;;;;;ACpBA;;AAEA;AACA;AACA;AACA;AACA,+CAAoE;AACpE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,gCAAgC,UAAU,EAAE;AAC5C,C;;;;;;ACpBA,gF;;;;;;ACAA,gF;;;;;;ACAA,6CAA6C,g4/F;;;;;;ACA7C,8CAA8C,wguE;;;;;;ACA9C,gF;;;;;;ACAA,gF;;;;;;ACAA,6CAA6C,wxlF;;;;;;ACA7C,8CAA8C,oy5D;;;;;;ACA9C,gF;;;;;;ACAA,gF;;;;;;ACAA,6CAA6C,o56F;;;;;;ACA7C,8CAA8C,wnqE;;;;;;ACA9C,gF;;;;;;ACAA,gF;;;;;;ACAA,6CAA6C,ok2F;;;;;;ACA7C,8CAA8C,wopE;;;;;;ACA9C,gF;;;;;;ACAA,gF;;;;;;ACAA,6CAA6C,wmmG;;;;;;ACA7C,8CAA8C,wzzE;;;;;;ACA9C,gF;;;;;;ACAA,gF;;;;;;ACAA,6CAA6C,ggnG;;;;;;ACA7C,8CAA8C,wlzE;;;;;;ACA9C,gF;;;;;;ACAA,gF;;;;;;ACAA,6CAA6C,w1jF;;;;;;ACA7C,8CAA8C,wx3D;;;;;;ACA9C,gF;;;;;;ACAA,gF;;;;;;ACAA,6CAA6C,g+lF;;;;;;ACA7C,8CAA8C,wu6D;;;;;;ACA9C,gF;;;;;;ACAA,gF;;;;;;ACAA,6CAA6C,o+kG;;;;;;ACA7C,8CAA8C,oyzE;;;;;;ACA9C,gF;;;;;;ACAA,gF;;;;;;ACAA,6CAA6C,wg2F;;;;;;ACA7C,8CAA8C,o/lF;;;;;;ACA9C;;AAEA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;;AAEA;AACA;AACA,4CAA4C;;AAE5C;;;;;;;;ACpBA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,kCAAkC,SAAS;AAC3C;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA,oBAAoB,OAAO;AAC3B;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,qBAAqB,SAAS;AAC9B;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,0CAA0C,UAAU;AACpD;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;;;;;;ACjHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,QAAQ,WAAW;;AAEnB;AACA;AACA;AACA,QAAQ,WAAW;;AAEnB;AACA;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;;AAEA,QAAQ,WAAW;;AAEnB;AACA;AACA,QAAQ,UAAU;;AAElB;AACA;;;;;;;ACnFA,iBAAiB;;AAEjB;AACA;AACA;;;;;;;;;;ACJA,mBAAArW,CAAQ,EAAR;AACA,mBAAAA,CAAQ,EAAR,E","file":"main.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// identity function for calling harmony imports with the correct context\n \t__webpack_require__.i = function(value) { return value; };\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 75);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 28b002f1b3ba596026a2","/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n// css base code, injected by the css-loader\nmodule.exports = function(useSourceMap) {\n\tvar list = [];\n\n\t// return the list of modules as css string\n\tlist.toString = function toString() {\n\t\treturn this.map(function (item) {\n\t\t\tvar content = cssWithMappingToString(item, useSourceMap);\n\t\t\tif(item[2]) {\n\t\t\t\treturn \"@media \" + item[2] + \"{\" + content + \"}\";\n\t\t\t} else {\n\t\t\t\treturn content;\n\t\t\t}\n\t\t}).join(\"\");\n\t};\n\n\t// import a list of modules into the list\n\tlist.i = function(modules, mediaQuery) {\n\t\tif(typeof modules === \"string\")\n\t\t\tmodules = [[null, modules, \"\"]];\n\t\tvar alreadyImportedModules = {};\n\t\tfor(var i = 0; i < this.length; i++) {\n\t\t\tvar id = this[i][0];\n\t\t\tif(typeof id === \"number\")\n\t\t\t\talreadyImportedModules[id] = true;\n\t\t}\n\t\tfor(i = 0; i < modules.length; i++) {\n\t\t\tvar item = modules[i];\n\t\t\t// skip already imported module\n\t\t\t// this implementation is not 100% perfect for weird media query combinations\n\t\t\t//  when a module is imported multiple times with different media queries.\n\t\t\t//  I hope this will never occur (Hey this way we have smaller bundles)\n\t\t\tif(typeof item[0] !== \"number\" || !alreadyImportedModules[item[0]]) {\n\t\t\t\tif(mediaQuery && !item[2]) {\n\t\t\t\t\titem[2] = mediaQuery;\n\t\t\t\t} else if(mediaQuery) {\n\t\t\t\t\titem[2] = \"(\" + item[2] + \") and (\" + mediaQuery + \")\";\n\t\t\t\t}\n\t\t\t\tlist.push(item);\n\t\t\t}\n\t\t}\n\t};\n\treturn list;\n};\n\nfunction cssWithMappingToString(item, useSourceMap) {\n\tvar content = item[1] || '';\n\tvar cssMapping = item[3];\n\tif (!cssMapping) {\n\t\treturn content;\n\t}\n\n\tif (useSourceMap) {\n\t\tvar sourceMapping = toComment(cssMapping);\n\t\tvar sourceURLs = cssMapping.sources.map(function (source) {\n\t\t\treturn '/*# sourceURL=' + cssMapping.sourceRoot + source + ' */'\n\t\t});\n\n\t\treturn [content].concat(sourceURLs).concat([sourceMapping]).join('\\n');\n\t}\n\n\treturn [content].join('\\n');\n}\n\n// Adapted from convert-source-map (MIT)\nfunction toComment(sourceMap) {\n  var base64 = new Buffer(JSON.stringify(sourceMap)).toString('base64');\n  var data = 'sourceMappingURL=data:application/json;charset=utf-8;base64,' + base64;\n\n  return '/*# ' + data + ' */';\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/css-loader/lib/css-base.js\n// module id = 0\n// module chunks = 0","/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\nvar stylesInDom = {},\n\tmemoize = function(fn) {\n\t\tvar memo;\n\t\treturn function () {\n\t\t\tif (typeof memo === \"undefined\") memo = fn.apply(this, arguments);\n\t\t\treturn memo;\n\t\t};\n\t},\n\tisOldIE = memoize(function() {\n\t\treturn /msie [6-9]\\b/.test(self.navigator.userAgent.toLowerCase());\n\t}),\n\tgetHeadElement = memoize(function () {\n\t\treturn document.head || document.getElementsByTagName(\"head\")[0];\n\t}),\n\tsingletonElement = null,\n\tsingletonCounter = 0,\n\tstyleElementsInsertedAtTop = [],\n\tfixUrls = require(\"./fixUrls\");\n\nmodule.exports = function(list, options) {\n\tif(typeof DEBUG !== \"undefined\" && DEBUG) {\n\t\tif(typeof document !== \"object\") throw new Error(\"The style-loader cannot be used in a non-browser environment\");\n\t}\n\n\toptions = options || {};\n\toptions.attrs = typeof options.attrs === \"object\" ? options.attrs : {};\n\n\t// Force single-tag solution on IE6-9, which has a hard limit on the # of <style>\n\t// tags it will allow on a page\n\tif (typeof options.singleton === \"undefined\") options.singleton = isOldIE();\n\n\t// By default, add <style> tags to the bottom of <head>.\n\tif (typeof options.insertAt === \"undefined\") options.insertAt = \"bottom\";\n\n\tvar styles = listToStyles(list);\n\taddStylesToDom(styles, options);\n\n\treturn function update(newList) {\n\t\tvar mayRemove = [];\n\t\tfor(var i = 0; i < styles.length; i++) {\n\t\t\tvar item = styles[i];\n\t\t\tvar domStyle = stylesInDom[item.id];\n\t\t\tdomStyle.refs--;\n\t\t\tmayRemove.push(domStyle);\n\t\t}\n\t\tif(newList) {\n\t\t\tvar newStyles = listToStyles(newList);\n\t\t\taddStylesToDom(newStyles, options);\n\t\t}\n\t\tfor(var i = 0; i < mayRemove.length; i++) {\n\t\t\tvar domStyle = mayRemove[i];\n\t\t\tif(domStyle.refs === 0) {\n\t\t\t\tfor(var j = 0; j < domStyle.parts.length; j++)\n\t\t\t\t\tdomStyle.parts[j]();\n\t\t\t\tdelete stylesInDom[domStyle.id];\n\t\t\t}\n\t\t}\n\t};\n};\n\nfunction addStylesToDom(styles, options) {\n\tfor(var i = 0; i < styles.length; i++) {\n\t\tvar item = styles[i];\n\t\tvar domStyle = stylesInDom[item.id];\n\t\tif(domStyle) {\n\t\t\tdomStyle.refs++;\n\t\t\tfor(var j = 0; j < domStyle.parts.length; j++) {\n\t\t\t\tdomStyle.parts[j](item.parts[j]);\n\t\t\t}\n\t\t\tfor(; j < item.parts.length; j++) {\n\t\t\t\tdomStyle.parts.push(addStyle(item.parts[j], options));\n\t\t\t}\n\t\t} else {\n\t\t\tvar parts = [];\n\t\t\tfor(var j = 0; j < item.parts.length; j++) {\n\t\t\t\tparts.push(addStyle(item.parts[j], options));\n\t\t\t}\n\t\t\tstylesInDom[item.id] = {id: item.id, refs: 1, parts: parts};\n\t\t}\n\t}\n}\n\nfunction listToStyles(list) {\n\tvar styles = [];\n\tvar newStyles = {};\n\tfor(var i = 0; i < list.length; i++) {\n\t\tvar item = list[i];\n\t\tvar id = item[0];\n\t\tvar css = item[1];\n\t\tvar media = item[2];\n\t\tvar sourceMap = item[3];\n\t\tvar part = {css: css, media: media, sourceMap: sourceMap};\n\t\tif(!newStyles[id])\n\t\t\tstyles.push(newStyles[id] = {id: id, parts: [part]});\n\t\telse\n\t\t\tnewStyles[id].parts.push(part);\n\t}\n\treturn styles;\n}\n\nfunction insertStyleElement(options, styleElement) {\n\tvar head = getHeadElement();\n\tvar lastStyleElementInsertedAtTop = styleElementsInsertedAtTop[styleElementsInsertedAtTop.length - 1];\n\tif (options.insertAt === \"top\") {\n\t\tif(!lastStyleElementInsertedAtTop) {\n\t\t\thead.insertBefore(styleElement, head.firstChild);\n\t\t} else if(lastStyleElementInsertedAtTop.nextSibling) {\n\t\t\thead.insertBefore(styleElement, lastStyleElementInsertedAtTop.nextSibling);\n\t\t} else {\n\t\t\thead.appendChild(styleElement);\n\t\t}\n\t\tstyleElementsInsertedAtTop.push(styleElement);\n\t} else if (options.insertAt === \"bottom\") {\n\t\thead.appendChild(styleElement);\n\t} else {\n\t\tthrow new Error(\"Invalid value for parameter 'insertAt'. Must be 'top' or 'bottom'.\");\n\t}\n}\n\nfunction removeStyleElement(styleElement) {\n\tstyleElement.parentNode.removeChild(styleElement);\n\tvar idx = styleElementsInsertedAtTop.indexOf(styleElement);\n\tif(idx >= 0) {\n\t\tstyleElementsInsertedAtTop.splice(idx, 1);\n\t}\n}\n\nfunction createStyleElement(options) {\n\tvar styleElement = document.createElement(\"style\");\n\toptions.attrs.type = \"text/css\";\n\n\tattachTagAttrs(styleElement, options.attrs);\n\tinsertStyleElement(options, styleElement);\n\treturn styleElement;\n}\n\nfunction createLinkElement(options) {\n\tvar linkElement = document.createElement(\"link\");\n\toptions.attrs.type = \"text/css\";\n\toptions.attrs.rel = \"stylesheet\";\n\n\tattachTagAttrs(linkElement, options.attrs);\n\tinsertStyleElement(options, linkElement);\n\treturn linkElement;\n}\n\nfunction attachTagAttrs(element, attrs) {\n\tObject.keys(attrs).forEach(function (key) {\n\t\telement.setAttribute(key, attrs[key]);\n\t});\n}\n\nfunction addStyle(obj, options) {\n\tvar styleElement, update, remove;\n\n\tif (options.singleton) {\n\t\tvar styleIndex = singletonCounter++;\n\t\tstyleElement = singletonElement || (singletonElement = createStyleElement(options));\n\t\tupdate = applyToSingletonTag.bind(null, styleElement, styleIndex, false);\n\t\tremove = applyToSingletonTag.bind(null, styleElement, styleIndex, true);\n\t} else if(obj.sourceMap &&\n\t\ttypeof URL === \"function\" &&\n\t\ttypeof URL.createObjectURL === \"function\" &&\n\t\ttypeof URL.revokeObjectURL === \"function\" &&\n\t\ttypeof Blob === \"function\" &&\n\t\ttypeof btoa === \"function\") {\n\t\tstyleElement = createLinkElement(options);\n\t\tupdate = updateLink.bind(null, styleElement, options);\n\t\tremove = function() {\n\t\t\tremoveStyleElement(styleElement);\n\t\t\tif(styleElement.href)\n\t\t\t\tURL.revokeObjectURL(styleElement.href);\n\t\t};\n\t} else {\n\t\tstyleElement = createStyleElement(options);\n\t\tupdate = applyToTag.bind(null, styleElement);\n\t\tremove = function() {\n\t\t\tremoveStyleElement(styleElement);\n\t\t};\n\t}\n\n\tupdate(obj);\n\n\treturn function updateStyle(newObj) {\n\t\tif(newObj) {\n\t\t\tif(newObj.css === obj.css && newObj.media === obj.media && newObj.sourceMap === obj.sourceMap)\n\t\t\t\treturn;\n\t\t\tupdate(obj = newObj);\n\t\t} else {\n\t\t\tremove();\n\t\t}\n\t};\n}\n\nvar replaceText = (function () {\n\tvar textStore = [];\n\n\treturn function (index, replacement) {\n\t\ttextStore[index] = replacement;\n\t\treturn textStore.filter(Boolean).join('\\n');\n\t};\n})();\n\nfunction applyToSingletonTag(styleElement, index, remove, obj) {\n\tvar css = remove ? \"\" : obj.css;\n\n\tif (styleElement.styleSheet) {\n\t\tstyleElement.styleSheet.cssText = replaceText(index, css);\n\t} else {\n\t\tvar cssNode = document.createTextNode(css);\n\t\tvar childNodes = styleElement.childNodes;\n\t\tif (childNodes[index]) styleElement.removeChild(childNodes[index]);\n\t\tif (childNodes.length) {\n\t\t\tstyleElement.insertBefore(cssNode, childNodes[index]);\n\t\t} else {\n\t\t\tstyleElement.appendChild(cssNode);\n\t\t}\n\t}\n}\n\nfunction applyToTag(styleElement, obj) {\n\tvar css = obj.css;\n\tvar media = obj.media;\n\n\tif(media) {\n\t\tstyleElement.setAttribute(\"media\", media)\n\t}\n\n\tif(styleElement.styleSheet) {\n\t\tstyleElement.styleSheet.cssText = css;\n\t} else {\n\t\twhile(styleElement.firstChild) {\n\t\t\tstyleElement.removeChild(styleElement.firstChild);\n\t\t}\n\t\tstyleElement.appendChild(document.createTextNode(css));\n\t}\n}\n\nfunction updateLink(linkElement, options, obj) {\n\tvar css = obj.css;\n\tvar sourceMap = obj.sourceMap;\n\n\t/* If convertToAbsoluteUrls isn't defined, but sourcemaps are enabled\n\tand there is no publicPath defined then lets turn convertToAbsoluteUrls\n\ton by default.  Otherwise default to the convertToAbsoluteUrls option\n\tdirectly\n\t*/\n\tvar autoFixUrls = options.convertToAbsoluteUrls === undefined && sourceMap;\n\n\tif (options.convertToAbsoluteUrls || autoFixUrls){\n\t\tcss = fixUrls(css);\n\t}\n\n\tif(sourceMap) {\n\t\t// http://stackoverflow.com/a/26603875\n\t\tcss += \"\\n/*# sourceMappingURL=data:application/json;base64,\" + btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))) + \" */\";\n\t}\n\n\tvar blob = new Blob([css], { type: \"text/css\" });\n\n\tvar oldSrc = linkElement.href;\n\n\tlinkElement.href = URL.createObjectURL(blob);\n\n\tif(oldSrc)\n\t\tURL.revokeObjectURL(oldSrc);\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/style-loader/addStyles.js\n// module id = 1\n// module chunks = 0","/*!\n * jQuery JavaScript Library v3.1.1\n * https://jquery.com/\n *\n * Includes Sizzle.js\n * https://sizzlejs.com/\n *\n * Copyright jQuery Foundation and other contributors\n * Released under the MIT license\n * https://jquery.org/license\n *\n * Date: 2016-09-22T22:30Z\n */\n( function( global, factory ) {\n\n\t\"use strict\";\n\n\tif ( typeof module === \"object\" && typeof module.exports === \"object\" ) {\n\n\t\t// For CommonJS and CommonJS-like environments where a proper `window`\n\t\t// is present, execute the factory and get jQuery.\n\t\t// For environments that do not have a `window` with a `document`\n\t\t// (such as Node.js), expose a factory as module.exports.\n\t\t// This accentuates the need for the creation of a real `window`.\n\t\t// e.g. var jQuery = require(\"jquery\")(window);\n\t\t// See ticket #14549 for more info.\n\t\tmodule.exports = global.document ?\n\t\t\tfactory( global, true ) :\n\t\t\tfunction( w ) {\n\t\t\t\tif ( !w.document ) {\n\t\t\t\t\tthrow new Error( \"jQuery requires a window with a document\" );\n\t\t\t\t}\n\t\t\t\treturn factory( w );\n\t\t\t};\n\t} else {\n\t\tfactory( global );\n\t}\n\n// Pass this if window is not defined yet\n} )( typeof window !== \"undefined\" ? window : this, function( window, noGlobal ) {\n\n// Edge <= 12 - 13+, Firefox <=18 - 45+, IE 10 - 11, Safari 5.1 - 9+, iOS 6 - 9.1\n// throw exceptions when non-strict code (e.g., ASP.NET 4.5) accesses strict mode\n// arguments.callee.caller (trac-13335). But as of jQuery 3.0 (2016), strict mode should be common\n// enough that all such attempts are guarded in a try block.\n\"use strict\";\n\nvar arr = [];\n\nvar document = window.document;\n\nvar getProto = Object.getPrototypeOf;\n\nvar slice = arr.slice;\n\nvar concat = arr.concat;\n\nvar push = arr.push;\n\nvar indexOf = arr.indexOf;\n\nvar class2type = {};\n\nvar toString = class2type.toString;\n\nvar hasOwn = class2type.hasOwnProperty;\n\nvar fnToString = hasOwn.toString;\n\nvar ObjectFunctionString = fnToString.call( Object );\n\nvar support = {};\n\n\n\n\tfunction DOMEval( code, doc ) {\n\t\tdoc = doc || document;\n\n\t\tvar script = doc.createElement( \"script\" );\n\n\t\tscript.text = code;\n\t\tdoc.head.appendChild( script ).parentNode.removeChild( script );\n\t}\n/* global Symbol */\n// Defining this global in .eslintrc.json would create a danger of using the global\n// unguarded in another place, it seems safer to define global only for this module\n\n\n\nvar\n\tversion = \"3.1.1\",\n\n\t// Define a local copy of jQuery\n\tjQuery = function( selector, context ) {\n\n\t\t// The jQuery object is actually just the init constructor 'enhanced'\n\t\t// Need init if jQuery is called (just allow error to be thrown if not included)\n\t\treturn new jQuery.fn.init( selector, context );\n\t},\n\n\t// Support: Android <=4.0 only\n\t// Make sure we trim BOM and NBSP\n\trtrim = /^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g,\n\n\t// Matches dashed string for camelizing\n\trmsPrefix = /^-ms-/,\n\trdashAlpha = /-([a-z])/g,\n\n\t// Used by jQuery.camelCase as callback to replace()\n\tfcamelCase = function( all, letter ) {\n\t\treturn letter.toUpperCase();\n\t};\n\njQuery.fn = jQuery.prototype = {\n\n\t// The current version of jQuery being used\n\tjquery: version,\n\n\tconstructor: jQuery,\n\n\t// The default length of a jQuery object is 0\n\tlength: 0,\n\n\ttoArray: function() {\n\t\treturn slice.call( this );\n\t},\n\n\t// Get the Nth element in the matched element set OR\n\t// Get the whole matched element set as a clean array\n\tget: function( num ) {\n\n\t\t// Return all the elements in a clean array\n\t\tif ( num == null ) {\n\t\t\treturn slice.call( this );\n\t\t}\n\n\t\t// Return just the one element from the set\n\t\treturn num < 0 ? this[ num + this.length ] : this[ num ];\n\t},\n\n\t// Take an array of elements and push it onto the stack\n\t// (returning the new matched element set)\n\tpushStack: function( elems ) {\n\n\t\t// Build a new jQuery matched element set\n\t\tvar ret = jQuery.merge( this.constructor(), elems );\n\n\t\t// Add the old object onto the stack (as a reference)\n\t\tret.prevObject = this;\n\n\t\t// Return the newly-formed element set\n\t\treturn ret;\n\t},\n\n\t// Execute a callback for every element in the matched set.\n\teach: function( callback ) {\n\t\treturn jQuery.each( this, callback );\n\t},\n\n\tmap: function( callback ) {\n\t\treturn this.pushStack( jQuery.map( this, function( elem, i ) {\n\t\t\treturn callback.call( elem, i, elem );\n\t\t} ) );\n\t},\n\n\tslice: function() {\n\t\treturn this.pushStack( slice.apply( this, arguments ) );\n\t},\n\n\tfirst: function() {\n\t\treturn this.eq( 0 );\n\t},\n\n\tlast: function() {\n\t\treturn this.eq( -1 );\n\t},\n\n\teq: function( i ) {\n\t\tvar len = this.length,\n\t\t\tj = +i + ( i < 0 ? len : 0 );\n\t\treturn this.pushStack( j >= 0 && j < len ? [ this[ j ] ] : [] );\n\t},\n\n\tend: function() {\n\t\treturn this.prevObject || this.constructor();\n\t},\n\n\t// For internal use only.\n\t// Behaves like an Array's method, not like a jQuery method.\n\tpush: push,\n\tsort: arr.sort,\n\tsplice: arr.splice\n};\n\njQuery.extend = jQuery.fn.extend = function() {\n\tvar options, name, src, copy, copyIsArray, clone,\n\t\ttarget = arguments[ 0 ] || {},\n\t\ti = 1,\n\t\tlength = arguments.length,\n\t\tdeep = false;\n\n\t// Handle a deep copy situation\n\tif ( typeof target === \"boolean\" ) {\n\t\tdeep = target;\n\n\t\t// Skip the boolean and the target\n\t\ttarget = arguments[ i ] || {};\n\t\ti++;\n\t}\n\n\t// Handle case when target is a string or something (possible in deep copy)\n\tif ( typeof target !== \"object\" && !jQuery.isFunction( target ) ) {\n\t\ttarget = {};\n\t}\n\n\t// Extend jQuery itself if only one argument is passed\n\tif ( i === length ) {\n\t\ttarget = this;\n\t\ti--;\n\t}\n\n\tfor ( ; i < length; i++ ) {\n\n\t\t// Only deal with non-null/undefined values\n\t\tif ( ( options = arguments[ i ] ) != null ) {\n\n\t\t\t// Extend the base object\n\t\t\tfor ( name in options ) {\n\t\t\t\tsrc = target[ name ];\n\t\t\t\tcopy = options[ name ];\n\n\t\t\t\t// Prevent never-ending loop\n\t\t\t\tif ( target === copy ) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\t// Recurse if we're merging plain objects or arrays\n\t\t\t\tif ( deep && copy && ( jQuery.isPlainObject( copy ) ||\n\t\t\t\t\t( copyIsArray = jQuery.isArray( copy ) ) ) ) {\n\n\t\t\t\t\tif ( copyIsArray ) {\n\t\t\t\t\t\tcopyIsArray = false;\n\t\t\t\t\t\tclone = src && jQuery.isArray( src ) ? src : [];\n\n\t\t\t\t\t} else {\n\t\t\t\t\t\tclone = src && jQuery.isPlainObject( src ) ? src : {};\n\t\t\t\t\t}\n\n\t\t\t\t\t// Never move original objects, clone them\n\t\t\t\t\ttarget[ name ] = jQuery.extend( deep, clone, copy );\n\n\t\t\t\t// Don't bring in undefined values\n\t\t\t\t} else if ( copy !== undefined ) {\n\t\t\t\t\ttarget[ name ] = copy;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// Return the modified object\n\treturn target;\n};\n\njQuery.extend( {\n\n\t// Unique for each copy of jQuery on the page\n\texpando: \"jQuery\" + ( version + Math.random() ).replace( /\\D/g, \"\" ),\n\n\t// Assume jQuery is ready without the ready module\n\tisReady: true,\n\n\terror: function( msg ) {\n\t\tthrow new Error( msg );\n\t},\n\n\tnoop: function() {},\n\n\tisFunction: function( obj ) {\n\t\treturn jQuery.type( obj ) === \"function\";\n\t},\n\n\tisArray: Array.isArray,\n\n\tisWindow: function( obj ) {\n\t\treturn obj != null && obj === obj.window;\n\t},\n\n\tisNumeric: function( obj ) {\n\n\t\t// As of jQuery 3.0, isNumeric is limited to\n\t\t// strings and numbers (primitives or objects)\n\t\t// that can be coerced to finite numbers (gh-2662)\n\t\tvar type = jQuery.type( obj );\n\t\treturn ( type === \"number\" || type === \"string\" ) &&\n\n\t\t\t// parseFloat NaNs numeric-cast false positives (\"\")\n\t\t\t// ...but misinterprets leading-number strings, particularly hex literals (\"0x...\")\n\t\t\t// subtraction forces infinities to NaN\n\t\t\t!isNaN( obj - parseFloat( obj ) );\n\t},\n\n\tisPlainObject: function( obj ) {\n\t\tvar proto, Ctor;\n\n\t\t// Detect obvious negatives\n\t\t// Use toString instead of jQuery.type to catch host objects\n\t\tif ( !obj || toString.call( obj ) !== \"[object Object]\" ) {\n\t\t\treturn false;\n\t\t}\n\n\t\tproto = getProto( obj );\n\n\t\t// Objects with no prototype (e.g., `Object.create( null )`) are plain\n\t\tif ( !proto ) {\n\t\t\treturn true;\n\t\t}\n\n\t\t// Objects with prototype are plain iff they were constructed by a global Object function\n\t\tCtor = hasOwn.call( proto, \"constructor\" ) && proto.constructor;\n\t\treturn typeof Ctor === \"function\" && fnToString.call( Ctor ) === ObjectFunctionString;\n\t},\n\n\tisEmptyObject: function( obj ) {\n\n\t\t/* eslint-disable no-unused-vars */\n\t\t// See https://github.com/eslint/eslint/issues/6125\n\t\tvar name;\n\n\t\tfor ( name in obj ) {\n\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t},\n\n\ttype: function( obj ) {\n\t\tif ( obj == null ) {\n\t\t\treturn obj + \"\";\n\t\t}\n\n\t\t// Support: Android <=2.3 only (functionish RegExp)\n\t\treturn typeof obj === \"object\" || typeof obj === \"function\" ?\n\t\t\tclass2type[ toString.call( obj ) ] || \"object\" :\n\t\t\ttypeof obj;\n\t},\n\n\t// Evaluates a script in a global context\n\tglobalEval: function( code ) {\n\t\tDOMEval( code );\n\t},\n\n\t// Convert dashed to camelCase; used by the css and data modules\n\t// Support: IE <=9 - 11, Edge 12 - 13\n\t// Microsoft forgot to hump their vendor prefix (#9572)\n\tcamelCase: function( string ) {\n\t\treturn string.replace( rmsPrefix, \"ms-\" ).replace( rdashAlpha, fcamelCase );\n\t},\n\n\tnodeName: function( elem, name ) {\n\t\treturn elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();\n\t},\n\n\teach: function( obj, callback ) {\n\t\tvar length, i = 0;\n\n\t\tif ( isArrayLike( obj ) ) {\n\t\t\tlength = obj.length;\n\t\t\tfor ( ; i < length; i++ ) {\n\t\t\t\tif ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tfor ( i in obj ) {\n\t\t\t\tif ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn obj;\n\t},\n\n\t// Support: Android <=4.0 only\n\ttrim: function( text ) {\n\t\treturn text == null ?\n\t\t\t\"\" :\n\t\t\t( text + \"\" ).replace( rtrim, \"\" );\n\t},\n\n\t// results is for internal usage only\n\tmakeArray: function( arr, results ) {\n\t\tvar ret = results || [];\n\n\t\tif ( arr != null ) {\n\t\t\tif ( isArrayLike( Object( arr ) ) ) {\n\t\t\t\tjQuery.merge( ret,\n\t\t\t\t\ttypeof arr === \"string\" ?\n\t\t\t\t\t[ arr ] : arr\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\tpush.call( ret, arr );\n\t\t\t}\n\t\t}\n\n\t\treturn ret;\n\t},\n\n\tinArray: function( elem, arr, i ) {\n\t\treturn arr == null ? -1 : indexOf.call( arr, elem, i );\n\t},\n\n\t// Support: Android <=4.0 only, PhantomJS 1 only\n\t// push.apply(_, arraylike) throws on ancient WebKit\n\tmerge: function( first, second ) {\n\t\tvar len = +second.length,\n\t\t\tj = 0,\n\t\t\ti = first.length;\n\n\t\tfor ( ; j < len; j++ ) {\n\t\t\tfirst[ i++ ] = second[ j ];\n\t\t}\n\n\t\tfirst.length = i;\n\n\t\treturn first;\n\t},\n\n\tgrep: function( elems, callback, invert ) {\n\t\tvar callbackInverse,\n\t\t\tmatches = [],\n\t\t\ti = 0,\n\t\t\tlength = elems.length,\n\t\t\tcallbackExpect = !invert;\n\n\t\t// Go through the array, only saving the items\n\t\t// that pass the validator function\n\t\tfor ( ; i < length; i++ ) {\n\t\t\tcallbackInverse = !callback( elems[ i ], i );\n\t\t\tif ( callbackInverse !== callbackExpect ) {\n\t\t\t\tmatches.push( elems[ i ] );\n\t\t\t}\n\t\t}\n\n\t\treturn matches;\n\t},\n\n\t// arg is for internal usage only\n\tmap: function( elems, callback, arg ) {\n\t\tvar length, value,\n\t\t\ti = 0,\n\t\t\tret = [];\n\n\t\t// Go through the array, translating each of the items to their new values\n\t\tif ( isArrayLike( elems ) ) {\n\t\t\tlength = elems.length;\n\t\t\tfor ( ; i < length; i++ ) {\n\t\t\t\tvalue = callback( elems[ i ], i, arg );\n\n\t\t\t\tif ( value != null ) {\n\t\t\t\t\tret.push( value );\n\t\t\t\t}\n\t\t\t}\n\n\t\t// Go through every key on the object,\n\t\t} else {\n\t\t\tfor ( i in elems ) {\n\t\t\t\tvalue = callback( elems[ i ], i, arg );\n\n\t\t\t\tif ( value != null ) {\n\t\t\t\t\tret.push( value );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Flatten any nested arrays\n\t\treturn concat.apply( [], ret );\n\t},\n\n\t// A global GUID counter for objects\n\tguid: 1,\n\n\t// Bind a function to a context, optionally partially applying any\n\t// arguments.\n\tproxy: function( fn, context ) {\n\t\tvar tmp, args, proxy;\n\n\t\tif ( typeof context === \"string\" ) {\n\t\t\ttmp = fn[ context ];\n\t\t\tcontext = fn;\n\t\t\tfn = tmp;\n\t\t}\n\n\t\t// Quick check to determine if target is callable, in the spec\n\t\t// this throws a TypeError, but we will just return undefined.\n\t\tif ( !jQuery.isFunction( fn ) ) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\t// Simulated bind\n\t\targs = slice.call( arguments, 2 );\n\t\tproxy = function() {\n\t\t\treturn fn.apply( context || this, args.concat( slice.call( arguments ) ) );\n\t\t};\n\n\t\t// Set the guid of unique handler to the same of original handler, so it can be removed\n\t\tproxy.guid = fn.guid = fn.guid || jQuery.guid++;\n\n\t\treturn proxy;\n\t},\n\n\tnow: Date.now,\n\n\t// jQuery.support is not used in Core but other projects attach their\n\t// properties to it so it needs to exist.\n\tsupport: support\n} );\n\nif ( typeof Symbol === \"function\" ) {\n\tjQuery.fn[ Symbol.iterator ] = arr[ Symbol.iterator ];\n}\n\n// Populate the class2type map\njQuery.each( \"Boolean Number String Function Array Date RegExp Object Error Symbol\".split( \" \" ),\nfunction( i, name ) {\n\tclass2type[ \"[object \" + name + \"]\" ] = name.toLowerCase();\n} );\n\nfunction isArrayLike( obj ) {\n\n\t// Support: real iOS 8.2 only (not reproducible in simulator)\n\t// `in` check used to prevent JIT error (gh-2145)\n\t// hasOwn isn't used here due to false negatives\n\t// regarding Nodelist length in IE\n\tvar length = !!obj && \"length\" in obj && obj.length,\n\t\ttype = jQuery.type( obj );\n\n\tif ( type === \"function\" || jQuery.isWindow( obj ) ) {\n\t\treturn false;\n\t}\n\n\treturn type === \"array\" || length === 0 ||\n\t\ttypeof length === \"number\" && length > 0 && ( length - 1 ) in obj;\n}\nvar Sizzle =\n/*!\n * Sizzle CSS Selector Engine v2.3.3\n * https://sizzlejs.com/\n *\n * Copyright jQuery Foundation and other contributors\n * Released under the MIT license\n * http://jquery.org/license\n *\n * Date: 2016-08-08\n */\n(function( window ) {\n\nvar i,\n\tsupport,\n\tExpr,\n\tgetText,\n\tisXML,\n\ttokenize,\n\tcompile,\n\tselect,\n\toutermostContext,\n\tsortInput,\n\thasDuplicate,\n\n\t// Local document vars\n\tsetDocument,\n\tdocument,\n\tdocElem,\n\tdocumentIsHTML,\n\trbuggyQSA,\n\trbuggyMatches,\n\tmatches,\n\tcontains,\n\n\t// Instance-specific data\n\texpando = \"sizzle\" + 1 * new Date(),\n\tpreferredDoc = window.document,\n\tdirruns = 0,\n\tdone = 0,\n\tclassCache = createCache(),\n\ttokenCache = createCache(),\n\tcompilerCache = createCache(),\n\tsortOrder = function( a, b ) {\n\t\tif ( a === b ) {\n\t\t\thasDuplicate = true;\n\t\t}\n\t\treturn 0;\n\t},\n\n\t// Instance methods\n\thasOwn = ({}).hasOwnProperty,\n\tarr = [],\n\tpop = arr.pop,\n\tpush_native = arr.push,\n\tpush = arr.push,\n\tslice = arr.slice,\n\t// Use a stripped-down indexOf as it's faster than native\n\t// https://jsperf.com/thor-indexof-vs-for/5\n\tindexOf = function( list, elem ) {\n\t\tvar i = 0,\n\t\t\tlen = list.length;\n\t\tfor ( ; i < len; i++ ) {\n\t\t\tif ( list[i] === elem ) {\n\t\t\t\treturn i;\n\t\t\t}\n\t\t}\n\t\treturn -1;\n\t},\n\n\tbooleans = \"checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped\",\n\n\t// Regular expressions\n\n\t// http://www.w3.org/TR/css3-selectors/#whitespace\n\twhitespace = \"[\\\\x20\\\\t\\\\r\\\\n\\\\f]\",\n\n\t// http://www.w3.org/TR/CSS21/syndata.html#value-def-identifier\n\tidentifier = \"(?:\\\\\\\\.|[\\\\w-]|[^\\0-\\\\xa0])+\",\n\n\t// Attribute selectors: http://www.w3.org/TR/selectors/#attribute-selectors\n\tattributes = \"\\\\[\" + whitespace + \"*(\" + identifier + \")(?:\" + whitespace +\n\t\t// Operator (capture 2)\n\t\t\"*([*^$|!~]?=)\" + whitespace +\n\t\t// \"Attribute values must be CSS identifiers [capture 5] or strings [capture 3 or capture 4]\"\n\t\t\"*(?:'((?:\\\\\\\\.|[^\\\\\\\\'])*)'|\\\"((?:\\\\\\\\.|[^\\\\\\\\\\\"])*)\\\"|(\" + identifier + \"))|)\" + whitespace +\n\t\t\"*\\\\]\",\n\n\tpseudos = \":(\" + identifier + \")(?:\\\\((\" +\n\t\t// To reduce the number of selectors needing tokenize in the preFilter, prefer arguments:\n\t\t// 1. quoted (capture 3; capture 4 or capture 5)\n\t\t\"('((?:\\\\\\\\.|[^\\\\\\\\'])*)'|\\\"((?:\\\\\\\\.|[^\\\\\\\\\\\"])*)\\\")|\" +\n\t\t// 2. simple (capture 6)\n\t\t\"((?:\\\\\\\\.|[^\\\\\\\\()[\\\\]]|\" + attributes + \")*)|\" +\n\t\t// 3. anything else (capture 2)\n\t\t\".*\" +\n\t\t\")\\\\)|)\",\n\n\t// Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter\n\trwhitespace = new RegExp( whitespace + \"+\", \"g\" ),\n\trtrim = new RegExp( \"^\" + whitespace + \"+|((?:^|[^\\\\\\\\])(?:\\\\\\\\.)*)\" + whitespace + \"+$\", \"g\" ),\n\n\trcomma = new RegExp( \"^\" + whitespace + \"*,\" + whitespace + \"*\" ),\n\trcombinators = new RegExp( \"^\" + whitespace + \"*([>+~]|\" + whitespace + \")\" + whitespace + \"*\" ),\n\n\trattributeQuotes = new RegExp( \"=\" + whitespace + \"*([^\\\\]'\\\"]*?)\" + whitespace + \"*\\\\]\", \"g\" ),\n\n\trpseudo = new RegExp( pseudos ),\n\tridentifier = new RegExp( \"^\" + identifier + \"$\" ),\n\n\tmatchExpr = {\n\t\t\"ID\": new RegExp( \"^#(\" + identifier + \")\" ),\n\t\t\"CLASS\": new RegExp( \"^\\\\.(\" + identifier + \")\" ),\n\t\t\"TAG\": new RegExp( \"^(\" + identifier + \"|[*])\" ),\n\t\t\"ATTR\": new RegExp( \"^\" + attributes ),\n\t\t\"PSEUDO\": new RegExp( \"^\" + pseudos ),\n\t\t\"CHILD\": new RegExp( \"^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\\\(\" + whitespace +\n\t\t\t\"*(even|odd|(([+-]|)(\\\\d*)n|)\" + whitespace + \"*(?:([+-]|)\" + whitespace +\n\t\t\t\"*(\\\\d+)|))\" + whitespace + \"*\\\\)|)\", \"i\" ),\n\t\t\"bool\": new RegExp( \"^(?:\" + booleans + \")$\", \"i\" ),\n\t\t// For use in libraries implementing .is()\n\t\t// We use this for POS matching in `select`\n\t\t\"needsContext\": new RegExp( \"^\" + whitespace + \"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\\\(\" +\n\t\t\twhitespace + \"*((?:-\\\\d)?\\\\d*)\" + whitespace + \"*\\\\)|)(?=[^-]|$)\", \"i\" )\n\t},\n\n\trinputs = /^(?:input|select|textarea|button)$/i,\n\trheader = /^h\\d$/i,\n\n\trnative = /^[^{]+\\{\\s*\\[native \\w/,\n\n\t// Easily-parseable/retrievable ID or TAG or CLASS selectors\n\trquickExpr = /^(?:#([\\w-]+)|(\\w+)|\\.([\\w-]+))$/,\n\n\trsibling = /[+~]/,\n\n\t// CSS escapes\n\t// http://www.w3.org/TR/CSS21/syndata.html#escaped-characters\n\trunescape = new RegExp( \"\\\\\\\\([\\\\da-f]{1,6}\" + whitespace + \"?|(\" + whitespace + \")|.)\", \"ig\" ),\n\tfunescape = function( _, escaped, escapedWhitespace ) {\n\t\tvar high = \"0x\" + escaped - 0x10000;\n\t\t// NaN means non-codepoint\n\t\t// Support: Firefox<24\n\t\t// Workaround erroneous numeric interpretation of +\"0x\"\n\t\treturn high !== high || escapedWhitespace ?\n\t\t\tescaped :\n\t\t\thigh < 0 ?\n\t\t\t\t// BMP codepoint\n\t\t\t\tString.fromCharCode( high + 0x10000 ) :\n\t\t\t\t// Supplemental Plane codepoint (surrogate pair)\n\t\t\t\tString.fromCharCode( high >> 10 | 0xD800, high & 0x3FF | 0xDC00 );\n\t},\n\n\t// CSS string/identifier serialization\n\t// https://drafts.csswg.org/cssom/#common-serializing-idioms\n\trcssescape = /([\\0-\\x1f\\x7f]|^-?\\d)|^-$|[^\\0-\\x1f\\x7f-\\uFFFF\\w-]/g,\n\tfcssescape = function( ch, asCodePoint ) {\n\t\tif ( asCodePoint ) {\n\n\t\t\t// U+0000 NULL becomes U+FFFD REPLACEMENT CHARACTER\n\t\t\tif ( ch === \"\\0\" ) {\n\t\t\t\treturn \"\\uFFFD\";\n\t\t\t}\n\n\t\t\t// Control characters and (dependent upon position) numbers get escaped as code points\n\t\t\treturn ch.slice( 0, -1 ) + \"\\\\\" + ch.charCodeAt( ch.length - 1 ).toString( 16 ) + \" \";\n\t\t}\n\n\t\t// Other potentially-special ASCII characters get backslash-escaped\n\t\treturn \"\\\\\" + ch;\n\t},\n\n\t// Used for iframes\n\t// See setDocument()\n\t// Removing the function wrapper causes a \"Permission Denied\"\n\t// error in IE\n\tunloadHandler = function() {\n\t\tsetDocument();\n\t},\n\n\tdisabledAncestor = addCombinator(\n\t\tfunction( elem ) {\n\t\t\treturn elem.disabled === true && (\"form\" in elem || \"label\" in elem);\n\t\t},\n\t\t{ dir: \"parentNode\", next: \"legend\" }\n\t);\n\n// Optimize for push.apply( _, NodeList )\ntry {\n\tpush.apply(\n\t\t(arr = slice.call( preferredDoc.childNodes )),\n\t\tpreferredDoc.childNodes\n\t);\n\t// Support: Android<4.0\n\t// Detect silently failing push.apply\n\tarr[ preferredDoc.childNodes.length ].nodeType;\n} catch ( e ) {\n\tpush = { apply: arr.length ?\n\n\t\t// Leverage slice if possible\n\t\tfunction( target, els ) {\n\t\t\tpush_native.apply( target, slice.call(els) );\n\t\t} :\n\n\t\t// Support: IE<9\n\t\t// Otherwise append directly\n\t\tfunction( target, els ) {\n\t\t\tvar j = target.length,\n\t\t\t\ti = 0;\n\t\t\t// Can't trust NodeList.length\n\t\t\twhile ( (target[j++] = els[i++]) ) {}\n\t\t\ttarget.length = j - 1;\n\t\t}\n\t};\n}\n\nfunction Sizzle( selector, context, results, seed ) {\n\tvar m, i, elem, nid, match, groups, newSelector,\n\t\tnewContext = context && context.ownerDocument,\n\n\t\t// nodeType defaults to 9, since context defaults to document\n\t\tnodeType = context ? context.nodeType : 9;\n\n\tresults = results || [];\n\n\t// Return early from calls with invalid selector or context\n\tif ( typeof selector !== \"string\" || !selector ||\n\t\tnodeType !== 1 && nodeType !== 9 && nodeType !== 11 ) {\n\n\t\treturn results;\n\t}\n\n\t// Try to shortcut find operations (as opposed to filters) in HTML documents\n\tif ( !seed ) {\n\n\t\tif ( ( context ? context.ownerDocument || context : preferredDoc ) !== document ) {\n\t\t\tsetDocument( context );\n\t\t}\n\t\tcontext = context || document;\n\n\t\tif ( documentIsHTML ) {\n\n\t\t\t// If the selector is sufficiently simple, try using a \"get*By*\" DOM method\n\t\t\t// (excepting DocumentFragment context, where the methods don't exist)\n\t\t\tif ( nodeType !== 11 && (match = rquickExpr.exec( selector )) ) {\n\n\t\t\t\t// ID selector\n\t\t\t\tif ( (m = match[1]) ) {\n\n\t\t\t\t\t// Document context\n\t\t\t\t\tif ( nodeType === 9 ) {\n\t\t\t\t\t\tif ( (elem = context.getElementById( m )) ) {\n\n\t\t\t\t\t\t\t// Support: IE, Opera, Webkit\n\t\t\t\t\t\t\t// TODO: identify versions\n\t\t\t\t\t\t\t// getElementById can match elements by name instead of ID\n\t\t\t\t\t\t\tif ( elem.id === m ) {\n\t\t\t\t\t\t\t\tresults.push( elem );\n\t\t\t\t\t\t\t\treturn results;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\treturn results;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t// Element context\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// Support: IE, Opera, Webkit\n\t\t\t\t\t\t// TODO: identify versions\n\t\t\t\t\t\t// getElementById can match elements by name instead of ID\n\t\t\t\t\t\tif ( newContext && (elem = newContext.getElementById( m )) &&\n\t\t\t\t\t\t\tcontains( context, elem ) &&\n\t\t\t\t\t\t\telem.id === m ) {\n\n\t\t\t\t\t\t\tresults.push( elem );\n\t\t\t\t\t\t\treturn results;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t// Type selector\n\t\t\t\t} else if ( match[2] ) {\n\t\t\t\t\tpush.apply( results, context.getElementsByTagName( selector ) );\n\t\t\t\t\treturn results;\n\n\t\t\t\t// Class selector\n\t\t\t\t} else if ( (m = match[3]) && support.getElementsByClassName &&\n\t\t\t\t\tcontext.getElementsByClassName ) {\n\n\t\t\t\t\tpush.apply( results, context.getElementsByClassName( m ) );\n\t\t\t\t\treturn results;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Take advantage of querySelectorAll\n\t\t\tif ( support.qsa &&\n\t\t\t\t!compilerCache[ selector + \" \" ] &&\n\t\t\t\t(!rbuggyQSA || !rbuggyQSA.test( selector )) ) {\n\n\t\t\t\tif ( nodeType !== 1 ) {\n\t\t\t\t\tnewContext = context;\n\t\t\t\t\tnewSelector = selector;\n\n\t\t\t\t// qSA looks outside Element context, which is not what we want\n\t\t\t\t// Thanks to Andrew Dupont for this workaround technique\n\t\t\t\t// Support: IE <=8\n\t\t\t\t// Exclude object elements\n\t\t\t\t} else if ( context.nodeName.toLowerCase() !== \"object\" ) {\n\n\t\t\t\t\t// Capture the context ID, setting it first if necessary\n\t\t\t\t\tif ( (nid = context.getAttribute( \"id\" )) ) {\n\t\t\t\t\t\tnid = nid.replace( rcssescape, fcssescape );\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcontext.setAttribute( \"id\", (nid = expando) );\n\t\t\t\t\t}\n\n\t\t\t\t\t// Prefix every selector in the list\n\t\t\t\t\tgroups = tokenize( selector );\n\t\t\t\t\ti = groups.length;\n\t\t\t\t\twhile ( i-- ) {\n\t\t\t\t\t\tgroups[i] = \"#\" + nid + \" \" + toSelector( groups[i] );\n\t\t\t\t\t}\n\t\t\t\t\tnewSelector = groups.join( \",\" );\n\n\t\t\t\t\t// Expand context for sibling selectors\n\t\t\t\t\tnewContext = rsibling.test( selector ) && testContext( context.parentNode ) ||\n\t\t\t\t\t\tcontext;\n\t\t\t\t}\n\n\t\t\t\tif ( newSelector ) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tpush.apply( results,\n\t\t\t\t\t\t\tnewContext.querySelectorAll( newSelector )\n\t\t\t\t\t\t);\n\t\t\t\t\t\treturn results;\n\t\t\t\t\t} catch ( qsaError ) {\n\t\t\t\t\t} finally {\n\t\t\t\t\t\tif ( nid === expando ) {\n\t\t\t\t\t\t\tcontext.removeAttribute( \"id\" );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// All others\n\treturn select( selector.replace( rtrim, \"$1\" ), context, results, seed );\n}\n\n/**\n * Create key-value caches of limited size\n * @returns {function(string, object)} Returns the Object data after storing it on itself with\n *\tproperty name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)\n *\tdeleting the oldest entry\n */\nfunction createCache() {\n\tvar keys = [];\n\n\tfunction cache( key, value ) {\n\t\t// Use (key + \" \") to avoid collision with native prototype properties (see Issue #157)\n\t\tif ( keys.push( key + \" \" ) > Expr.cacheLength ) {\n\t\t\t// Only keep the most recent entries\n\t\t\tdelete cache[ keys.shift() ];\n\t\t}\n\t\treturn (cache[ key + \" \" ] = value);\n\t}\n\treturn cache;\n}\n\n/**\n * Mark a function for special use by Sizzle\n * @param {Function} fn The function to mark\n */\nfunction markFunction( fn ) {\n\tfn[ expando ] = true;\n\treturn fn;\n}\n\n/**\n * Support testing using an element\n * @param {Function} fn Passed the created element and returns a boolean result\n */\nfunction assert( fn ) {\n\tvar el = document.createElement(\"fieldset\");\n\n\ttry {\n\t\treturn !!fn( el );\n\t} catch (e) {\n\t\treturn false;\n\t} finally {\n\t\t// Remove from its parent by default\n\t\tif ( el.parentNode ) {\n\t\t\tel.parentNode.removeChild( el );\n\t\t}\n\t\t// release memory in IE\n\t\tel = null;\n\t}\n}\n\n/**\n * Adds the same handler for all of the specified attrs\n * @param {String} attrs Pipe-separated list of attributes\n * @param {Function} handler The method that will be applied\n */\nfunction addHandle( attrs, handler ) {\n\tvar arr = attrs.split(\"|\"),\n\t\ti = arr.length;\n\n\twhile ( i-- ) {\n\t\tExpr.attrHandle[ arr[i] ] = handler;\n\t}\n}\n\n/**\n * Checks document order of two siblings\n * @param {Element} a\n * @param {Element} b\n * @returns {Number} Returns less than 0 if a precedes b, greater than 0 if a follows b\n */\nfunction siblingCheck( a, b ) {\n\tvar cur = b && a,\n\t\tdiff = cur && a.nodeType === 1 && b.nodeType === 1 &&\n\t\t\ta.sourceIndex - b.sourceIndex;\n\n\t// Use IE sourceIndex if available on both nodes\n\tif ( diff ) {\n\t\treturn diff;\n\t}\n\n\t// Check if b follows a\n\tif ( cur ) {\n\t\twhile ( (cur = cur.nextSibling) ) {\n\t\t\tif ( cur === b ) {\n\t\t\t\treturn -1;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn a ? 1 : -1;\n}\n\n/**\n * Returns a function to use in pseudos for input types\n * @param {String} type\n */\nfunction createInputPseudo( type ) {\n\treturn function( elem ) {\n\t\tvar name = elem.nodeName.toLowerCase();\n\t\treturn name === \"input\" && elem.type === type;\n\t};\n}\n\n/**\n * Returns a function to use in pseudos for buttons\n * @param {String} type\n */\nfunction createButtonPseudo( type ) {\n\treturn function( elem ) {\n\t\tvar name = elem.nodeName.toLowerCase();\n\t\treturn (name === \"input\" || name === \"button\") && elem.type === type;\n\t};\n}\n\n/**\n * Returns a function to use in pseudos for :enabled/:disabled\n * @param {Boolean} disabled true for :disabled; false for :enabled\n */\nfunction createDisabledPseudo( disabled ) {\n\n\t// Known :disabled false positives: fieldset[disabled] > legend:nth-of-type(n+2) :can-disable\n\treturn function( elem ) {\n\n\t\t// Only certain elements can match :enabled or :disabled\n\t\t// https://html.spec.whatwg.org/multipage/scripting.html#selector-enabled\n\t\t// https://html.spec.whatwg.org/multipage/scripting.html#selector-disabled\n\t\tif ( \"form\" in elem ) {\n\n\t\t\t// Check for inherited disabledness on relevant non-disabled elements:\n\t\t\t// * listed form-associated elements in a disabled fieldset\n\t\t\t//   https://html.spec.whatwg.org/multipage/forms.html#category-listed\n\t\t\t//   https://html.spec.whatwg.org/multipage/forms.html#concept-fe-disabled\n\t\t\t// * option elements in a disabled optgroup\n\t\t\t//   https://html.spec.whatwg.org/multipage/forms.html#concept-option-disabled\n\t\t\t// All such elements have a \"form\" property.\n\t\t\tif ( elem.parentNode && elem.disabled === false ) {\n\n\t\t\t\t// Option elements defer to a parent optgroup if present\n\t\t\t\tif ( \"label\" in elem ) {\n\t\t\t\t\tif ( \"label\" in elem.parentNode ) {\n\t\t\t\t\t\treturn elem.parentNode.disabled === disabled;\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn elem.disabled === disabled;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Support: IE 6 - 11\n\t\t\t\t// Use the isDisabled shortcut property to check for disabled fieldset ancestors\n\t\t\t\treturn elem.isDisabled === disabled ||\n\n\t\t\t\t\t// Where there is no isDisabled, check manually\n\t\t\t\t\t/* jshint -W018 */\n\t\t\t\t\telem.isDisabled !== !disabled &&\n\t\t\t\t\t\tdisabledAncestor( elem ) === disabled;\n\t\t\t}\n\n\t\t\treturn elem.disabled === disabled;\n\n\t\t// Try to winnow out elements that can't be disabled before trusting the disabled property.\n\t\t// Some victims get caught in our net (label, legend, menu, track), but it shouldn't\n\t\t// even exist on them, let alone have a boolean value.\n\t\t} else if ( \"label\" in elem ) {\n\t\t\treturn elem.disabled === disabled;\n\t\t}\n\n\t\t// Remaining elements are neither :enabled nor :disabled\n\t\treturn false;\n\t};\n}\n\n/**\n * Returns a function to use in pseudos for positionals\n * @param {Function} fn\n */\nfunction createPositionalPseudo( fn ) {\n\treturn markFunction(function( argument ) {\n\t\targument = +argument;\n\t\treturn markFunction(function( seed, matches ) {\n\t\t\tvar j,\n\t\t\t\tmatchIndexes = fn( [], seed.length, argument ),\n\t\t\t\ti = matchIndexes.length;\n\n\t\t\t// Match elements found at the specified indexes\n\t\t\twhile ( i-- ) {\n\t\t\t\tif ( seed[ (j = matchIndexes[i]) ] ) {\n\t\t\t\t\tseed[j] = !(matches[j] = seed[j]);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t});\n}\n\n/**\n * Checks a node for validity as a Sizzle context\n * @param {Element|Object=} context\n * @returns {Element|Object|Boolean} The input node if acceptable, otherwise a falsy value\n */\nfunction testContext( context ) {\n\treturn context && typeof context.getElementsByTagName !== \"undefined\" && context;\n}\n\n// Expose support vars for convenience\nsupport = Sizzle.support = {};\n\n/**\n * Detects XML nodes\n * @param {Element|Object} elem An element or a document\n * @returns {Boolean} True iff elem is a non-HTML XML node\n */\nisXML = Sizzle.isXML = function( elem ) {\n\t// documentElement is verified for cases where it doesn't yet exist\n\t// (such as loading iframes in IE - #4833)\n\tvar documentElement = elem && (elem.ownerDocument || elem).documentElement;\n\treturn documentElement ? documentElement.nodeName !== \"HTML\" : false;\n};\n\n/**\n * Sets document-related variables once based on the current document\n * @param {Element|Object} [doc] An element or document object to use to set the document\n * @returns {Object} Returns the current document\n */\nsetDocument = Sizzle.setDocument = function( node ) {\n\tvar hasCompare, subWindow,\n\t\tdoc = node ? node.ownerDocument || node : preferredDoc;\n\n\t// Return early if doc is invalid or already selected\n\tif ( doc === document || doc.nodeType !== 9 || !doc.documentElement ) {\n\t\treturn document;\n\t}\n\n\t// Update global variables\n\tdocument = doc;\n\tdocElem = document.documentElement;\n\tdocumentIsHTML = !isXML( document );\n\n\t// Support: IE 9-11, Edge\n\t// Accessing iframe documents after unload throws \"permission denied\" errors (jQuery #13936)\n\tif ( preferredDoc !== document &&\n\t\t(subWindow = document.defaultView) && subWindow.top !== subWindow ) {\n\n\t\t// Support: IE 11, Edge\n\t\tif ( subWindow.addEventListener ) {\n\t\t\tsubWindow.addEventListener( \"unload\", unloadHandler, false );\n\n\t\t// Support: IE 9 - 10 only\n\t\t} else if ( subWindow.attachEvent ) {\n\t\t\tsubWindow.attachEvent( \"onunload\", unloadHandler );\n\t\t}\n\t}\n\n\t/* Attributes\n\t---------------------------------------------------------------------- */\n\n\t// Support: IE<8\n\t// Verify that getAttribute really returns attributes and not properties\n\t// (excepting IE8 booleans)\n\tsupport.attributes = assert(function( el ) {\n\t\tel.className = \"i\";\n\t\treturn !el.getAttribute(\"className\");\n\t});\n\n\t/* getElement(s)By*\n\t---------------------------------------------------------------------- */\n\n\t// Check if getElementsByTagName(\"*\") returns only elements\n\tsupport.getElementsByTagName = assert(function( el ) {\n\t\tel.appendChild( document.createComment(\"\") );\n\t\treturn !el.getElementsByTagName(\"*\").length;\n\t});\n\n\t// Support: IE<9\n\tsupport.getElementsByClassName = rnative.test( document.getElementsByClassName );\n\n\t// Support: IE<10\n\t// Check if getElementById returns elements by name\n\t// The broken getElementById methods don't pick up programmatically-set names,\n\t// so use a roundabout getElementsByName test\n\tsupport.getById = assert(function( el ) {\n\t\tdocElem.appendChild( el ).id = expando;\n\t\treturn !document.getElementsByName || !document.getElementsByName( expando ).length;\n\t});\n\n\t// ID filter and find\n\tif ( support.getById ) {\n\t\tExpr.filter[\"ID\"] = function( id ) {\n\t\t\tvar attrId = id.replace( runescape, funescape );\n\t\t\treturn function( elem ) {\n\t\t\t\treturn elem.getAttribute(\"id\") === attrId;\n\t\t\t};\n\t\t};\n\t\tExpr.find[\"ID\"] = function( id, context ) {\n\t\t\tif ( typeof context.getElementById !== \"undefined\" && documentIsHTML ) {\n\t\t\t\tvar elem = context.getElementById( id );\n\t\t\t\treturn elem ? [ elem ] : [];\n\t\t\t}\n\t\t};\n\t} else {\n\t\tExpr.filter[\"ID\"] =  function( id ) {\n\t\t\tvar attrId = id.replace( runescape, funescape );\n\t\t\treturn function( elem ) {\n\t\t\t\tvar node = typeof elem.getAttributeNode !== \"undefined\" &&\n\t\t\t\t\telem.getAttributeNode(\"id\");\n\t\t\t\treturn node && node.value === attrId;\n\t\t\t};\n\t\t};\n\n\t\t// Support: IE 6 - 7 only\n\t\t// getElementById is not reliable as a find shortcut\n\t\tExpr.find[\"ID\"] = function( id, context ) {\n\t\t\tif ( typeof context.getElementById !== \"undefined\" && documentIsHTML ) {\n\t\t\t\tvar node, i, elems,\n\t\t\t\t\telem = context.getElementById( id );\n\n\t\t\t\tif ( elem ) {\n\n\t\t\t\t\t// Verify the id attribute\n\t\t\t\t\tnode = elem.getAttributeNode(\"id\");\n\t\t\t\t\tif ( node && node.value === id ) {\n\t\t\t\t\t\treturn [ elem ];\n\t\t\t\t\t}\n\n\t\t\t\t\t// Fall back on getElementsByName\n\t\t\t\t\telems = context.getElementsByName( id );\n\t\t\t\t\ti = 0;\n\t\t\t\t\twhile ( (elem = elems[i++]) ) {\n\t\t\t\t\t\tnode = elem.getAttributeNode(\"id\");\n\t\t\t\t\t\tif ( node && node.value === id ) {\n\t\t\t\t\t\t\treturn [ elem ];\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn [];\n\t\t\t}\n\t\t};\n\t}\n\n\t// Tag\n\tExpr.find[\"TAG\"] = support.getElementsByTagName ?\n\t\tfunction( tag, context ) {\n\t\t\tif ( typeof context.getElementsByTagName !== \"undefined\" ) {\n\t\t\t\treturn context.getElementsByTagName( tag );\n\n\t\t\t// DocumentFragment nodes don't have gEBTN\n\t\t\t} else if ( support.qsa ) {\n\t\t\t\treturn context.querySelectorAll( tag );\n\t\t\t}\n\t\t} :\n\n\t\tfunction( tag, context ) {\n\t\t\tvar elem,\n\t\t\t\ttmp = [],\n\t\t\t\ti = 0,\n\t\t\t\t// By happy coincidence, a (broken) gEBTN appears on DocumentFragment nodes too\n\t\t\t\tresults = context.getElementsByTagName( tag );\n\n\t\t\t// Filter out possible comments\n\t\t\tif ( tag === \"*\" ) {\n\t\t\t\twhile ( (elem = results[i++]) ) {\n\t\t\t\t\tif ( elem.nodeType === 1 ) {\n\t\t\t\t\t\ttmp.push( elem );\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn tmp;\n\t\t\t}\n\t\t\treturn results;\n\t\t};\n\n\t// Class\n\tExpr.find[\"CLASS\"] = support.getElementsByClassName && function( className, context ) {\n\t\tif ( typeof context.getElementsByClassName !== \"undefined\" && documentIsHTML ) {\n\t\t\treturn context.getElementsByClassName( className );\n\t\t}\n\t};\n\n\t/* QSA/matchesSelector\n\t---------------------------------------------------------------------- */\n\n\t// QSA and matchesSelector support\n\n\t// matchesSelector(:active) reports false when true (IE9/Opera 11.5)\n\trbuggyMatches = [];\n\n\t// qSa(:focus) reports false when true (Chrome 21)\n\t// We allow this because of a bug in IE8/9 that throws an error\n\t// whenever `document.activeElement` is accessed on an iframe\n\t// So, we allow :focus to pass through QSA all the time to avoid the IE error\n\t// See https://bugs.jquery.com/ticket/13378\n\trbuggyQSA = [];\n\n\tif ( (support.qsa = rnative.test( document.querySelectorAll )) ) {\n\t\t// Build QSA regex\n\t\t// Regex strategy adopted from Diego Perini\n\t\tassert(function( el ) {\n\t\t\t// Select is set to empty string on purpose\n\t\t\t// This is to test IE's treatment of not explicitly\n\t\t\t// setting a boolean content attribute,\n\t\t\t// since its presence should be enough\n\t\t\t// https://bugs.jquery.com/ticket/12359\n\t\t\tdocElem.appendChild( el ).innerHTML = \"<a id='\" + expando + \"'></a>\" +\n\t\t\t\t\"<select id='\" + expando + \"-\\r\\\\' msallowcapture=''>\" +\n\t\t\t\t\"<option selected=''></option></select>\";\n\n\t\t\t// Support: IE8, Opera 11-12.16\n\t\t\t// Nothing should be selected when empty strings follow ^= or $= or *=\n\t\t\t// The test attribute must be unknown in Opera but \"safe\" for WinRT\n\t\t\t// https://msdn.microsoft.com/en-us/library/ie/hh465388.aspx#attribute_section\n\t\t\tif ( el.querySelectorAll(\"[msallowcapture^='']\").length ) {\n\t\t\t\trbuggyQSA.push( \"[*^$]=\" + whitespace + \"*(?:''|\\\"\\\")\" );\n\t\t\t}\n\n\t\t\t// Support: IE8\n\t\t\t// Boolean attributes and \"value\" are not treated correctly\n\t\t\tif ( !el.querySelectorAll(\"[selected]\").length ) {\n\t\t\t\trbuggyQSA.push( \"\\\\[\" + whitespace + \"*(?:value|\" + booleans + \")\" );\n\t\t\t}\n\n\t\t\t// Support: Chrome<29, Android<4.4, Safari<7.0+, iOS<7.0+, PhantomJS<1.9.8+\n\t\t\tif ( !el.querySelectorAll( \"[id~=\" + expando + \"-]\" ).length ) {\n\t\t\t\trbuggyQSA.push(\"~=\");\n\t\t\t}\n\n\t\t\t// Webkit/Opera - :checked should return selected option elements\n\t\t\t// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked\n\t\t\t// IE8 throws error here and will not see later tests\n\t\t\tif ( !el.querySelectorAll(\":checked\").length ) {\n\t\t\t\trbuggyQSA.push(\":checked\");\n\t\t\t}\n\n\t\t\t// Support: Safari 8+, iOS 8+\n\t\t\t// https://bugs.webkit.org/show_bug.cgi?id=136851\n\t\t\t// In-page `selector#id sibling-combinator selector` fails\n\t\t\tif ( !el.querySelectorAll( \"a#\" + expando + \"+*\" ).length ) {\n\t\t\t\trbuggyQSA.push(\".#.+[+~]\");\n\t\t\t}\n\t\t});\n\n\t\tassert(function( el ) {\n\t\t\tel.innerHTML = \"<a href='' disabled='disabled'></a>\" +\n\t\t\t\t\"<select disabled='disabled'><option/></select>\";\n\n\t\t\t// Support: Windows 8 Native Apps\n\t\t\t// The type and name attributes are restricted during .innerHTML assignment\n\t\t\tvar input = document.createElement(\"input\");\n\t\t\tinput.setAttribute( \"type\", \"hidden\" );\n\t\t\tel.appendChild( input ).setAttribute( \"name\", \"D\" );\n\n\t\t\t// Support: IE8\n\t\t\t// Enforce case-sensitivity of name attribute\n\t\t\tif ( el.querySelectorAll(\"[name=d]\").length ) {\n\t\t\t\trbuggyQSA.push( \"name\" + whitespace + \"*[*^$|!~]?=\" );\n\t\t\t}\n\n\t\t\t// FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)\n\t\t\t// IE8 throws error here and will not see later tests\n\t\t\tif ( el.querySelectorAll(\":enabled\").length !== 2 ) {\n\t\t\t\trbuggyQSA.push( \":enabled\", \":disabled\" );\n\t\t\t}\n\n\t\t\t// Support: IE9-11+\n\t\t\t// IE's :disabled selector does not pick up the children of disabled fieldsets\n\t\t\tdocElem.appendChild( el ).disabled = true;\n\t\t\tif ( el.querySelectorAll(\":disabled\").length !== 2 ) {\n\t\t\t\trbuggyQSA.push( \":enabled\", \":disabled\" );\n\t\t\t}\n\n\t\t\t// Opera 10-11 does not throw on post-comma invalid pseudos\n\t\t\tel.querySelectorAll(\"*,:x\");\n\t\t\trbuggyQSA.push(\",.*:\");\n\t\t});\n\t}\n\n\tif ( (support.matchesSelector = rnative.test( (matches = docElem.matches ||\n\t\tdocElem.webkitMatchesSelector ||\n\t\tdocElem.mozMatchesSelector ||\n\t\tdocElem.oMatchesSelector ||\n\t\tdocElem.msMatchesSelector) )) ) {\n\n\t\tassert(function( el ) {\n\t\t\t// Check to see if it's possible to do matchesSelector\n\t\t\t// on a disconnected node (IE 9)\n\t\t\tsupport.disconnectedMatch = matches.call( el, \"*\" );\n\n\t\t\t// This should fail with an exception\n\t\t\t// Gecko does not error, returns false instead\n\t\t\tmatches.call( el, \"[s!='']:x\" );\n\t\t\trbuggyMatches.push( \"!=\", pseudos );\n\t\t});\n\t}\n\n\trbuggyQSA = rbuggyQSA.length && new RegExp( rbuggyQSA.join(\"|\") );\n\trbuggyMatches = rbuggyMatches.length && new RegExp( rbuggyMatches.join(\"|\") );\n\n\t/* Contains\n\t---------------------------------------------------------------------- */\n\thasCompare = rnative.test( docElem.compareDocumentPosition );\n\n\t// Element contains another\n\t// Purposefully self-exclusive\n\t// As in, an element does not contain itself\n\tcontains = hasCompare || rnative.test( docElem.contains ) ?\n\t\tfunction( a, b ) {\n\t\t\tvar adown = a.nodeType === 9 ? a.documentElement : a,\n\t\t\t\tbup = b && b.parentNode;\n\t\t\treturn a === bup || !!( bup && bup.nodeType === 1 && (\n\t\t\t\tadown.contains ?\n\t\t\t\t\tadown.contains( bup ) :\n\t\t\t\t\ta.compareDocumentPosition && a.compareDocumentPosition( bup ) & 16\n\t\t\t));\n\t\t} :\n\t\tfunction( a, b ) {\n\t\t\tif ( b ) {\n\t\t\t\twhile ( (b = b.parentNode) ) {\n\t\t\t\t\tif ( b === a ) {\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn false;\n\t\t};\n\n\t/* Sorting\n\t---------------------------------------------------------------------- */\n\n\t// Document order sorting\n\tsortOrder = hasCompare ?\n\tfunction( a, b ) {\n\n\t\t// Flag for duplicate removal\n\t\tif ( a === b ) {\n\t\t\thasDuplicate = true;\n\t\t\treturn 0;\n\t\t}\n\n\t\t// Sort on method existence if only one input has compareDocumentPosition\n\t\tvar compare = !a.compareDocumentPosition - !b.compareDocumentPosition;\n\t\tif ( compare ) {\n\t\t\treturn compare;\n\t\t}\n\n\t\t// Calculate position if both inputs belong to the same document\n\t\tcompare = ( a.ownerDocument || a ) === ( b.ownerDocument || b ) ?\n\t\t\ta.compareDocumentPosition( b ) :\n\n\t\t\t// Otherwise we know they are disconnected\n\t\t\t1;\n\n\t\t// Disconnected nodes\n\t\tif ( compare & 1 ||\n\t\t\t(!support.sortDetached && b.compareDocumentPosition( a ) === compare) ) {\n\n\t\t\t// Choose the first element that is related to our preferred document\n\t\t\tif ( a === document || a.ownerDocument === preferredDoc && contains(preferredDoc, a) ) {\n\t\t\t\treturn -1;\n\t\t\t}\n\t\t\tif ( b === document || b.ownerDocument === preferredDoc && contains(preferredDoc, b) ) {\n\t\t\t\treturn 1;\n\t\t\t}\n\n\t\t\t// Maintain original order\n\t\t\treturn sortInput ?\n\t\t\t\t( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :\n\t\t\t\t0;\n\t\t}\n\n\t\treturn compare & 4 ? -1 : 1;\n\t} :\n\tfunction( a, b ) {\n\t\t// Exit early if the nodes are identical\n\t\tif ( a === b ) {\n\t\t\thasDuplicate = true;\n\t\t\treturn 0;\n\t\t}\n\n\t\tvar cur,\n\t\t\ti = 0,\n\t\t\taup = a.parentNode,\n\t\t\tbup = b.parentNode,\n\t\t\tap = [ a ],\n\t\t\tbp = [ b ];\n\n\t\t// Parentless nodes are either documents or disconnected\n\t\tif ( !aup || !bup ) {\n\t\t\treturn a === document ? -1 :\n\t\t\t\tb === document ? 1 :\n\t\t\t\taup ? -1 :\n\t\t\t\tbup ? 1 :\n\t\t\t\tsortInput ?\n\t\t\t\t( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :\n\t\t\t\t0;\n\n\t\t// If the nodes are siblings, we can do a quick check\n\t\t} else if ( aup === bup ) {\n\t\t\treturn siblingCheck( a, b );\n\t\t}\n\n\t\t// Otherwise we need full lists of their ancestors for comparison\n\t\tcur = a;\n\t\twhile ( (cur = cur.parentNode) ) {\n\t\t\tap.unshift( cur );\n\t\t}\n\t\tcur = b;\n\t\twhile ( (cur = cur.parentNode) ) {\n\t\t\tbp.unshift( cur );\n\t\t}\n\n\t\t// Walk down the tree looking for a discrepancy\n\t\twhile ( ap[i] === bp[i] ) {\n\t\t\ti++;\n\t\t}\n\n\t\treturn i ?\n\t\t\t// Do a sibling check if the nodes have a common ancestor\n\t\t\tsiblingCheck( ap[i], bp[i] ) :\n\n\t\t\t// Otherwise nodes in our document sort first\n\t\t\tap[i] === preferredDoc ? -1 :\n\t\t\tbp[i] === preferredDoc ? 1 :\n\t\t\t0;\n\t};\n\n\treturn document;\n};\n\nSizzle.matches = function( expr, elements ) {\n\treturn Sizzle( expr, null, null, elements );\n};\n\nSizzle.matchesSelector = function( elem, expr ) {\n\t// Set document vars if needed\n\tif ( ( elem.ownerDocument || elem ) !== document ) {\n\t\tsetDocument( elem );\n\t}\n\n\t// Make sure that attribute selectors are quoted\n\texpr = expr.replace( rattributeQuotes, \"='$1']\" );\n\n\tif ( support.matchesSelector && documentIsHTML &&\n\t\t!compilerCache[ expr + \" \" ] &&\n\t\t( !rbuggyMatches || !rbuggyMatches.test( expr ) ) &&\n\t\t( !rbuggyQSA     || !rbuggyQSA.test( expr ) ) ) {\n\n\t\ttry {\n\t\t\tvar ret = matches.call( elem, expr );\n\n\t\t\t// IE 9's matchesSelector returns false on disconnected nodes\n\t\t\tif ( ret || support.disconnectedMatch ||\n\t\t\t\t\t// As well, disconnected nodes are said to be in a document\n\t\t\t\t\t// fragment in IE 9\n\t\t\t\t\telem.document && elem.document.nodeType !== 11 ) {\n\t\t\t\treturn ret;\n\t\t\t}\n\t\t} catch (e) {}\n\t}\n\n\treturn Sizzle( expr, document, null, [ elem ] ).length > 0;\n};\n\nSizzle.contains = function( context, elem ) {\n\t// Set document vars if needed\n\tif ( ( context.ownerDocument || context ) !== document ) {\n\t\tsetDocument( context );\n\t}\n\treturn contains( context, elem );\n};\n\nSizzle.attr = function( elem, name ) {\n\t// Set document vars if needed\n\tif ( ( elem.ownerDocument || elem ) !== document ) {\n\t\tsetDocument( elem );\n\t}\n\n\tvar fn = Expr.attrHandle[ name.toLowerCase() ],\n\t\t// Don't get fooled by Object.prototype properties (jQuery #13807)\n\t\tval = fn && hasOwn.call( Expr.attrHandle, name.toLowerCase() ) ?\n\t\t\tfn( elem, name, !documentIsHTML ) :\n\t\t\tundefined;\n\n\treturn val !== undefined ?\n\t\tval :\n\t\tsupport.attributes || !documentIsHTML ?\n\t\t\telem.getAttribute( name ) :\n\t\t\t(val = elem.getAttributeNode(name)) && val.specified ?\n\t\t\t\tval.value :\n\t\t\t\tnull;\n};\n\nSizzle.escape = function( sel ) {\n\treturn (sel + \"\").replace( rcssescape, fcssescape );\n};\n\nSizzle.error = function( msg ) {\n\tthrow new Error( \"Syntax error, unrecognized expression: \" + msg );\n};\n\n/**\n * Document sorting and removing duplicates\n * @param {ArrayLike} results\n */\nSizzle.uniqueSort = function( results ) {\n\tvar elem,\n\t\tduplicates = [],\n\t\tj = 0,\n\t\ti = 0;\n\n\t// Unless we *know* we can detect duplicates, assume their presence\n\thasDuplicate = !support.detectDuplicates;\n\tsortInput = !support.sortStable && results.slice( 0 );\n\tresults.sort( sortOrder );\n\n\tif ( hasDuplicate ) {\n\t\twhile ( (elem = results[i++]) ) {\n\t\t\tif ( elem === results[ i ] ) {\n\t\t\t\tj = duplicates.push( i );\n\t\t\t}\n\t\t}\n\t\twhile ( j-- ) {\n\t\t\tresults.splice( duplicates[ j ], 1 );\n\t\t}\n\t}\n\n\t// Clear input after sorting to release objects\n\t// See https://github.com/jquery/sizzle/pull/225\n\tsortInput = null;\n\n\treturn results;\n};\n\n/**\n * Utility function for retrieving the text value of an array of DOM nodes\n * @param {Array|Element} elem\n */\ngetText = Sizzle.getText = function( elem ) {\n\tvar node,\n\t\tret = \"\",\n\t\ti = 0,\n\t\tnodeType = elem.nodeType;\n\n\tif ( !nodeType ) {\n\t\t// If no nodeType, this is expected to be an array\n\t\twhile ( (node = elem[i++]) ) {\n\t\t\t// Do not traverse comment nodes\n\t\t\tret += getText( node );\n\t\t}\n\t} else if ( nodeType === 1 || nodeType === 9 || nodeType === 11 ) {\n\t\t// Use textContent for elements\n\t\t// innerText usage removed for consistency of new lines (jQuery #11153)\n\t\tif ( typeof elem.textContent === \"string\" ) {\n\t\t\treturn elem.textContent;\n\t\t} else {\n\t\t\t// Traverse its children\n\t\t\tfor ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {\n\t\t\t\tret += getText( elem );\n\t\t\t}\n\t\t}\n\t} else if ( nodeType === 3 || nodeType === 4 ) {\n\t\treturn elem.nodeValue;\n\t}\n\t// Do not include comment or processing instruction nodes\n\n\treturn ret;\n};\n\nExpr = Sizzle.selectors = {\n\n\t// Can be adjusted by the user\n\tcacheLength: 50,\n\n\tcreatePseudo: markFunction,\n\n\tmatch: matchExpr,\n\n\tattrHandle: {},\n\n\tfind: {},\n\n\trelative: {\n\t\t\">\": { dir: \"parentNode\", first: true },\n\t\t\" \": { dir: \"parentNode\" },\n\t\t\"+\": { dir: \"previousSibling\", first: true },\n\t\t\"~\": { dir: \"previousSibling\" }\n\t},\n\n\tpreFilter: {\n\t\t\"ATTR\": function( match ) {\n\t\t\tmatch[1] = match[1].replace( runescape, funescape );\n\n\t\t\t// Move the given value to match[3] whether quoted or unquoted\n\t\t\tmatch[3] = ( match[3] || match[4] || match[5] || \"\" ).replace( runescape, funescape );\n\n\t\t\tif ( match[2] === \"~=\" ) {\n\t\t\t\tmatch[3] = \" \" + match[3] + \" \";\n\t\t\t}\n\n\t\t\treturn match.slice( 0, 4 );\n\t\t},\n\n\t\t\"CHILD\": function( match ) {\n\t\t\t/* matches from matchExpr[\"CHILD\"]\n\t\t\t\t1 type (only|nth|...)\n\t\t\t\t2 what (child|of-type)\n\t\t\t\t3 argument (even|odd|\\d*|\\d*n([+-]\\d+)?|...)\n\t\t\t\t4 xn-component of xn+y argument ([+-]?\\d*n|)\n\t\t\t\t5 sign of xn-component\n\t\t\t\t6 x of xn-component\n\t\t\t\t7 sign of y-component\n\t\t\t\t8 y of y-component\n\t\t\t*/\n\t\t\tmatch[1] = match[1].toLowerCase();\n\n\t\t\tif ( match[1].slice( 0, 3 ) === \"nth\" ) {\n\t\t\t\t// nth-* requires argument\n\t\t\t\tif ( !match[3] ) {\n\t\t\t\t\tSizzle.error( match[0] );\n\t\t\t\t}\n\n\t\t\t\t// numeric x and y parameters for Expr.filter.CHILD\n\t\t\t\t// remember that false/true cast respectively to 0/1\n\t\t\t\tmatch[4] = +( match[4] ? match[5] + (match[6] || 1) : 2 * ( match[3] === \"even\" || match[3] === \"odd\" ) );\n\t\t\t\tmatch[5] = +( ( match[7] + match[8] ) || match[3] === \"odd\" );\n\n\t\t\t// other types prohibit arguments\n\t\t\t} else if ( match[3] ) {\n\t\t\t\tSizzle.error( match[0] );\n\t\t\t}\n\n\t\t\treturn match;\n\t\t},\n\n\t\t\"PSEUDO\": function( match ) {\n\t\t\tvar excess,\n\t\t\t\tunquoted = !match[6] && match[2];\n\n\t\t\tif ( matchExpr[\"CHILD\"].test( match[0] ) ) {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\t// Accept quoted arguments as-is\n\t\t\tif ( match[3] ) {\n\t\t\t\tmatch[2] = match[4] || match[5] || \"\";\n\n\t\t\t// Strip excess characters from unquoted arguments\n\t\t\t} else if ( unquoted && rpseudo.test( unquoted ) &&\n\t\t\t\t// Get excess from tokenize (recursively)\n\t\t\t\t(excess = tokenize( unquoted, true )) &&\n\t\t\t\t// advance to the next closing parenthesis\n\t\t\t\t(excess = unquoted.indexOf( \")\", unquoted.length - excess ) - unquoted.length) ) {\n\n\t\t\t\t// excess is a negative index\n\t\t\t\tmatch[0] = match[0].slice( 0, excess );\n\t\t\t\tmatch[2] = unquoted.slice( 0, excess );\n\t\t\t}\n\n\t\t\t// Return only captures needed by the pseudo filter method (type and argument)\n\t\t\treturn match.slice( 0, 3 );\n\t\t}\n\t},\n\n\tfilter: {\n\n\t\t\"TAG\": function( nodeNameSelector ) {\n\t\t\tvar nodeName = nodeNameSelector.replace( runescape, funescape ).toLowerCase();\n\t\t\treturn nodeNameSelector === \"*\" ?\n\t\t\t\tfunction() { return true; } :\n\t\t\t\tfunction( elem ) {\n\t\t\t\t\treturn elem.nodeName && elem.nodeName.toLowerCase() === nodeName;\n\t\t\t\t};\n\t\t},\n\n\t\t\"CLASS\": function( className ) {\n\t\t\tvar pattern = classCache[ className + \" \" ];\n\n\t\t\treturn pattern ||\n\t\t\t\t(pattern = new RegExp( \"(^|\" + whitespace + \")\" + className + \"(\" + whitespace + \"|$)\" )) &&\n\t\t\t\tclassCache( className, function( elem ) {\n\t\t\t\t\treturn pattern.test( typeof elem.className === \"string\" && elem.className || typeof elem.getAttribute !== \"undefined\" && elem.getAttribute(\"class\") || \"\" );\n\t\t\t\t});\n\t\t},\n\n\t\t\"ATTR\": function( name, operator, check ) {\n\t\t\treturn function( elem ) {\n\t\t\t\tvar result = Sizzle.attr( elem, name );\n\n\t\t\t\tif ( result == null ) {\n\t\t\t\t\treturn operator === \"!=\";\n\t\t\t\t}\n\t\t\t\tif ( !operator ) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\n\t\t\t\tresult += \"\";\n\n\t\t\t\treturn operator === \"=\" ? result === check :\n\t\t\t\t\toperator === \"!=\" ? result !== check :\n\t\t\t\t\toperator === \"^=\" ? check && result.indexOf( check ) === 0 :\n\t\t\t\t\toperator === \"*=\" ? check && result.indexOf( check ) > -1 :\n\t\t\t\t\toperator === \"$=\" ? check && result.slice( -check.length ) === check :\n\t\t\t\t\toperator === \"~=\" ? ( \" \" + result.replace( rwhitespace, \" \" ) + \" \" ).indexOf( check ) > -1 :\n\t\t\t\t\toperator === \"|=\" ? result === check || result.slice( 0, check.length + 1 ) === check + \"-\" :\n\t\t\t\t\tfalse;\n\t\t\t};\n\t\t},\n\n\t\t\"CHILD\": function( type, what, argument, first, last ) {\n\t\t\tvar simple = type.slice( 0, 3 ) !== \"nth\",\n\t\t\t\tforward = type.slice( -4 ) !== \"last\",\n\t\t\t\tofType = what === \"of-type\";\n\n\t\t\treturn first === 1 && last === 0 ?\n\n\t\t\t\t// Shortcut for :nth-*(n)\n\t\t\t\tfunction( elem ) {\n\t\t\t\t\treturn !!elem.parentNode;\n\t\t\t\t} :\n\n\t\t\t\tfunction( elem, context, xml ) {\n\t\t\t\t\tvar cache, uniqueCache, outerCache, node, nodeIndex, start,\n\t\t\t\t\t\tdir = simple !== forward ? \"nextSibling\" : \"previousSibling\",\n\t\t\t\t\t\tparent = elem.parentNode,\n\t\t\t\t\t\tname = ofType && elem.nodeName.toLowerCase(),\n\t\t\t\t\t\tuseCache = !xml && !ofType,\n\t\t\t\t\t\tdiff = false;\n\n\t\t\t\t\tif ( parent ) {\n\n\t\t\t\t\t\t// :(first|last|only)-(child|of-type)\n\t\t\t\t\t\tif ( simple ) {\n\t\t\t\t\t\t\twhile ( dir ) {\n\t\t\t\t\t\t\t\tnode = elem;\n\t\t\t\t\t\t\t\twhile ( (node = node[ dir ]) ) {\n\t\t\t\t\t\t\t\t\tif ( ofType ?\n\t\t\t\t\t\t\t\t\t\tnode.nodeName.toLowerCase() === name :\n\t\t\t\t\t\t\t\t\t\tnode.nodeType === 1 ) {\n\n\t\t\t\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t// Reverse direction for :only-* (if we haven't yet done so)\n\t\t\t\t\t\t\t\tstart = dir = type === \"only\" && !start && \"nextSibling\";\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tstart = [ forward ? parent.firstChild : parent.lastChild ];\n\n\t\t\t\t\t\t// non-xml :nth-child(...) stores cache data on `parent`\n\t\t\t\t\t\tif ( forward && useCache ) {\n\n\t\t\t\t\t\t\t// Seek `elem` from a previously-cached index\n\n\t\t\t\t\t\t\t// ...in a gzip-friendly way\n\t\t\t\t\t\t\tnode = parent;\n\t\t\t\t\t\t\touterCache = node[ expando ] || (node[ expando ] = {});\n\n\t\t\t\t\t\t\t// Support: IE <9 only\n\t\t\t\t\t\t\t// Defend against cloned attroperties (jQuery gh-1709)\n\t\t\t\t\t\t\tuniqueCache = outerCache[ node.uniqueID ] ||\n\t\t\t\t\t\t\t\t(outerCache[ node.uniqueID ] = {});\n\n\t\t\t\t\t\t\tcache = uniqueCache[ type ] || [];\n\t\t\t\t\t\t\tnodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];\n\t\t\t\t\t\t\tdiff = nodeIndex && cache[ 2 ];\n\t\t\t\t\t\t\tnode = nodeIndex && parent.childNodes[ nodeIndex ];\n\n\t\t\t\t\t\t\twhile ( (node = ++nodeIndex && node && node[ dir ] ||\n\n\t\t\t\t\t\t\t\t// Fallback to seeking `elem` from the start\n\t\t\t\t\t\t\t\t(diff = nodeIndex = 0) || start.pop()) ) {\n\n\t\t\t\t\t\t\t\t// When found, cache indexes on `parent` and break\n\t\t\t\t\t\t\t\tif ( node.nodeType === 1 && ++diff && node === elem ) {\n\t\t\t\t\t\t\t\t\tuniqueCache[ type ] = [ dirruns, nodeIndex, diff ];\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// Use previously-cached element index if available\n\t\t\t\t\t\t\tif ( useCache ) {\n\t\t\t\t\t\t\t\t// ...in a gzip-friendly way\n\t\t\t\t\t\t\t\tnode = elem;\n\t\t\t\t\t\t\t\touterCache = node[ expando ] || (node[ expando ] = {});\n\n\t\t\t\t\t\t\t\t// Support: IE <9 only\n\t\t\t\t\t\t\t\t// Defend against cloned attroperties (jQuery gh-1709)\n\t\t\t\t\t\t\t\tuniqueCache = outerCache[ node.uniqueID ] ||\n\t\t\t\t\t\t\t\t\t(outerCache[ node.uniqueID ] = {});\n\n\t\t\t\t\t\t\t\tcache = uniqueCache[ type ] || [];\n\t\t\t\t\t\t\t\tnodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];\n\t\t\t\t\t\t\t\tdiff = nodeIndex;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// xml :nth-child(...)\n\t\t\t\t\t\t\t// or :nth-last-child(...) or :nth(-last)?-of-type(...)\n\t\t\t\t\t\t\tif ( diff === false ) {\n\t\t\t\t\t\t\t\t// Use the same loop as above to seek `elem` from the start\n\t\t\t\t\t\t\t\twhile ( (node = ++nodeIndex && node && node[ dir ] ||\n\t\t\t\t\t\t\t\t\t(diff = nodeIndex = 0) || start.pop()) ) {\n\n\t\t\t\t\t\t\t\t\tif ( ( ofType ?\n\t\t\t\t\t\t\t\t\t\tnode.nodeName.toLowerCase() === name :\n\t\t\t\t\t\t\t\t\t\tnode.nodeType === 1 ) &&\n\t\t\t\t\t\t\t\t\t\t++diff ) {\n\n\t\t\t\t\t\t\t\t\t\t// Cache the index of each encountered element\n\t\t\t\t\t\t\t\t\t\tif ( useCache ) {\n\t\t\t\t\t\t\t\t\t\t\touterCache = node[ expando ] || (node[ expando ] = {});\n\n\t\t\t\t\t\t\t\t\t\t\t// Support: IE <9 only\n\t\t\t\t\t\t\t\t\t\t\t// Defend against cloned attroperties (jQuery gh-1709)\n\t\t\t\t\t\t\t\t\t\t\tuniqueCache = outerCache[ node.uniqueID ] ||\n\t\t\t\t\t\t\t\t\t\t\t\t(outerCache[ node.uniqueID ] = {});\n\n\t\t\t\t\t\t\t\t\t\t\tuniqueCache[ type ] = [ dirruns, diff ];\n\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\tif ( node === elem ) {\n\t\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Incorporate the offset, then check against cycle size\n\t\t\t\t\t\tdiff -= last;\n\t\t\t\t\t\treturn diff === first || ( diff % first === 0 && diff / first >= 0 );\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t},\n\n\t\t\"PSEUDO\": function( pseudo, argument ) {\n\t\t\t// pseudo-class names are case-insensitive\n\t\t\t// http://www.w3.org/TR/selectors/#pseudo-classes\n\t\t\t// Prioritize by case sensitivity in case custom pseudos are added with uppercase letters\n\t\t\t// Remember that setFilters inherits from pseudos\n\t\t\tvar args,\n\t\t\t\tfn = Expr.pseudos[ pseudo ] || Expr.setFilters[ pseudo.toLowerCase() ] ||\n\t\t\t\t\tSizzle.error( \"unsupported pseudo: \" + pseudo );\n\n\t\t\t// The user may use createPseudo to indicate that\n\t\t\t// arguments are needed to create the filter function\n\t\t\t// just as Sizzle does\n\t\t\tif ( fn[ expando ] ) {\n\t\t\t\treturn fn( argument );\n\t\t\t}\n\n\t\t\t// But maintain support for old signatures\n\t\t\tif ( fn.length > 1 ) {\n\t\t\t\targs = [ pseudo, pseudo, \"\", argument ];\n\t\t\t\treturn Expr.setFilters.hasOwnProperty( pseudo.toLowerCase() ) ?\n\t\t\t\t\tmarkFunction(function( seed, matches ) {\n\t\t\t\t\t\tvar idx,\n\t\t\t\t\t\t\tmatched = fn( seed, argument ),\n\t\t\t\t\t\t\ti = matched.length;\n\t\t\t\t\t\twhile ( i-- ) {\n\t\t\t\t\t\t\tidx = indexOf( seed, matched[i] );\n\t\t\t\t\t\t\tseed[ idx ] = !( matches[ idx ] = matched[i] );\n\t\t\t\t\t\t}\n\t\t\t\t\t}) :\n\t\t\t\t\tfunction( elem ) {\n\t\t\t\t\t\treturn fn( elem, 0, args );\n\t\t\t\t\t};\n\t\t\t}\n\n\t\t\treturn fn;\n\t\t}\n\t},\n\n\tpseudos: {\n\t\t// Potentially complex pseudos\n\t\t\"not\": markFunction(function( selector ) {\n\t\t\t// Trim the selector passed to compile\n\t\t\t// to avoid treating leading and trailing\n\t\t\t// spaces as combinators\n\t\t\tvar input = [],\n\t\t\t\tresults = [],\n\t\t\t\tmatcher = compile( selector.replace( rtrim, \"$1\" ) );\n\n\t\t\treturn matcher[ expando ] ?\n\t\t\t\tmarkFunction(function( seed, matches, context, xml ) {\n\t\t\t\t\tvar elem,\n\t\t\t\t\t\tunmatched = matcher( seed, null, xml, [] ),\n\t\t\t\t\t\ti = seed.length;\n\n\t\t\t\t\t// Match elements unmatched by `matcher`\n\t\t\t\t\twhile ( i-- ) {\n\t\t\t\t\t\tif ( (elem = unmatched[i]) ) {\n\t\t\t\t\t\t\tseed[i] = !(matches[i] = elem);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}) :\n\t\t\t\tfunction( elem, context, xml ) {\n\t\t\t\t\tinput[0] = elem;\n\t\t\t\t\tmatcher( input, null, xml, results );\n\t\t\t\t\t// Don't keep the element (issue #299)\n\t\t\t\t\tinput[0] = null;\n\t\t\t\t\treturn !results.pop();\n\t\t\t\t};\n\t\t}),\n\n\t\t\"has\": markFunction(function( selector ) {\n\t\t\treturn function( elem ) {\n\t\t\t\treturn Sizzle( selector, elem ).length > 0;\n\t\t\t};\n\t\t}),\n\n\t\t\"contains\": markFunction(function( text ) {\n\t\t\ttext = text.replace( runescape, funescape );\n\t\t\treturn function( elem ) {\n\t\t\t\treturn ( elem.textContent || elem.innerText || getText( elem ) ).indexOf( text ) > -1;\n\t\t\t};\n\t\t}),\n\n\t\t// \"Whether an element is represented by a :lang() selector\n\t\t// is based solely on the element's language value\n\t\t// being equal to the identifier C,\n\t\t// or beginning with the identifier C immediately followed by \"-\".\n\t\t// The matching of C against the element's language value is performed case-insensitively.\n\t\t// The identifier C does not have to be a valid language name.\"\n\t\t// http://www.w3.org/TR/selectors/#lang-pseudo\n\t\t\"lang\": markFunction( function( lang ) {\n\t\t\t// lang value must be a valid identifier\n\t\t\tif ( !ridentifier.test(lang || \"\") ) {\n\t\t\t\tSizzle.error( \"unsupported lang: \" + lang );\n\t\t\t}\n\t\t\tlang = lang.replace( runescape, funescape ).toLowerCase();\n\t\t\treturn function( elem ) {\n\t\t\t\tvar elemLang;\n\t\t\t\tdo {\n\t\t\t\t\tif ( (elemLang = documentIsHTML ?\n\t\t\t\t\t\telem.lang :\n\t\t\t\t\t\telem.getAttribute(\"xml:lang\") || elem.getAttribute(\"lang\")) ) {\n\n\t\t\t\t\t\telemLang = elemLang.toLowerCase();\n\t\t\t\t\t\treturn elemLang === lang || elemLang.indexOf( lang + \"-\" ) === 0;\n\t\t\t\t\t}\n\t\t\t\t} while ( (elem = elem.parentNode) && elem.nodeType === 1 );\n\t\t\t\treturn false;\n\t\t\t};\n\t\t}),\n\n\t\t// Miscellaneous\n\t\t\"target\": function( elem ) {\n\t\t\tvar hash = window.location && window.location.hash;\n\t\t\treturn hash && hash.slice( 1 ) === elem.id;\n\t\t},\n\n\t\t\"root\": function( elem ) {\n\t\t\treturn elem === docElem;\n\t\t},\n\n\t\t\"focus\": function( elem ) {\n\t\t\treturn elem === document.activeElement && (!document.hasFocus || document.hasFocus()) && !!(elem.type || elem.href || ~elem.tabIndex);\n\t\t},\n\n\t\t// Boolean properties\n\t\t\"enabled\": createDisabledPseudo( false ),\n\t\t\"disabled\": createDisabledPseudo( true ),\n\n\t\t\"checked\": function( elem ) {\n\t\t\t// In CSS3, :checked should return both checked and selected elements\n\t\t\t// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked\n\t\t\tvar nodeName = elem.nodeName.toLowerCase();\n\t\t\treturn (nodeName === \"input\" && !!elem.checked) || (nodeName === \"option\" && !!elem.selected);\n\t\t},\n\n\t\t\"selected\": function( elem ) {\n\t\t\t// Accessing this property makes selected-by-default\n\t\t\t// options in Safari work properly\n\t\t\tif ( elem.parentNode ) {\n\t\t\t\telem.parentNode.selectedIndex;\n\t\t\t}\n\n\t\t\treturn elem.selected === true;\n\t\t},\n\n\t\t// Contents\n\t\t\"empty\": function( elem ) {\n\t\t\t// http://www.w3.org/TR/selectors/#empty-pseudo\n\t\t\t// :empty is negated by element (1) or content nodes (text: 3; cdata: 4; entity ref: 5),\n\t\t\t//   but not by others (comment: 8; processing instruction: 7; etc.)\n\t\t\t// nodeType < 6 works because attributes (2) do not appear as children\n\t\t\tfor ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {\n\t\t\t\tif ( elem.nodeType < 6 ) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn true;\n\t\t},\n\n\t\t\"parent\": function( elem ) {\n\t\t\treturn !Expr.pseudos[\"empty\"]( elem );\n\t\t},\n\n\t\t// Element/input types\n\t\t\"header\": function( elem ) {\n\t\t\treturn rheader.test( elem.nodeName );\n\t\t},\n\n\t\t\"input\": function( elem ) {\n\t\t\treturn rinputs.test( elem.nodeName );\n\t\t},\n\n\t\t\"button\": function( elem ) {\n\t\t\tvar name = elem.nodeName.toLowerCase();\n\t\t\treturn name === \"input\" && elem.type === \"button\" || name === \"button\";\n\t\t},\n\n\t\t\"text\": function( elem ) {\n\t\t\tvar attr;\n\t\t\treturn elem.nodeName.toLowerCase() === \"input\" &&\n\t\t\t\telem.type === \"text\" &&\n\n\t\t\t\t// Support: IE<8\n\t\t\t\t// New HTML5 attribute values (e.g., \"search\") appear with elem.type === \"text\"\n\t\t\t\t( (attr = elem.getAttribute(\"type\")) == null || attr.toLowerCase() === \"text\" );\n\t\t},\n\n\t\t// Position-in-collection\n\t\t\"first\": createPositionalPseudo(function() {\n\t\t\treturn [ 0 ];\n\t\t}),\n\n\t\t\"last\": createPositionalPseudo(function( matchIndexes, length ) {\n\t\t\treturn [ length - 1 ];\n\t\t}),\n\n\t\t\"eq\": createPositionalPseudo(function( matchIndexes, length, argument ) {\n\t\t\treturn [ argument < 0 ? argument + length : argument ];\n\t\t}),\n\n\t\t\"even\": createPositionalPseudo(function( matchIndexes, length ) {\n\t\t\tvar i = 0;\n\t\t\tfor ( ; i < length; i += 2 ) {\n\t\t\t\tmatchIndexes.push( i );\n\t\t\t}\n\t\t\treturn matchIndexes;\n\t\t}),\n\n\t\t\"odd\": createPositionalPseudo(function( matchIndexes, length ) {\n\t\t\tvar i = 1;\n\t\t\tfor ( ; i < length; i += 2 ) {\n\t\t\t\tmatchIndexes.push( i );\n\t\t\t}\n\t\t\treturn matchIndexes;\n\t\t}),\n\n\t\t\"lt\": createPositionalPseudo(function( matchIndexes, length, argument ) {\n\t\t\tvar i = argument < 0 ? argument + length : argument;\n\t\t\tfor ( ; --i >= 0; ) {\n\t\t\t\tmatchIndexes.push( i );\n\t\t\t}\n\t\t\treturn matchIndexes;\n\t\t}),\n\n\t\t\"gt\": createPositionalPseudo(function( matchIndexes, length, argument ) {\n\t\t\tvar i = argument < 0 ? argument + length : argument;\n\t\t\tfor ( ; ++i < length; ) {\n\t\t\t\tmatchIndexes.push( i );\n\t\t\t}\n\t\t\treturn matchIndexes;\n\t\t})\n\t}\n};\n\nExpr.pseudos[\"nth\"] = Expr.pseudos[\"eq\"];\n\n// Add button/input type pseudos\nfor ( i in { radio: true, checkbox: true, file: true, password: true, image: true } ) {\n\tExpr.pseudos[ i ] = createInputPseudo( i );\n}\nfor ( i in { submit: true, reset: true } ) {\n\tExpr.pseudos[ i ] = createButtonPseudo( i );\n}\n\n// Easy API for creating new setFilters\nfunction setFilters() {}\nsetFilters.prototype = Expr.filters = Expr.pseudos;\nExpr.setFilters = new setFilters();\n\ntokenize = Sizzle.tokenize = function( selector, parseOnly ) {\n\tvar matched, match, tokens, type,\n\t\tsoFar, groups, preFilters,\n\t\tcached = tokenCache[ selector + \" \" ];\n\n\tif ( cached ) {\n\t\treturn parseOnly ? 0 : cached.slice( 0 );\n\t}\n\n\tsoFar = selector;\n\tgroups = [];\n\tpreFilters = Expr.preFilter;\n\n\twhile ( soFar ) {\n\n\t\t// Comma and first run\n\t\tif ( !matched || (match = rcomma.exec( soFar )) ) {\n\t\t\tif ( match ) {\n\t\t\t\t// Don't consume trailing commas as valid\n\t\t\t\tsoFar = soFar.slice( match[0].length ) || soFar;\n\t\t\t}\n\t\t\tgroups.push( (tokens = []) );\n\t\t}\n\n\t\tmatched = false;\n\n\t\t// Combinators\n\t\tif ( (match = rcombinators.exec( soFar )) ) {\n\t\t\tmatched = match.shift();\n\t\t\ttokens.push({\n\t\t\t\tvalue: matched,\n\t\t\t\t// Cast descendant combinators to space\n\t\t\t\ttype: match[0].replace( rtrim, \" \" )\n\t\t\t});\n\t\t\tsoFar = soFar.slice( matched.length );\n\t\t}\n\n\t\t// Filters\n\t\tfor ( type in Expr.filter ) {\n\t\t\tif ( (match = matchExpr[ type ].exec( soFar )) && (!preFilters[ type ] ||\n\t\t\t\t(match = preFilters[ type ]( match ))) ) {\n\t\t\t\tmatched = match.shift();\n\t\t\t\ttokens.push({\n\t\t\t\t\tvalue: matched,\n\t\t\t\t\ttype: type,\n\t\t\t\t\tmatches: match\n\t\t\t\t});\n\t\t\t\tsoFar = soFar.slice( matched.length );\n\t\t\t}\n\t\t}\n\n\t\tif ( !matched ) {\n\t\t\tbreak;\n\t\t}\n\t}\n\n\t// Return the length of the invalid excess\n\t// if we're just parsing\n\t// Otherwise, throw an error or return tokens\n\treturn parseOnly ?\n\t\tsoFar.length :\n\t\tsoFar ?\n\t\t\tSizzle.error( selector ) :\n\t\t\t// Cache the tokens\n\t\t\ttokenCache( selector, groups ).slice( 0 );\n};\n\nfunction toSelector( tokens ) {\n\tvar i = 0,\n\t\tlen = tokens.length,\n\t\tselector = \"\";\n\tfor ( ; i < len; i++ ) {\n\t\tselector += tokens[i].value;\n\t}\n\treturn selector;\n}\n\nfunction addCombinator( matcher, combinator, base ) {\n\tvar dir = combinator.dir,\n\t\tskip = combinator.next,\n\t\tkey = skip || dir,\n\t\tcheckNonElements = base && key === \"parentNode\",\n\t\tdoneName = done++;\n\n\treturn combinator.first ?\n\t\t// Check against closest ancestor/preceding element\n\t\tfunction( elem, context, xml ) {\n\t\t\twhile ( (elem = elem[ dir ]) ) {\n\t\t\t\tif ( elem.nodeType === 1 || checkNonElements ) {\n\t\t\t\t\treturn matcher( elem, context, xml );\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn false;\n\t\t} :\n\n\t\t// Check against all ancestor/preceding elements\n\t\tfunction( elem, context, xml ) {\n\t\t\tvar oldCache, uniqueCache, outerCache,\n\t\t\t\tnewCache = [ dirruns, doneName ];\n\n\t\t\t// We can't set arbitrary data on XML nodes, so they don't benefit from combinator caching\n\t\t\tif ( xml ) {\n\t\t\t\twhile ( (elem = elem[ dir ]) ) {\n\t\t\t\t\tif ( elem.nodeType === 1 || checkNonElements ) {\n\t\t\t\t\t\tif ( matcher( elem, context, xml ) ) {\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\twhile ( (elem = elem[ dir ]) ) {\n\t\t\t\t\tif ( elem.nodeType === 1 || checkNonElements ) {\n\t\t\t\t\t\touterCache = elem[ expando ] || (elem[ expando ] = {});\n\n\t\t\t\t\t\t// Support: IE <9 only\n\t\t\t\t\t\t// Defend against cloned attroperties (jQuery gh-1709)\n\t\t\t\t\t\tuniqueCache = outerCache[ elem.uniqueID ] || (outerCache[ elem.uniqueID ] = {});\n\n\t\t\t\t\t\tif ( skip && skip === elem.nodeName.toLowerCase() ) {\n\t\t\t\t\t\t\telem = elem[ dir ] || elem;\n\t\t\t\t\t\t} else if ( (oldCache = uniqueCache[ key ]) &&\n\t\t\t\t\t\t\toldCache[ 0 ] === dirruns && oldCache[ 1 ] === doneName ) {\n\n\t\t\t\t\t\t\t// Assign to newCache so results back-propagate to previous elements\n\t\t\t\t\t\t\treturn (newCache[ 2 ] = oldCache[ 2 ]);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// Reuse newcache so results back-propagate to previous elements\n\t\t\t\t\t\t\tuniqueCache[ key ] = newCache;\n\n\t\t\t\t\t\t\t// A match means we're done; a fail means we have to keep checking\n\t\t\t\t\t\t\tif ( (newCache[ 2 ] = matcher( elem, context, xml )) ) {\n\t\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn false;\n\t\t};\n}\n\nfunction elementMatcher( matchers ) {\n\treturn matchers.length > 1 ?\n\t\tfunction( elem, context, xml ) {\n\t\t\tvar i = matchers.length;\n\t\t\twhile ( i-- ) {\n\t\t\t\tif ( !matchers[i]( elem, context, xml ) ) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn true;\n\t\t} :\n\t\tmatchers[0];\n}\n\nfunction multipleContexts( selector, contexts, results ) {\n\tvar i = 0,\n\t\tlen = contexts.length;\n\tfor ( ; i < len; i++ ) {\n\t\tSizzle( selector, contexts[i], results );\n\t}\n\treturn results;\n}\n\nfunction condense( unmatched, map, filter, context, xml ) {\n\tvar elem,\n\t\tnewUnmatched = [],\n\t\ti = 0,\n\t\tlen = unmatched.length,\n\t\tmapped = map != null;\n\n\tfor ( ; i < len; i++ ) {\n\t\tif ( (elem = unmatched[i]) ) {\n\t\t\tif ( !filter || filter( elem, context, xml ) ) {\n\t\t\t\tnewUnmatched.push( elem );\n\t\t\t\tif ( mapped ) {\n\t\t\t\t\tmap.push( i );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn newUnmatched;\n}\n\nfunction setMatcher( preFilter, selector, matcher, postFilter, postFinder, postSelector ) {\n\tif ( postFilter && !postFilter[ expando ] ) {\n\t\tpostFilter = setMatcher( postFilter );\n\t}\n\tif ( postFinder && !postFinder[ expando ] ) {\n\t\tpostFinder = setMatcher( postFinder, postSelector );\n\t}\n\treturn markFunction(function( seed, results, context, xml ) {\n\t\tvar temp, i, elem,\n\t\t\tpreMap = [],\n\t\t\tpostMap = [],\n\t\t\tpreexisting = results.length,\n\n\t\t\t// Get initial elements from seed or context\n\t\t\telems = seed || multipleContexts( selector || \"*\", context.nodeType ? [ context ] : context, [] ),\n\n\t\t\t// Prefilter to get matcher input, preserving a map for seed-results synchronization\n\t\t\tmatcherIn = preFilter && ( seed || !selector ) ?\n\t\t\t\tcondense( elems, preMap, preFilter, context, xml ) :\n\t\t\t\telems,\n\n\t\t\tmatcherOut = matcher ?\n\t\t\t\t// If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,\n\t\t\t\tpostFinder || ( seed ? preFilter : preexisting || postFilter ) ?\n\n\t\t\t\t\t// ...intermediate processing is necessary\n\t\t\t\t\t[] :\n\n\t\t\t\t\t// ...otherwise use results directly\n\t\t\t\t\tresults :\n\t\t\t\tmatcherIn;\n\n\t\t// Find primary matches\n\t\tif ( matcher ) {\n\t\t\tmatcher( matcherIn, matcherOut, context, xml );\n\t\t}\n\n\t\t// Apply postFilter\n\t\tif ( postFilter ) {\n\t\t\ttemp = condense( matcherOut, postMap );\n\t\t\tpostFilter( temp, [], context, xml );\n\n\t\t\t// Un-match failing elements by moving them back to matcherIn\n\t\t\ti = temp.length;\n\t\t\twhile ( i-- ) {\n\t\t\t\tif ( (elem = temp[i]) ) {\n\t\t\t\t\tmatcherOut[ postMap[i] ] = !(matcherIn[ postMap[i] ] = elem);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif ( seed ) {\n\t\t\tif ( postFinder || preFilter ) {\n\t\t\t\tif ( postFinder ) {\n\t\t\t\t\t// Get the final matcherOut by condensing this intermediate into postFinder contexts\n\t\t\t\t\ttemp = [];\n\t\t\t\t\ti = matcherOut.length;\n\t\t\t\t\twhile ( i-- ) {\n\t\t\t\t\t\tif ( (elem = matcherOut[i]) ) {\n\t\t\t\t\t\t\t// Restore matcherIn since elem is not yet a final match\n\t\t\t\t\t\t\ttemp.push( (matcherIn[i] = elem) );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tpostFinder( null, (matcherOut = []), temp, xml );\n\t\t\t\t}\n\n\t\t\t\t// Move matched elements from seed to results to keep them synchronized\n\t\t\t\ti = matcherOut.length;\n\t\t\t\twhile ( i-- ) {\n\t\t\t\t\tif ( (elem = matcherOut[i]) &&\n\t\t\t\t\t\t(temp = postFinder ? indexOf( seed, elem ) : preMap[i]) > -1 ) {\n\n\t\t\t\t\t\tseed[temp] = !(results[temp] = elem);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t// Add elements to results, through postFinder if defined\n\t\t} else {\n\t\t\tmatcherOut = condense(\n\t\t\t\tmatcherOut === results ?\n\t\t\t\t\tmatcherOut.splice( preexisting, matcherOut.length ) :\n\t\t\t\t\tmatcherOut\n\t\t\t);\n\t\t\tif ( postFinder ) {\n\t\t\t\tpostFinder( null, results, matcherOut, xml );\n\t\t\t} else {\n\t\t\t\tpush.apply( results, matcherOut );\n\t\t\t}\n\t\t}\n\t});\n}\n\nfunction matcherFromTokens( tokens ) {\n\tvar checkContext, matcher, j,\n\t\tlen = tokens.length,\n\t\tleadingRelative = Expr.relative[ tokens[0].type ],\n\t\timplicitRelative = leadingRelative || Expr.relative[\" \"],\n\t\ti = leadingRelative ? 1 : 0,\n\n\t\t// The foundational matcher ensures that elements are reachable from top-level context(s)\n\t\tmatchContext = addCombinator( function( elem ) {\n\t\t\treturn elem === checkContext;\n\t\t}, implicitRelative, true ),\n\t\tmatchAnyContext = addCombinator( function( elem ) {\n\t\t\treturn indexOf( checkContext, elem ) > -1;\n\t\t}, implicitRelative, true ),\n\t\tmatchers = [ function( elem, context, xml ) {\n\t\t\tvar ret = ( !leadingRelative && ( xml || context !== outermostContext ) ) || (\n\t\t\t\t(checkContext = context).nodeType ?\n\t\t\t\t\tmatchContext( elem, context, xml ) :\n\t\t\t\t\tmatchAnyContext( elem, context, xml ) );\n\t\t\t// Avoid hanging onto element (issue #299)\n\t\t\tcheckContext = null;\n\t\t\treturn ret;\n\t\t} ];\n\n\tfor ( ; i < len; i++ ) {\n\t\tif ( (matcher = Expr.relative[ tokens[i].type ]) ) {\n\t\t\tmatchers = [ addCombinator(elementMatcher( matchers ), matcher) ];\n\t\t} else {\n\t\t\tmatcher = Expr.filter[ tokens[i].type ].apply( null, tokens[i].matches );\n\n\t\t\t// Return special upon seeing a positional matcher\n\t\t\tif ( matcher[ expando ] ) {\n\t\t\t\t// Find the next relative operator (if any) for proper handling\n\t\t\t\tj = ++i;\n\t\t\t\tfor ( ; j < len; j++ ) {\n\t\t\t\t\tif ( Expr.relative[ tokens[j].type ] ) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn setMatcher(\n\t\t\t\t\ti > 1 && elementMatcher( matchers ),\n\t\t\t\t\ti > 1 && toSelector(\n\t\t\t\t\t\t// If the preceding token was a descendant combinator, insert an implicit any-element `*`\n\t\t\t\t\t\ttokens.slice( 0, i - 1 ).concat({ value: tokens[ i - 2 ].type === \" \" ? \"*\" : \"\" })\n\t\t\t\t\t).replace( rtrim, \"$1\" ),\n\t\t\t\t\tmatcher,\n\t\t\t\t\ti < j && matcherFromTokens( tokens.slice( i, j ) ),\n\t\t\t\t\tj < len && matcherFromTokens( (tokens = tokens.slice( j )) ),\n\t\t\t\t\tj < len && toSelector( tokens )\n\t\t\t\t);\n\t\t\t}\n\t\t\tmatchers.push( matcher );\n\t\t}\n\t}\n\n\treturn elementMatcher( matchers );\n}\n\nfunction matcherFromGroupMatchers( elementMatchers, setMatchers ) {\n\tvar bySet = setMatchers.length > 0,\n\t\tbyElement = elementMatchers.length > 0,\n\t\tsuperMatcher = function( seed, context, xml, results, outermost ) {\n\t\t\tvar elem, j, matcher,\n\t\t\t\tmatchedCount = 0,\n\t\t\t\ti = \"0\",\n\t\t\t\tunmatched = seed && [],\n\t\t\t\tsetMatched = [],\n\t\t\t\tcontextBackup = outermostContext,\n\t\t\t\t// We must always have either seed elements or outermost context\n\t\t\t\telems = seed || byElement && Expr.find[\"TAG\"]( \"*\", outermost ),\n\t\t\t\t// Use integer dirruns iff this is the outermost matcher\n\t\t\t\tdirrunsUnique = (dirruns += contextBackup == null ? 1 : Math.random() || 0.1),\n\t\t\t\tlen = elems.length;\n\n\t\t\tif ( outermost ) {\n\t\t\t\toutermostContext = context === document || context || outermost;\n\t\t\t}\n\n\t\t\t// Add elements passing elementMatchers directly to results\n\t\t\t// Support: IE<9, Safari\n\t\t\t// Tolerate NodeList properties (IE: \"length\"; Safari: <number>) matching elements by id\n\t\t\tfor ( ; i !== len && (elem = elems[i]) != null; i++ ) {\n\t\t\t\tif ( byElement && elem ) {\n\t\t\t\t\tj = 0;\n\t\t\t\t\tif ( !context && elem.ownerDocument !== document ) {\n\t\t\t\t\t\tsetDocument( elem );\n\t\t\t\t\t\txml = !documentIsHTML;\n\t\t\t\t\t}\n\t\t\t\t\twhile ( (matcher = elementMatchers[j++]) ) {\n\t\t\t\t\t\tif ( matcher( elem, context || document, xml) ) {\n\t\t\t\t\t\t\tresults.push( elem );\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif ( outermost ) {\n\t\t\t\t\t\tdirruns = dirrunsUnique;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Track unmatched elements for set filters\n\t\t\t\tif ( bySet ) {\n\t\t\t\t\t// They will have gone through all possible matchers\n\t\t\t\t\tif ( (elem = !matcher && elem) ) {\n\t\t\t\t\t\tmatchedCount--;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Lengthen the array for every element, matched or not\n\t\t\t\t\tif ( seed ) {\n\t\t\t\t\t\tunmatched.push( elem );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// `i` is now the count of elements visited above, and adding it to `matchedCount`\n\t\t\t// makes the latter nonnegative.\n\t\t\tmatchedCount += i;\n\n\t\t\t// Apply set filters to unmatched elements\n\t\t\t// NOTE: This can be skipped if there are no unmatched elements (i.e., `matchedCount`\n\t\t\t// equals `i`), unless we didn't visit _any_ elements in the above loop because we have\n\t\t\t// no element matchers and no seed.\n\t\t\t// Incrementing an initially-string \"0\" `i` allows `i` to remain a string only in that\n\t\t\t// case, which will result in a \"00\" `matchedCount` that differs from `i` but is also\n\t\t\t// numerically zero.\n\t\t\tif ( bySet && i !== matchedCount ) {\n\t\t\t\tj = 0;\n\t\t\t\twhile ( (matcher = setMatchers[j++]) ) {\n\t\t\t\t\tmatcher( unmatched, setMatched, context, xml );\n\t\t\t\t}\n\n\t\t\t\tif ( seed ) {\n\t\t\t\t\t// Reintegrate element matches to eliminate the need for sorting\n\t\t\t\t\tif ( matchedCount > 0 ) {\n\t\t\t\t\t\twhile ( i-- ) {\n\t\t\t\t\t\t\tif ( !(unmatched[i] || setMatched[i]) ) {\n\t\t\t\t\t\t\t\tsetMatched[i] = pop.call( results );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// Discard index placeholder values to get only actual matches\n\t\t\t\t\tsetMatched = condense( setMatched );\n\t\t\t\t}\n\n\t\t\t\t// Add matches to results\n\t\t\t\tpush.apply( results, setMatched );\n\n\t\t\t\t// Seedless set matches succeeding multiple successful matchers stipulate sorting\n\t\t\t\tif ( outermost && !seed && setMatched.length > 0 &&\n\t\t\t\t\t( matchedCount + setMatchers.length ) > 1 ) {\n\n\t\t\t\t\tSizzle.uniqueSort( results );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Override manipulation of globals by nested matchers\n\t\t\tif ( outermost ) {\n\t\t\t\tdirruns = dirrunsUnique;\n\t\t\t\toutermostContext = contextBackup;\n\t\t\t}\n\n\t\t\treturn unmatched;\n\t\t};\n\n\treturn bySet ?\n\t\tmarkFunction( superMatcher ) :\n\t\tsuperMatcher;\n}\n\ncompile = Sizzle.compile = function( selector, match /* Internal Use Only */ ) {\n\tvar i,\n\t\tsetMatchers = [],\n\t\telementMatchers = [],\n\t\tcached = compilerCache[ selector + \" \" ];\n\n\tif ( !cached ) {\n\t\t// Generate a function of recursive functions that can be used to check each element\n\t\tif ( !match ) {\n\t\t\tmatch = tokenize( selector );\n\t\t}\n\t\ti = match.length;\n\t\twhile ( i-- ) {\n\t\t\tcached = matcherFromTokens( match[i] );\n\t\t\tif ( cached[ expando ] ) {\n\t\t\t\tsetMatchers.push( cached );\n\t\t\t} else {\n\t\t\t\telementMatchers.push( cached );\n\t\t\t}\n\t\t}\n\n\t\t// Cache the compiled function\n\t\tcached = compilerCache( selector, matcherFromGroupMatchers( elementMatchers, setMatchers ) );\n\n\t\t// Save selector and tokenization\n\t\tcached.selector = selector;\n\t}\n\treturn cached;\n};\n\n/**\n * A low-level selection function that works with Sizzle's compiled\n *  selector functions\n * @param {String|Function} selector A selector or a pre-compiled\n *  selector function built with Sizzle.compile\n * @param {Element} context\n * @param {Array} [results]\n * @param {Array} [seed] A set of elements to match against\n */\nselect = Sizzle.select = function( selector, context, results, seed ) {\n\tvar i, tokens, token, type, find,\n\t\tcompiled = typeof selector === \"function\" && selector,\n\t\tmatch = !seed && tokenize( (selector = compiled.selector || selector) );\n\n\tresults = results || [];\n\n\t// Try to minimize operations if there is only one selector in the list and no seed\n\t// (the latter of which guarantees us context)\n\tif ( match.length === 1 ) {\n\n\t\t// Reduce context if the leading compound selector is an ID\n\t\ttokens = match[0] = match[0].slice( 0 );\n\t\tif ( tokens.length > 2 && (token = tokens[0]).type === \"ID\" &&\n\t\t\t\tcontext.nodeType === 9 && documentIsHTML && Expr.relative[ tokens[1].type ] ) {\n\n\t\t\tcontext = ( Expr.find[\"ID\"]( token.matches[0].replace(runescape, funescape), context ) || [] )[0];\n\t\t\tif ( !context ) {\n\t\t\t\treturn results;\n\n\t\t\t// Precompiled matchers will still verify ancestry, so step up a level\n\t\t\t} else if ( compiled ) {\n\t\t\t\tcontext = context.parentNode;\n\t\t\t}\n\n\t\t\tselector = selector.slice( tokens.shift().value.length );\n\t\t}\n\n\t\t// Fetch a seed set for right-to-left matching\n\t\ti = matchExpr[\"needsContext\"].test( selector ) ? 0 : tokens.length;\n\t\twhile ( i-- ) {\n\t\t\ttoken = tokens[i];\n\n\t\t\t// Abort if we hit a combinator\n\t\t\tif ( Expr.relative[ (type = token.type) ] ) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif ( (find = Expr.find[ type ]) ) {\n\t\t\t\t// Search, expanding context for leading sibling combinators\n\t\t\t\tif ( (seed = find(\n\t\t\t\t\ttoken.matches[0].replace( runescape, funescape ),\n\t\t\t\t\trsibling.test( tokens[0].type ) && testContext( context.parentNode ) || context\n\t\t\t\t)) ) {\n\n\t\t\t\t\t// If seed is empty or no tokens remain, we can return early\n\t\t\t\t\ttokens.splice( i, 1 );\n\t\t\t\t\tselector = seed.length && toSelector( tokens );\n\t\t\t\t\tif ( !selector ) {\n\t\t\t\t\t\tpush.apply( results, seed );\n\t\t\t\t\t\treturn results;\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// Compile and execute a filtering function if one is not provided\n\t// Provide `match` to avoid retokenization if we modified the selector above\n\t( compiled || compile( selector, match ) )(\n\t\tseed,\n\t\tcontext,\n\t\t!documentIsHTML,\n\t\tresults,\n\t\t!context || rsibling.test( selector ) && testContext( context.parentNode ) || context\n\t);\n\treturn results;\n};\n\n// One-time assignments\n\n// Sort stability\nsupport.sortStable = expando.split(\"\").sort( sortOrder ).join(\"\") === expando;\n\n// Support: Chrome 14-35+\n// Always assume duplicates if they aren't passed to the comparison function\nsupport.detectDuplicates = !!hasDuplicate;\n\n// Initialize against the default document\nsetDocument();\n\n// Support: Webkit<537.32 - Safari 6.0.3/Chrome 25 (fixed in Chrome 27)\n// Detached nodes confoundingly follow *each other*\nsupport.sortDetached = assert(function( el ) {\n\t// Should return 1, but returns 4 (following)\n\treturn el.compareDocumentPosition( document.createElement(\"fieldset\") ) & 1;\n});\n\n// Support: IE<8\n// Prevent attribute/property \"interpolation\"\n// https://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx\nif ( !assert(function( el ) {\n\tel.innerHTML = \"<a href='#'></a>\";\n\treturn el.firstChild.getAttribute(\"href\") === \"#\" ;\n}) ) {\n\taddHandle( \"type|href|height|width\", function( elem, name, isXML ) {\n\t\tif ( !isXML ) {\n\t\t\treturn elem.getAttribute( name, name.toLowerCase() === \"type\" ? 1 : 2 );\n\t\t}\n\t});\n}\n\n// Support: IE<9\n// Use defaultValue in place of getAttribute(\"value\")\nif ( !support.attributes || !assert(function( el ) {\n\tel.innerHTML = \"<input/>\";\n\tel.firstChild.setAttribute( \"value\", \"\" );\n\treturn el.firstChild.getAttribute( \"value\" ) === \"\";\n}) ) {\n\taddHandle( \"value\", function( elem, name, isXML ) {\n\t\tif ( !isXML && elem.nodeName.toLowerCase() === \"input\" ) {\n\t\t\treturn elem.defaultValue;\n\t\t}\n\t});\n}\n\n// Support: IE<9\n// Use getAttributeNode to fetch booleans when getAttribute lies\nif ( !assert(function( el ) {\n\treturn el.getAttribute(\"disabled\") == null;\n}) ) {\n\taddHandle( booleans, function( elem, name, isXML ) {\n\t\tvar val;\n\t\tif ( !isXML ) {\n\t\t\treturn elem[ name ] === true ? name.toLowerCase() :\n\t\t\t\t\t(val = elem.getAttributeNode( name )) && val.specified ?\n\t\t\t\t\tval.value :\n\t\t\t\tnull;\n\t\t}\n\t});\n}\n\nreturn Sizzle;\n\n})( window );\n\n\n\njQuery.find = Sizzle;\njQuery.expr = Sizzle.selectors;\n\n// Deprecated\njQuery.expr[ \":\" ] = jQuery.expr.pseudos;\njQuery.uniqueSort = jQuery.unique = Sizzle.uniqueSort;\njQuery.text = Sizzle.getText;\njQuery.isXMLDoc = Sizzle.isXML;\njQuery.contains = Sizzle.contains;\njQuery.escapeSelector = Sizzle.escape;\n\n\n\n\nvar dir = function( elem, dir, until ) {\n\tvar matched = [],\n\t\ttruncate = until !== undefined;\n\n\twhile ( ( elem = elem[ dir ] ) && elem.nodeType !== 9 ) {\n\t\tif ( elem.nodeType === 1 ) {\n\t\t\tif ( truncate && jQuery( elem ).is( until ) ) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tmatched.push( elem );\n\t\t}\n\t}\n\treturn matched;\n};\n\n\nvar siblings = function( n, elem ) {\n\tvar matched = [];\n\n\tfor ( ; n; n = n.nextSibling ) {\n\t\tif ( n.nodeType === 1 && n !== elem ) {\n\t\t\tmatched.push( n );\n\t\t}\n\t}\n\n\treturn matched;\n};\n\n\nvar rneedsContext = jQuery.expr.match.needsContext;\n\nvar rsingleTag = ( /^<([a-z][^\\/\\0>:\\x20\\t\\r\\n\\f]*)[\\x20\\t\\r\\n\\f]*\\/?>(?:<\\/\\1>|)$/i );\n\n\n\nvar risSimple = /^.[^:#\\[\\.,]*$/;\n\n// Implement the identical functionality for filter and not\nfunction winnow( elements, qualifier, not ) {\n\tif ( jQuery.isFunction( qualifier ) ) {\n\t\treturn jQuery.grep( elements, function( elem, i ) {\n\t\t\treturn !!qualifier.call( elem, i, elem ) !== not;\n\t\t} );\n\t}\n\n\t// Single element\n\tif ( qualifier.nodeType ) {\n\t\treturn jQuery.grep( elements, function( elem ) {\n\t\t\treturn ( elem === qualifier ) !== not;\n\t\t} );\n\t}\n\n\t// Arraylike of elements (jQuery, arguments, Array)\n\tif ( typeof qualifier !== \"string\" ) {\n\t\treturn jQuery.grep( elements, function( elem ) {\n\t\t\treturn ( indexOf.call( qualifier, elem ) > -1 ) !== not;\n\t\t} );\n\t}\n\n\t// Simple selector that can be filtered directly, removing non-Elements\n\tif ( risSimple.test( qualifier ) ) {\n\t\treturn jQuery.filter( qualifier, elements, not );\n\t}\n\n\t// Complex selector, compare the two sets, removing non-Elements\n\tqualifier = jQuery.filter( qualifier, elements );\n\treturn jQuery.grep( elements, function( elem ) {\n\t\treturn ( indexOf.call( qualifier, elem ) > -1 ) !== not && elem.nodeType === 1;\n\t} );\n}\n\njQuery.filter = function( expr, elems, not ) {\n\tvar elem = elems[ 0 ];\n\n\tif ( not ) {\n\t\texpr = \":not(\" + expr + \")\";\n\t}\n\n\tif ( elems.length === 1 && elem.nodeType === 1 ) {\n\t\treturn jQuery.find.matchesSelector( elem, expr ) ? [ elem ] : [];\n\t}\n\n\treturn jQuery.find.matches( expr, jQuery.grep( elems, function( elem ) {\n\t\treturn elem.nodeType === 1;\n\t} ) );\n};\n\njQuery.fn.extend( {\n\tfind: function( selector ) {\n\t\tvar i, ret,\n\t\t\tlen = this.length,\n\t\t\tself = this;\n\n\t\tif ( typeof selector !== \"string\" ) {\n\t\t\treturn this.pushStack( jQuery( selector ).filter( function() {\n\t\t\t\tfor ( i = 0; i < len; i++ ) {\n\t\t\t\t\tif ( jQuery.contains( self[ i ], this ) ) {\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} ) );\n\t\t}\n\n\t\tret = this.pushStack( [] );\n\n\t\tfor ( i = 0; i < len; i++ ) {\n\t\t\tjQuery.find( selector, self[ i ], ret );\n\t\t}\n\n\t\treturn len > 1 ? jQuery.uniqueSort( ret ) : ret;\n\t},\n\tfilter: function( selector ) {\n\t\treturn this.pushStack( winnow( this, selector || [], false ) );\n\t},\n\tnot: function( selector ) {\n\t\treturn this.pushStack( winnow( this, selector || [], true ) );\n\t},\n\tis: function( selector ) {\n\t\treturn !!winnow(\n\t\t\tthis,\n\n\t\t\t// If this is a positional/relative selector, check membership in the returned set\n\t\t\t// so $(\"p:first\").is(\"p:last\") won't return true for a doc with two \"p\".\n\t\t\ttypeof selector === \"string\" && rneedsContext.test( selector ) ?\n\t\t\t\tjQuery( selector ) :\n\t\t\t\tselector || [],\n\t\t\tfalse\n\t\t).length;\n\t}\n} );\n\n\n// Initialize a jQuery object\n\n\n// A central reference to the root jQuery(document)\nvar rootjQuery,\n\n\t// A simple way to check for HTML strings\n\t// Prioritize #id over <tag> to avoid XSS via location.hash (#9521)\n\t// Strict HTML recognition (#11290: must start with <)\n\t// Shortcut simple #id case for speed\n\trquickExpr = /^(?:\\s*(<[\\w\\W]+>)[^>]*|#([\\w-]+))$/,\n\n\tinit = jQuery.fn.init = function( selector, context, root ) {\n\t\tvar match, elem;\n\n\t\t// HANDLE: $(\"\"), $(null), $(undefined), $(false)\n\t\tif ( !selector ) {\n\t\t\treturn this;\n\t\t}\n\n\t\t// Method init() accepts an alternate rootjQuery\n\t\t// so migrate can support jQuery.sub (gh-2101)\n\t\troot = root || rootjQuery;\n\n\t\t// Handle HTML strings\n\t\tif ( typeof selector === \"string\" ) {\n\t\t\tif ( selector[ 0 ] === \"<\" &&\n\t\t\t\tselector[ selector.length - 1 ] === \">\" &&\n\t\t\t\tselector.length >= 3 ) {\n\n\t\t\t\t// Assume that strings that start and end with <> are HTML and skip the regex check\n\t\t\t\tmatch = [ null, selector, null ];\n\n\t\t\t} else {\n\t\t\t\tmatch = rquickExpr.exec( selector );\n\t\t\t}\n\n\t\t\t// Match html or make sure no context is specified for #id\n\t\t\tif ( match && ( match[ 1 ] || !context ) ) {\n\n\t\t\t\t// HANDLE: $(html) -> $(array)\n\t\t\t\tif ( match[ 1 ] ) {\n\t\t\t\t\tcontext = context instanceof jQuery ? context[ 0 ] : context;\n\n\t\t\t\t\t// Option to run scripts is true for back-compat\n\t\t\t\t\t// Intentionally let the error be thrown if parseHTML is not present\n\t\t\t\t\tjQuery.merge( this, jQuery.parseHTML(\n\t\t\t\t\t\tmatch[ 1 ],\n\t\t\t\t\t\tcontext && context.nodeType ? context.ownerDocument || context : document,\n\t\t\t\t\t\ttrue\n\t\t\t\t\t) );\n\n\t\t\t\t\t// HANDLE: $(html, props)\n\t\t\t\t\tif ( rsingleTag.test( match[ 1 ] ) && jQuery.isPlainObject( context ) ) {\n\t\t\t\t\t\tfor ( match in context ) {\n\n\t\t\t\t\t\t\t// Properties of context are called as methods if possible\n\t\t\t\t\t\t\tif ( jQuery.isFunction( this[ match ] ) ) {\n\t\t\t\t\t\t\t\tthis[ match ]( context[ match ] );\n\n\t\t\t\t\t\t\t// ...and otherwise set as attributes\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tthis.attr( match, context[ match ] );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\treturn this;\n\n\t\t\t\t// HANDLE: $(#id)\n\t\t\t\t} else {\n\t\t\t\t\telem = document.getElementById( match[ 2 ] );\n\n\t\t\t\t\tif ( elem ) {\n\n\t\t\t\t\t\t// Inject the element directly into the jQuery object\n\t\t\t\t\t\tthis[ 0 ] = elem;\n\t\t\t\t\t\tthis.length = 1;\n\t\t\t\t\t}\n\t\t\t\t\treturn this;\n\t\t\t\t}\n\n\t\t\t// HANDLE: $(expr, $(...))\n\t\t\t} else if ( !context || context.jquery ) {\n\t\t\t\treturn ( context || root ).find( selector );\n\n\t\t\t// HANDLE: $(expr, context)\n\t\t\t// (which is just equivalent to: $(context).find(expr)\n\t\t\t} else {\n\t\t\t\treturn this.constructor( context ).find( selector );\n\t\t\t}\n\n\t\t// HANDLE: $(DOMElement)\n\t\t} else if ( selector.nodeType ) {\n\t\t\tthis[ 0 ] = selector;\n\t\t\tthis.length = 1;\n\t\t\treturn this;\n\n\t\t// HANDLE: $(function)\n\t\t// Shortcut for document ready\n\t\t} else if ( jQuery.isFunction( selector ) ) {\n\t\t\treturn root.ready !== undefined ?\n\t\t\t\troot.ready( selector ) :\n\n\t\t\t\t// Execute immediately if ready is not present\n\t\t\t\tselector( jQuery );\n\t\t}\n\n\t\treturn jQuery.makeArray( selector, this );\n\t};\n\n// Give the init function the jQuery prototype for later instantiation\ninit.prototype = jQuery.fn;\n\n// Initialize central reference\nrootjQuery = jQuery( document );\n\n\nvar rparentsprev = /^(?:parents|prev(?:Until|All))/,\n\n\t// Methods guaranteed to produce a unique set when starting from a unique set\n\tguaranteedUnique = {\n\t\tchildren: true,\n\t\tcontents: true,\n\t\tnext: true,\n\t\tprev: true\n\t};\n\njQuery.fn.extend( {\n\thas: function( target ) {\n\t\tvar targets = jQuery( target, this ),\n\t\t\tl = targets.length;\n\n\t\treturn this.filter( function() {\n\t\t\tvar i = 0;\n\t\t\tfor ( ; i < l; i++ ) {\n\t\t\t\tif ( jQuery.contains( this, targets[ i ] ) ) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t} );\n\t},\n\n\tclosest: function( selectors, context ) {\n\t\tvar cur,\n\t\t\ti = 0,\n\t\t\tl = this.length,\n\t\t\tmatched = [],\n\t\t\ttargets = typeof selectors !== \"string\" && jQuery( selectors );\n\n\t\t// Positional selectors never match, since there's no _selection_ context\n\t\tif ( !rneedsContext.test( selectors ) ) {\n\t\t\tfor ( ; i < l; i++ ) {\n\t\t\t\tfor ( cur = this[ i ]; cur && cur !== context; cur = cur.parentNode ) {\n\n\t\t\t\t\t// Always skip document fragments\n\t\t\t\t\tif ( cur.nodeType < 11 && ( targets ?\n\t\t\t\t\t\ttargets.index( cur ) > -1 :\n\n\t\t\t\t\t\t// Don't pass non-elements to Sizzle\n\t\t\t\t\t\tcur.nodeType === 1 &&\n\t\t\t\t\t\t\tjQuery.find.matchesSelector( cur, selectors ) ) ) {\n\n\t\t\t\t\t\tmatched.push( cur );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn this.pushStack( matched.length > 1 ? jQuery.uniqueSort( matched ) : matched );\n\t},\n\n\t// Determine the position of an element within the set\n\tindex: function( elem ) {\n\n\t\t// No argument, return index in parent\n\t\tif ( !elem ) {\n\t\t\treturn ( this[ 0 ] && this[ 0 ].parentNode ) ? this.first().prevAll().length : -1;\n\t\t}\n\n\t\t// Index in selector\n\t\tif ( typeof elem === \"string\" ) {\n\t\t\treturn indexOf.call( jQuery( elem ), this[ 0 ] );\n\t\t}\n\n\t\t// Locate the position of the desired element\n\t\treturn indexOf.call( this,\n\n\t\t\t// If it receives a jQuery object, the first element is used\n\t\t\telem.jquery ? elem[ 0 ] : elem\n\t\t);\n\t},\n\n\tadd: function( selector, context ) {\n\t\treturn this.pushStack(\n\t\t\tjQuery.uniqueSort(\n\t\t\t\tjQuery.merge( this.get(), jQuery( selector, context ) )\n\t\t\t)\n\t\t);\n\t},\n\n\taddBack: function( selector ) {\n\t\treturn this.add( selector == null ?\n\t\t\tthis.prevObject : this.prevObject.filter( selector )\n\t\t);\n\t}\n} );\n\nfunction sibling( cur, dir ) {\n\twhile ( ( cur = cur[ dir ] ) && cur.nodeType !== 1 ) {}\n\treturn cur;\n}\n\njQuery.each( {\n\tparent: function( elem ) {\n\t\tvar parent = elem.parentNode;\n\t\treturn parent && parent.nodeType !== 11 ? parent : null;\n\t},\n\tparents: function( elem ) {\n\t\treturn dir( elem, \"parentNode\" );\n\t},\n\tparentsUntil: function( elem, i, until ) {\n\t\treturn dir( elem, \"parentNode\", until );\n\t},\n\tnext: function( elem ) {\n\t\treturn sibling( elem, \"nextSibling\" );\n\t},\n\tprev: function( elem ) {\n\t\treturn sibling( elem, \"previousSibling\" );\n\t},\n\tnextAll: function( elem ) {\n\t\treturn dir( elem, \"nextSibling\" );\n\t},\n\tprevAll: function( elem ) {\n\t\treturn dir( elem, \"previousSibling\" );\n\t},\n\tnextUntil: function( elem, i, until ) {\n\t\treturn dir( elem, \"nextSibling\", until );\n\t},\n\tprevUntil: function( elem, i, until ) {\n\t\treturn dir( elem, \"previousSibling\", until );\n\t},\n\tsiblings: function( elem ) {\n\t\treturn siblings( ( elem.parentNode || {} ).firstChild, elem );\n\t},\n\tchildren: function( elem ) {\n\t\treturn siblings( elem.firstChild );\n\t},\n\tcontents: function( elem ) {\n\t\treturn elem.contentDocument || jQuery.merge( [], elem.childNodes );\n\t}\n}, function( name, fn ) {\n\tjQuery.fn[ name ] = function( until, selector ) {\n\t\tvar matched = jQuery.map( this, fn, until );\n\n\t\tif ( name.slice( -5 ) !== \"Until\" ) {\n\t\t\tselector = until;\n\t\t}\n\n\t\tif ( selector && typeof selector === \"string\" ) {\n\t\t\tmatched = jQuery.filter( selector, matched );\n\t\t}\n\n\t\tif ( this.length > 1 ) {\n\n\t\t\t// Remove duplicates\n\t\t\tif ( !guaranteedUnique[ name ] ) {\n\t\t\t\tjQuery.uniqueSort( matched );\n\t\t\t}\n\n\t\t\t// Reverse order for parents* and prev-derivatives\n\t\t\tif ( rparentsprev.test( name ) ) {\n\t\t\t\tmatched.reverse();\n\t\t\t}\n\t\t}\n\n\t\treturn this.pushStack( matched );\n\t};\n} );\nvar rnothtmlwhite = ( /[^\\x20\\t\\r\\n\\f]+/g );\n\n\n\n// Convert String-formatted options into Object-formatted ones\nfunction createOptions( options ) {\n\tvar object = {};\n\tjQuery.each( options.match( rnothtmlwhite ) || [], function( _, flag ) {\n\t\tobject[ flag ] = true;\n\t} );\n\treturn object;\n}\n\n/*\n * Create a callback list using the following parameters:\n *\n *\toptions: an optional list of space-separated options that will change how\n *\t\t\tthe callback list behaves or a more traditional option object\n *\n * By default a callback list will act like an event callback list and can be\n * \"fired\" multiple times.\n *\n * Possible options:\n *\n *\tonce:\t\t\twill ensure the callback list can only be fired once (like a Deferred)\n *\n *\tmemory:\t\t\twill keep track of previous values and will call any callback added\n *\t\t\t\t\tafter the list has been fired right away with the latest \"memorized\"\n *\t\t\t\t\tvalues (like a Deferred)\n *\n *\tunique:\t\t\twill ensure a callback can only be added once (no duplicate in the list)\n *\n *\tstopOnFalse:\tinterrupt callings when a callback returns false\n *\n */\njQuery.Callbacks = function( options ) {\n\n\t// Convert options from String-formatted to Object-formatted if needed\n\t// (we check in cache first)\n\toptions = typeof options === \"string\" ?\n\t\tcreateOptions( options ) :\n\t\tjQuery.extend( {}, options );\n\n\tvar // Flag to know if list is currently firing\n\t\tfiring,\n\n\t\t// Last fire value for non-forgettable lists\n\t\tmemory,\n\n\t\t// Flag to know if list was already fired\n\t\tfired,\n\n\t\t// Flag to prevent firing\n\t\tlocked,\n\n\t\t// Actual callback list\n\t\tlist = [],\n\n\t\t// Queue of execution data for repeatable lists\n\t\tqueue = [],\n\n\t\t// Index of currently firing callback (modified by add/remove as needed)\n\t\tfiringIndex = -1,\n\n\t\t// Fire callbacks\n\t\tfire = function() {\n\n\t\t\t// Enforce single-firing\n\t\t\tlocked = options.once;\n\n\t\t\t// Execute callbacks for all pending executions,\n\t\t\t// respecting firingIndex overrides and runtime changes\n\t\t\tfired = firing = true;\n\t\t\tfor ( ; queue.length; firingIndex = -1 ) {\n\t\t\t\tmemory = queue.shift();\n\t\t\t\twhile ( ++firingIndex < list.length ) {\n\n\t\t\t\t\t// Run callback and check for early termination\n\t\t\t\t\tif ( list[ firingIndex ].apply( memory[ 0 ], memory[ 1 ] ) === false &&\n\t\t\t\t\t\toptions.stopOnFalse ) {\n\n\t\t\t\t\t\t// Jump to end and forget the data so .add doesn't re-fire\n\t\t\t\t\t\tfiringIndex = list.length;\n\t\t\t\t\t\tmemory = false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Forget the data if we're done with it\n\t\t\tif ( !options.memory ) {\n\t\t\t\tmemory = false;\n\t\t\t}\n\n\t\t\tfiring = false;\n\n\t\t\t// Clean up if we're done firing for good\n\t\t\tif ( locked ) {\n\n\t\t\t\t// Keep an empty list if we have data for future add calls\n\t\t\t\tif ( memory ) {\n\t\t\t\t\tlist = [];\n\n\t\t\t\t// Otherwise, this object is spent\n\t\t\t\t} else {\n\t\t\t\t\tlist = \"\";\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\t// Actual Callbacks object\n\t\tself = {\n\n\t\t\t// Add a callback or a collection of callbacks to the list\n\t\t\tadd: function() {\n\t\t\t\tif ( list ) {\n\n\t\t\t\t\t// If we have memory from a past run, we should fire after adding\n\t\t\t\t\tif ( memory && !firing ) {\n\t\t\t\t\t\tfiringIndex = list.length - 1;\n\t\t\t\t\t\tqueue.push( memory );\n\t\t\t\t\t}\n\n\t\t\t\t\t( function add( args ) {\n\t\t\t\t\t\tjQuery.each( args, function( _, arg ) {\n\t\t\t\t\t\t\tif ( jQuery.isFunction( arg ) ) {\n\t\t\t\t\t\t\t\tif ( !options.unique || !self.has( arg ) ) {\n\t\t\t\t\t\t\t\t\tlist.push( arg );\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} else if ( arg && arg.length && jQuery.type( arg ) !== \"string\" ) {\n\n\t\t\t\t\t\t\t\t// Inspect recursively\n\t\t\t\t\t\t\t\tadd( arg );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} );\n\t\t\t\t\t} )( arguments );\n\n\t\t\t\t\tif ( memory && !firing ) {\n\t\t\t\t\t\tfire();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn this;\n\t\t\t},\n\n\t\t\t// Remove a callback from the list\n\t\t\tremove: function() {\n\t\t\t\tjQuery.each( arguments, function( _, arg ) {\n\t\t\t\t\tvar index;\n\t\t\t\t\twhile ( ( index = jQuery.inArray( arg, list, index ) ) > -1 ) {\n\t\t\t\t\t\tlist.splice( index, 1 );\n\n\t\t\t\t\t\t// Handle firing indexes\n\t\t\t\t\t\tif ( index <= firingIndex ) {\n\t\t\t\t\t\t\tfiringIndex--;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} );\n\t\t\t\treturn this;\n\t\t\t},\n\n\t\t\t// Check if a given callback is in the list.\n\t\t\t// If no argument is given, return whether or not list has callbacks attached.\n\t\t\thas: function( fn ) {\n\t\t\t\treturn fn ?\n\t\t\t\t\tjQuery.inArray( fn, list ) > -1 :\n\t\t\t\t\tlist.length > 0;\n\t\t\t},\n\n\t\t\t// Remove all callbacks from the list\n\t\t\tempty: function() {\n\t\t\t\tif ( list ) {\n\t\t\t\t\tlist = [];\n\t\t\t\t}\n\t\t\t\treturn this;\n\t\t\t},\n\n\t\t\t// Disable .fire and .add\n\t\t\t// Abort any current/pending executions\n\t\t\t// Clear all callbacks and values\n\t\t\tdisable: function() {\n\t\t\t\tlocked = queue = [];\n\t\t\t\tlist = memory = \"\";\n\t\t\t\treturn this;\n\t\t\t},\n\t\t\tdisabled: function() {\n\t\t\t\treturn !list;\n\t\t\t},\n\n\t\t\t// Disable .fire\n\t\t\t// Also disable .add unless we have memory (since it would have no effect)\n\t\t\t// Abort any pending executions\n\t\t\tlock: function() {\n\t\t\t\tlocked = queue = [];\n\t\t\t\tif ( !memory && !firing ) {\n\t\t\t\t\tlist = memory = \"\";\n\t\t\t\t}\n\t\t\t\treturn this;\n\t\t\t},\n\t\t\tlocked: function() {\n\t\t\t\treturn !!locked;\n\t\t\t},\n\n\t\t\t// Call all callbacks with the given context and arguments\n\t\t\tfireWith: function( context, args ) {\n\t\t\t\tif ( !locked ) {\n\t\t\t\t\targs = args || [];\n\t\t\t\t\targs = [ context, args.slice ? args.slice() : args ];\n\t\t\t\t\tqueue.push( args );\n\t\t\t\t\tif ( !firing ) {\n\t\t\t\t\t\tfire();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn this;\n\t\t\t},\n\n\t\t\t// Call all the callbacks with the given arguments\n\t\t\tfire: function() {\n\t\t\t\tself.fireWith( this, arguments );\n\t\t\t\treturn this;\n\t\t\t},\n\n\t\t\t// To know if the callbacks have already been called at least once\n\t\t\tfired: function() {\n\t\t\t\treturn !!fired;\n\t\t\t}\n\t\t};\n\n\treturn self;\n};\n\n\nfunction Identity( v ) {\n\treturn v;\n}\nfunction Thrower( ex ) {\n\tthrow ex;\n}\n\nfunction adoptValue( value, resolve, reject ) {\n\tvar method;\n\n\ttry {\n\n\t\t// Check for promise aspect first to privilege synchronous behavior\n\t\tif ( value && jQuery.isFunction( ( method = value.promise ) ) ) {\n\t\t\tmethod.call( value ).done( resolve ).fail( reject );\n\n\t\t// Other thenables\n\t\t} else if ( value && jQuery.isFunction( ( method = value.then ) ) ) {\n\t\t\tmethod.call( value, resolve, reject );\n\n\t\t// Other non-thenables\n\t\t} else {\n\n\t\t\t// Support: Android 4.0 only\n\t\t\t// Strict mode functions invoked without .call/.apply get global-object context\n\t\t\tresolve.call( undefined, value );\n\t\t}\n\n\t// For Promises/A+, convert exceptions into rejections\n\t// Since jQuery.when doesn't unwrap thenables, we can skip the extra checks appearing in\n\t// Deferred#then to conditionally suppress rejection.\n\t} catch ( value ) {\n\n\t\t// Support: Android 4.0 only\n\t\t// Strict mode functions invoked without .call/.apply get global-object context\n\t\treject.call( undefined, value );\n\t}\n}\n\njQuery.extend( {\n\n\tDeferred: function( func ) {\n\t\tvar tuples = [\n\n\t\t\t\t// action, add listener, callbacks,\n\t\t\t\t// ... .then handlers, argument index, [final state]\n\t\t\t\t[ \"notify\", \"progress\", jQuery.Callbacks( \"memory\" ),\n\t\t\t\t\tjQuery.Callbacks( \"memory\" ), 2 ],\n\t\t\t\t[ \"resolve\", \"done\", jQuery.Callbacks( \"once memory\" ),\n\t\t\t\t\tjQuery.Callbacks( \"once memory\" ), 0, \"resolved\" ],\n\t\t\t\t[ \"reject\", \"fail\", jQuery.Callbacks( \"once memory\" ),\n\t\t\t\t\tjQuery.Callbacks( \"once memory\" ), 1, \"rejected\" ]\n\t\t\t],\n\t\t\tstate = \"pending\",\n\t\t\tpromise = {\n\t\t\t\tstate: function() {\n\t\t\t\t\treturn state;\n\t\t\t\t},\n\t\t\t\talways: function() {\n\t\t\t\t\tdeferred.done( arguments ).fail( arguments );\n\t\t\t\t\treturn this;\n\t\t\t\t},\n\t\t\t\t\"catch\": function( fn ) {\n\t\t\t\t\treturn promise.then( null, fn );\n\t\t\t\t},\n\n\t\t\t\t// Keep pipe for back-compat\n\t\t\t\tpipe: function( /* fnDone, fnFail, fnProgress */ ) {\n\t\t\t\t\tvar fns = arguments;\n\n\t\t\t\t\treturn jQuery.Deferred( function( newDefer ) {\n\t\t\t\t\t\tjQuery.each( tuples, function( i, tuple ) {\n\n\t\t\t\t\t\t\t// Map tuples (progress, done, fail) to arguments (done, fail, progress)\n\t\t\t\t\t\t\tvar fn = jQuery.isFunction( fns[ tuple[ 4 ] ] ) && fns[ tuple[ 4 ] ];\n\n\t\t\t\t\t\t\t// deferred.progress(function() { bind to newDefer or newDefer.notify })\n\t\t\t\t\t\t\t// deferred.done(function() { bind to newDefer or newDefer.resolve })\n\t\t\t\t\t\t\t// deferred.fail(function() { bind to newDefer or newDefer.reject })\n\t\t\t\t\t\t\tdeferred[ tuple[ 1 ] ]( function() {\n\t\t\t\t\t\t\t\tvar returned = fn && fn.apply( this, arguments );\n\t\t\t\t\t\t\t\tif ( returned && jQuery.isFunction( returned.promise ) ) {\n\t\t\t\t\t\t\t\t\treturned.promise()\n\t\t\t\t\t\t\t\t\t\t.progress( newDefer.notify )\n\t\t\t\t\t\t\t\t\t\t.done( newDefer.resolve )\n\t\t\t\t\t\t\t\t\t\t.fail( newDefer.reject );\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tnewDefer[ tuple[ 0 ] + \"With\" ](\n\t\t\t\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\t\t\t\tfn ? [ returned ] : arguments\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} );\n\t\t\t\t\t\t} );\n\t\t\t\t\t\tfns = null;\n\t\t\t\t\t} ).promise();\n\t\t\t\t},\n\t\t\t\tthen: function( onFulfilled, onRejected, onProgress ) {\n\t\t\t\t\tvar maxDepth = 0;\n\t\t\t\t\tfunction resolve( depth, deferred, handler, special ) {\n\t\t\t\t\t\treturn function() {\n\t\t\t\t\t\t\tvar that = this,\n\t\t\t\t\t\t\t\targs = arguments,\n\t\t\t\t\t\t\t\tmightThrow = function() {\n\t\t\t\t\t\t\t\t\tvar returned, then;\n\n\t\t\t\t\t\t\t\t\t// Support: Promises/A+ section 2.3.3.3.3\n\t\t\t\t\t\t\t\t\t// https://promisesaplus.com/#point-59\n\t\t\t\t\t\t\t\t\t// Ignore double-resolution attempts\n\t\t\t\t\t\t\t\t\tif ( depth < maxDepth ) {\n\t\t\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\treturned = handler.apply( that, args );\n\n\t\t\t\t\t\t\t\t\t// Support: Promises/A+ section 2.3.1\n\t\t\t\t\t\t\t\t\t// https://promisesaplus.com/#point-48\n\t\t\t\t\t\t\t\t\tif ( returned === deferred.promise() ) {\n\t\t\t\t\t\t\t\t\t\tthrow new TypeError( \"Thenable self-resolution\" );\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t// Support: Promises/A+ sections 2.3.3.1, 3.5\n\t\t\t\t\t\t\t\t\t// https://promisesaplus.com/#point-54\n\t\t\t\t\t\t\t\t\t// https://promisesaplus.com/#point-75\n\t\t\t\t\t\t\t\t\t// Retrieve `then` only once\n\t\t\t\t\t\t\t\t\tthen = returned &&\n\n\t\t\t\t\t\t\t\t\t\t// Support: Promises/A+ section 2.3.4\n\t\t\t\t\t\t\t\t\t\t// https://promisesaplus.com/#point-64\n\t\t\t\t\t\t\t\t\t\t// Only check objects and functions for thenability\n\t\t\t\t\t\t\t\t\t\t( typeof returned === \"object\" ||\n\t\t\t\t\t\t\t\t\t\t\ttypeof returned === \"function\" ) &&\n\t\t\t\t\t\t\t\t\t\treturned.then;\n\n\t\t\t\t\t\t\t\t\t// Handle a returned thenable\n\t\t\t\t\t\t\t\t\tif ( jQuery.isFunction( then ) ) {\n\n\t\t\t\t\t\t\t\t\t\t// Special processors (notify) just wait for resolution\n\t\t\t\t\t\t\t\t\t\tif ( special ) {\n\t\t\t\t\t\t\t\t\t\t\tthen.call(\n\t\t\t\t\t\t\t\t\t\t\t\treturned,\n\t\t\t\t\t\t\t\t\t\t\t\tresolve( maxDepth, deferred, Identity, special ),\n\t\t\t\t\t\t\t\t\t\t\t\tresolve( maxDepth, deferred, Thrower, special )\n\t\t\t\t\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t\t\t\t// Normal processors (resolve) also hook into progress\n\t\t\t\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\t\t\t\t// ...and disregard older resolution values\n\t\t\t\t\t\t\t\t\t\t\tmaxDepth++;\n\n\t\t\t\t\t\t\t\t\t\t\tthen.call(\n\t\t\t\t\t\t\t\t\t\t\t\treturned,\n\t\t\t\t\t\t\t\t\t\t\t\tresolve( maxDepth, deferred, Identity, special ),\n\t\t\t\t\t\t\t\t\t\t\t\tresolve( maxDepth, deferred, Thrower, special ),\n\t\t\t\t\t\t\t\t\t\t\t\tresolve( maxDepth, deferred, Identity,\n\t\t\t\t\t\t\t\t\t\t\t\t\tdeferred.notifyWith )\n\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t// Handle all other returned values\n\t\t\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\t\t\t// Only substitute handlers pass on context\n\t\t\t\t\t\t\t\t\t\t// and multiple values (non-spec behavior)\n\t\t\t\t\t\t\t\t\t\tif ( handler !== Identity ) {\n\t\t\t\t\t\t\t\t\t\t\tthat = undefined;\n\t\t\t\t\t\t\t\t\t\t\targs = [ returned ];\n\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\t// Process the value(s)\n\t\t\t\t\t\t\t\t\t\t// Default process is resolve\n\t\t\t\t\t\t\t\t\t\t( special || deferred.resolveWith )( that, args );\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t},\n\n\t\t\t\t\t\t\t\t// Only normal processors (resolve) catch and reject exceptions\n\t\t\t\t\t\t\t\tprocess = special ?\n\t\t\t\t\t\t\t\t\tmightThrow :\n\t\t\t\t\t\t\t\t\tfunction() {\n\t\t\t\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\t\t\t\tmightThrow();\n\t\t\t\t\t\t\t\t\t\t} catch ( e ) {\n\n\t\t\t\t\t\t\t\t\t\t\tif ( jQuery.Deferred.exceptionHook ) {\n\t\t\t\t\t\t\t\t\t\t\t\tjQuery.Deferred.exceptionHook( e,\n\t\t\t\t\t\t\t\t\t\t\t\t\tprocess.stackTrace );\n\t\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\t\t// Support: Promises/A+ section 2.3.3.3.4.1\n\t\t\t\t\t\t\t\t\t\t\t// https://promisesaplus.com/#point-61\n\t\t\t\t\t\t\t\t\t\t\t// Ignore post-resolution exceptions\n\t\t\t\t\t\t\t\t\t\t\tif ( depth + 1 >= maxDepth ) {\n\n\t\t\t\t\t\t\t\t\t\t\t\t// Only substitute handlers pass on context\n\t\t\t\t\t\t\t\t\t\t\t\t// and multiple values (non-spec behavior)\n\t\t\t\t\t\t\t\t\t\t\t\tif ( handler !== Thrower ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tthat = undefined;\n\t\t\t\t\t\t\t\t\t\t\t\t\targs = [ e ];\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\t\t\tdeferred.rejectWith( that, args );\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t};\n\n\t\t\t\t\t\t\t// Support: Promises/A+ section 2.3.3.3.1\n\t\t\t\t\t\t\t// https://promisesaplus.com/#point-57\n\t\t\t\t\t\t\t// Re-resolve promises immediately to dodge false rejection from\n\t\t\t\t\t\t\t// subsequent errors\n\t\t\t\t\t\t\tif ( depth ) {\n\t\t\t\t\t\t\t\tprocess();\n\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\t// Call an optional hook to record the stack, in case of exception\n\t\t\t\t\t\t\t\t// since it's otherwise lost when execution goes async\n\t\t\t\t\t\t\t\tif ( jQuery.Deferred.getStackHook ) {\n\t\t\t\t\t\t\t\t\tprocess.stackTrace = jQuery.Deferred.getStackHook();\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\twindow.setTimeout( process );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n\n\t\t\t\t\treturn jQuery.Deferred( function( newDefer ) {\n\n\t\t\t\t\t\t// progress_handlers.add( ... )\n\t\t\t\t\t\ttuples[ 0 ][ 3 ].add(\n\t\t\t\t\t\t\tresolve(\n\t\t\t\t\t\t\t\t0,\n\t\t\t\t\t\t\t\tnewDefer,\n\t\t\t\t\t\t\t\tjQuery.isFunction( onProgress ) ?\n\t\t\t\t\t\t\t\t\tonProgress :\n\t\t\t\t\t\t\t\t\tIdentity,\n\t\t\t\t\t\t\t\tnewDefer.notifyWith\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\t// fulfilled_handlers.add( ... )\n\t\t\t\t\t\ttuples[ 1 ][ 3 ].add(\n\t\t\t\t\t\t\tresolve(\n\t\t\t\t\t\t\t\t0,\n\t\t\t\t\t\t\t\tnewDefer,\n\t\t\t\t\t\t\t\tjQuery.isFunction( onFulfilled ) ?\n\t\t\t\t\t\t\t\t\tonFulfilled :\n\t\t\t\t\t\t\t\t\tIdentity\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\t// rejected_handlers.add( ... )\n\t\t\t\t\t\ttuples[ 2 ][ 3 ].add(\n\t\t\t\t\t\t\tresolve(\n\t\t\t\t\t\t\t\t0,\n\t\t\t\t\t\t\t\tnewDefer,\n\t\t\t\t\t\t\t\tjQuery.isFunction( onRejected ) ?\n\t\t\t\t\t\t\t\t\tonRejected :\n\t\t\t\t\t\t\t\t\tThrower\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t);\n\t\t\t\t\t} ).promise();\n\t\t\t\t},\n\n\t\t\t\t// Get a promise for this deferred\n\t\t\t\t// If obj is provided, the promise aspect is added to the object\n\t\t\t\tpromise: function( obj ) {\n\t\t\t\t\treturn obj != null ? jQuery.extend( obj, promise ) : promise;\n\t\t\t\t}\n\t\t\t},\n\t\t\tdeferred = {};\n\n\t\t// Add list-specific methods\n\t\tjQuery.each( tuples, function( i, tuple ) {\n\t\t\tvar list = tuple[ 2 ],\n\t\t\t\tstateString = tuple[ 5 ];\n\n\t\t\t// promise.progress = list.add\n\t\t\t// promise.done = list.add\n\t\t\t// promise.fail = list.add\n\t\t\tpromise[ tuple[ 1 ] ] = list.add;\n\n\t\t\t// Handle state\n\t\t\tif ( stateString ) {\n\t\t\t\tlist.add(\n\t\t\t\t\tfunction() {\n\n\t\t\t\t\t\t// state = \"resolved\" (i.e., fulfilled)\n\t\t\t\t\t\t// state = \"rejected\"\n\t\t\t\t\t\tstate = stateString;\n\t\t\t\t\t},\n\n\t\t\t\t\t// rejected_callbacks.disable\n\t\t\t\t\t// fulfilled_callbacks.disable\n\t\t\t\t\ttuples[ 3 - i ][ 2 ].disable,\n\n\t\t\t\t\t// progress_callbacks.lock\n\t\t\t\t\ttuples[ 0 ][ 2 ].lock\n\t\t\t\t);\n\t\t\t}\n\n\t\t\t// progress_handlers.fire\n\t\t\t// fulfilled_handlers.fire\n\t\t\t// rejected_handlers.fire\n\t\t\tlist.add( tuple[ 3 ].fire );\n\n\t\t\t// deferred.notify = function() { deferred.notifyWith(...) }\n\t\t\t// deferred.resolve = function() { deferred.resolveWith(...) }\n\t\t\t// deferred.reject = function() { deferred.rejectWith(...) }\n\t\t\tdeferred[ tuple[ 0 ] ] = function() {\n\t\t\t\tdeferred[ tuple[ 0 ] + \"With\" ]( this === deferred ? undefined : this, arguments );\n\t\t\t\treturn this;\n\t\t\t};\n\n\t\t\t// deferred.notifyWith = list.fireWith\n\t\t\t// deferred.resolveWith = list.fireWith\n\t\t\t// deferred.rejectWith = list.fireWith\n\t\t\tdeferred[ tuple[ 0 ] + \"With\" ] = list.fireWith;\n\t\t} );\n\n\t\t// Make the deferred a promise\n\t\tpromise.promise( deferred );\n\n\t\t// Call given func if any\n\t\tif ( func ) {\n\t\t\tfunc.call( deferred, deferred );\n\t\t}\n\n\t\t// All done!\n\t\treturn deferred;\n\t},\n\n\t// Deferred helper\n\twhen: function( singleValue ) {\n\t\tvar\n\n\t\t\t// count of uncompleted subordinates\n\t\t\tremaining = arguments.length,\n\n\t\t\t// count of unprocessed arguments\n\t\t\ti = remaining,\n\n\t\t\t// subordinate fulfillment data\n\t\t\tresolveContexts = Array( i ),\n\t\t\tresolveValues = slice.call( arguments ),\n\n\t\t\t// the master Deferred\n\t\t\tmaster = jQuery.Deferred(),\n\n\t\t\t// subordinate callback factory\n\t\t\tupdateFunc = function( i ) {\n\t\t\t\treturn function( value ) {\n\t\t\t\t\tresolveContexts[ i ] = this;\n\t\t\t\t\tresolveValues[ i ] = arguments.length > 1 ? slice.call( arguments ) : value;\n\t\t\t\t\tif ( !( --remaining ) ) {\n\t\t\t\t\t\tmaster.resolveWith( resolveContexts, resolveValues );\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t};\n\n\t\t// Single- and empty arguments are adopted like Promise.resolve\n\t\tif ( remaining <= 1 ) {\n\t\t\tadoptValue( singleValue, master.done( updateFunc( i ) ).resolve, master.reject );\n\n\t\t\t// Use .then() to unwrap secondary thenables (cf. gh-3000)\n\t\t\tif ( master.state() === \"pending\" ||\n\t\t\t\tjQuery.isFunction( resolveValues[ i ] && resolveValues[ i ].then ) ) {\n\n\t\t\t\treturn master.then();\n\t\t\t}\n\t\t}\n\n\t\t// Multiple arguments are aggregated like Promise.all array elements\n\t\twhile ( i-- ) {\n\t\t\tadoptValue( resolveValues[ i ], updateFunc( i ), master.reject );\n\t\t}\n\n\t\treturn master.promise();\n\t}\n} );\n\n\n// These usually indicate a programmer mistake during development,\n// warn about them ASAP rather than swallowing them by default.\nvar rerrorNames = /^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;\n\njQuery.Deferred.exceptionHook = function( error, stack ) {\n\n\t// Support: IE 8 - 9 only\n\t// Console exists when dev tools are open, which can happen at any time\n\tif ( window.console && window.console.warn && error && rerrorNames.test( error.name ) ) {\n\t\twindow.console.warn( \"jQuery.Deferred exception: \" + error.message, error.stack, stack );\n\t}\n};\n\n\n\n\njQuery.readyException = function( error ) {\n\twindow.setTimeout( function() {\n\t\tthrow error;\n\t} );\n};\n\n\n\n\n// The deferred used on DOM ready\nvar readyList = jQuery.Deferred();\n\njQuery.fn.ready = function( fn ) {\n\n\treadyList\n\t\t.then( fn )\n\n\t\t// Wrap jQuery.readyException in a function so that the lookup\n\t\t// happens at the time of error handling instead of callback\n\t\t// registration.\n\t\t.catch( function( error ) {\n\t\t\tjQuery.readyException( error );\n\t\t} );\n\n\treturn this;\n};\n\njQuery.extend( {\n\n\t// Is the DOM ready to be used? Set to true once it occurs.\n\tisReady: false,\n\n\t// A counter to track how many items to wait for before\n\t// the ready event fires. See #6781\n\treadyWait: 1,\n\n\t// Hold (or release) the ready event\n\tholdReady: function( hold ) {\n\t\tif ( hold ) {\n\t\t\tjQuery.readyWait++;\n\t\t} else {\n\t\t\tjQuery.ready( true );\n\t\t}\n\t},\n\n\t// Handle when the DOM is ready\n\tready: function( wait ) {\n\n\t\t// Abort if there are pending holds or we're already ready\n\t\tif ( wait === true ? --jQuery.readyWait : jQuery.isReady ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Remember that the DOM is ready\n\t\tjQuery.isReady = true;\n\n\t\t// If a normal DOM Ready event fired, decrement, and wait if need be\n\t\tif ( wait !== true && --jQuery.readyWait > 0 ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// If there are functions bound, to execute\n\t\treadyList.resolveWith( document, [ jQuery ] );\n\t}\n} );\n\njQuery.ready.then = readyList.then;\n\n// The ready event handler and self cleanup method\nfunction completed() {\n\tdocument.removeEventListener( \"DOMContentLoaded\", completed );\n\twindow.removeEventListener( \"load\", completed );\n\tjQuery.ready();\n}\n\n// Catch cases where $(document).ready() is called\n// after the browser event has already occurred.\n// Support: IE <=9 - 10 only\n// Older IE sometimes signals \"interactive\" too soon\nif ( document.readyState === \"complete\" ||\n\t( document.readyState !== \"loading\" && !document.documentElement.doScroll ) ) {\n\n\t// Handle it asynchronously to allow scripts the opportunity to delay ready\n\twindow.setTimeout( jQuery.ready );\n\n} else {\n\n\t// Use the handy event callback\n\tdocument.addEventListener( \"DOMContentLoaded\", completed );\n\n\t// A fallback to window.onload, that will always work\n\twindow.addEventListener( \"load\", completed );\n}\n\n\n\n\n// Multifunctional method to get and set values of a collection\n// The value/s can optionally be executed if it's a function\nvar access = function( elems, fn, key, value, chainable, emptyGet, raw ) {\n\tvar i = 0,\n\t\tlen = elems.length,\n\t\tbulk = key == null;\n\n\t// Sets many values\n\tif ( jQuery.type( key ) === \"object\" ) {\n\t\tchainable = true;\n\t\tfor ( i in key ) {\n\t\t\taccess( elems, fn, i, key[ i ], true, emptyGet, raw );\n\t\t}\n\n\t// Sets one value\n\t} else if ( value !== undefined ) {\n\t\tchainable = true;\n\n\t\tif ( !jQuery.isFunction( value ) ) {\n\t\t\traw = true;\n\t\t}\n\n\t\tif ( bulk ) {\n\n\t\t\t// Bulk operations run against the entire set\n\t\t\tif ( raw ) {\n\t\t\t\tfn.call( elems, value );\n\t\t\t\tfn = null;\n\n\t\t\t// ...except when executing function values\n\t\t\t} else {\n\t\t\t\tbulk = fn;\n\t\t\t\tfn = function( elem, key, value ) {\n\t\t\t\t\treturn bulk.call( jQuery( elem ), value );\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\n\t\tif ( fn ) {\n\t\t\tfor ( ; i < len; i++ ) {\n\t\t\t\tfn(\n\t\t\t\t\telems[ i ], key, raw ?\n\t\t\t\t\tvalue :\n\t\t\t\t\tvalue.call( elems[ i ], i, fn( elems[ i ], key ) )\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t}\n\n\tif ( chainable ) {\n\t\treturn elems;\n\t}\n\n\t// Gets\n\tif ( bulk ) {\n\t\treturn fn.call( elems );\n\t}\n\n\treturn len ? fn( elems[ 0 ], key ) : emptyGet;\n};\nvar acceptData = function( owner ) {\n\n\t// Accepts only:\n\t//  - Node\n\t//    - Node.ELEMENT_NODE\n\t//    - Node.DOCUMENT_NODE\n\t//  - Object\n\t//    - Any\n\treturn owner.nodeType === 1 || owner.nodeType === 9 || !( +owner.nodeType );\n};\n\n\n\n\nfunction Data() {\n\tthis.expando = jQuery.expando + Data.uid++;\n}\n\nData.uid = 1;\n\nData.prototype = {\n\n\tcache: function( owner ) {\n\n\t\t// Check if the owner object already has a cache\n\t\tvar value = owner[ this.expando ];\n\n\t\t// If not, create one\n\t\tif ( !value ) {\n\t\t\tvalue = {};\n\n\t\t\t// We can accept data for non-element nodes in modern browsers,\n\t\t\t// but we should not, see #8335.\n\t\t\t// Always return an empty object.\n\t\t\tif ( acceptData( owner ) ) {\n\n\t\t\t\t// If it is a node unlikely to be stringify-ed or looped over\n\t\t\t\t// use plain assignment\n\t\t\t\tif ( owner.nodeType ) {\n\t\t\t\t\towner[ this.expando ] = value;\n\n\t\t\t\t// Otherwise secure it in a non-enumerable property\n\t\t\t\t// configurable must be true to allow the property to be\n\t\t\t\t// deleted when data is removed\n\t\t\t\t} else {\n\t\t\t\t\tObject.defineProperty( owner, this.expando, {\n\t\t\t\t\t\tvalue: value,\n\t\t\t\t\t\tconfigurable: true\n\t\t\t\t\t} );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn value;\n\t},\n\tset: function( owner, data, value ) {\n\t\tvar prop,\n\t\t\tcache = this.cache( owner );\n\n\t\t// Handle: [ owner, key, value ] args\n\t\t// Always use camelCase key (gh-2257)\n\t\tif ( typeof data === \"string\" ) {\n\t\t\tcache[ jQuery.camelCase( data ) ] = value;\n\n\t\t// Handle: [ owner, { properties } ] args\n\t\t} else {\n\n\t\t\t// Copy the properties one-by-one to the cache object\n\t\t\tfor ( prop in data ) {\n\t\t\t\tcache[ jQuery.camelCase( prop ) ] = data[ prop ];\n\t\t\t}\n\t\t}\n\t\treturn cache;\n\t},\n\tget: function( owner, key ) {\n\t\treturn key === undefined ?\n\t\t\tthis.cache( owner ) :\n\n\t\t\t// Always use camelCase key (gh-2257)\n\t\t\towner[ this.expando ] && owner[ this.expando ][ jQuery.camelCase( key ) ];\n\t},\n\taccess: function( owner, key, value ) {\n\n\t\t// In cases where either:\n\t\t//\n\t\t//   1. No key was specified\n\t\t//   2. A string key was specified, but no value provided\n\t\t//\n\t\t// Take the \"read\" path and allow the get method to determine\n\t\t// which value to return, respectively either:\n\t\t//\n\t\t//   1. The entire cache object\n\t\t//   2. The data stored at the key\n\t\t//\n\t\tif ( key === undefined ||\n\t\t\t\t( ( key && typeof key === \"string\" ) && value === undefined ) ) {\n\n\t\t\treturn this.get( owner, key );\n\t\t}\n\n\t\t// When the key is not a string, or both a key and value\n\t\t// are specified, set or extend (existing objects) with either:\n\t\t//\n\t\t//   1. An object of properties\n\t\t//   2. A key and value\n\t\t//\n\t\tthis.set( owner, key, value );\n\n\t\t// Since the \"set\" path can have two possible entry points\n\t\t// return the expected data based on which path was taken[*]\n\t\treturn value !== undefined ? value : key;\n\t},\n\tremove: function( owner, key ) {\n\t\tvar i,\n\t\t\tcache = owner[ this.expando ];\n\n\t\tif ( cache === undefined ) {\n\t\t\treturn;\n\t\t}\n\n\t\tif ( key !== undefined ) {\n\n\t\t\t// Support array or space separated string of keys\n\t\t\tif ( jQuery.isArray( key ) ) {\n\n\t\t\t\t// If key is an array of keys...\n\t\t\t\t// We always set camelCase keys, so remove that.\n\t\t\t\tkey = key.map( jQuery.camelCase );\n\t\t\t} else {\n\t\t\t\tkey = jQuery.camelCase( key );\n\n\t\t\t\t// If a key with the spaces exists, use it.\n\t\t\t\t// Otherwise, create an array by matching non-whitespace\n\t\t\t\tkey = key in cache ?\n\t\t\t\t\t[ key ] :\n\t\t\t\t\t( key.match( rnothtmlwhite ) || [] );\n\t\t\t}\n\n\t\t\ti = key.length;\n\n\t\t\twhile ( i-- ) {\n\t\t\t\tdelete cache[ key[ i ] ];\n\t\t\t}\n\t\t}\n\n\t\t// Remove the expando if there's no more data\n\t\tif ( key === undefined || jQuery.isEmptyObject( cache ) ) {\n\n\t\t\t// Support: Chrome <=35 - 45\n\t\t\t// Webkit & Blink performance suffers when deleting properties\n\t\t\t// from DOM nodes, so set to undefined instead\n\t\t\t// https://bugs.chromium.org/p/chromium/issues/detail?id=378607 (bug restricted)\n\t\t\tif ( owner.nodeType ) {\n\t\t\t\towner[ this.expando ] = undefined;\n\t\t\t} else {\n\t\t\t\tdelete owner[ this.expando ];\n\t\t\t}\n\t\t}\n\t},\n\thasData: function( owner ) {\n\t\tvar cache = owner[ this.expando ];\n\t\treturn cache !== undefined && !jQuery.isEmptyObject( cache );\n\t}\n};\nvar dataPriv = new Data();\n\nvar dataUser = new Data();\n\n\n\n//\tImplementation Summary\n//\n//\t1. Enforce API surface and semantic compatibility with 1.9.x branch\n//\t2. Improve the module's maintainability by reducing the storage\n//\t\tpaths to a single mechanism.\n//\t3. Use the same single mechanism to support \"private\" and \"user\" data.\n//\t4. _Never_ expose \"private\" data to user code (TODO: Drop _data, _removeData)\n//\t5. Avoid exposing implementation details on user objects (eg. expando properties)\n//\t6. Provide a clear path for implementation upgrade to WeakMap in 2014\n\nvar rbrace = /^(?:\\{[\\w\\W]*\\}|\\[[\\w\\W]*\\])$/,\n\trmultiDash = /[A-Z]/g;\n\nfunction getData( data ) {\n\tif ( data === \"true\" ) {\n\t\treturn true;\n\t}\n\n\tif ( data === \"false\" ) {\n\t\treturn false;\n\t}\n\n\tif ( data === \"null\" ) {\n\t\treturn null;\n\t}\n\n\t// Only convert to a number if it doesn't change the string\n\tif ( data === +data + \"\" ) {\n\t\treturn +data;\n\t}\n\n\tif ( rbrace.test( data ) ) {\n\t\treturn JSON.parse( data );\n\t}\n\n\treturn data;\n}\n\nfunction dataAttr( elem, key, data ) {\n\tvar name;\n\n\t// If nothing was found internally, try to fetch any\n\t// data from the HTML5 data-* attribute\n\tif ( data === undefined && elem.nodeType === 1 ) {\n\t\tname = \"data-\" + key.replace( rmultiDash, \"-$&\" ).toLowerCase();\n\t\tdata = elem.getAttribute( name );\n\n\t\tif ( typeof data === \"string\" ) {\n\t\t\ttry {\n\t\t\t\tdata = getData( data );\n\t\t\t} catch ( e ) {}\n\n\t\t\t// Make sure we set the data so it isn't changed later\n\t\t\tdataUser.set( elem, key, data );\n\t\t} else {\n\t\t\tdata = undefined;\n\t\t}\n\t}\n\treturn data;\n}\n\njQuery.extend( {\n\thasData: function( elem ) {\n\t\treturn dataUser.hasData( elem ) || dataPriv.hasData( elem );\n\t},\n\n\tdata: function( elem, name, data ) {\n\t\treturn dataUser.access( elem, name, data );\n\t},\n\n\tremoveData: function( elem, name ) {\n\t\tdataUser.remove( elem, name );\n\t},\n\n\t// TODO: Now that all calls to _data and _removeData have been replaced\n\t// with direct calls to dataPriv methods, these can be deprecated.\n\t_data: function( elem, name, data ) {\n\t\treturn dataPriv.access( elem, name, data );\n\t},\n\n\t_removeData: function( elem, name ) {\n\t\tdataPriv.remove( elem, name );\n\t}\n} );\n\njQuery.fn.extend( {\n\tdata: function( key, value ) {\n\t\tvar i, name, data,\n\t\t\telem = this[ 0 ],\n\t\t\tattrs = elem && elem.attributes;\n\n\t\t// Gets all values\n\t\tif ( key === undefined ) {\n\t\t\tif ( this.length ) {\n\t\t\t\tdata = dataUser.get( elem );\n\n\t\t\t\tif ( elem.nodeType === 1 && !dataPriv.get( elem, \"hasDataAttrs\" ) ) {\n\t\t\t\t\ti = attrs.length;\n\t\t\t\t\twhile ( i-- ) {\n\n\t\t\t\t\t\t// Support: IE 11 only\n\t\t\t\t\t\t// The attrs elements can be null (#14894)\n\t\t\t\t\t\tif ( attrs[ i ] ) {\n\t\t\t\t\t\t\tname = attrs[ i ].name;\n\t\t\t\t\t\t\tif ( name.indexOf( \"data-\" ) === 0 ) {\n\t\t\t\t\t\t\t\tname = jQuery.camelCase( name.slice( 5 ) );\n\t\t\t\t\t\t\t\tdataAttr( elem, name, data[ name ] );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tdataPriv.set( elem, \"hasDataAttrs\", true );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn data;\n\t\t}\n\n\t\t// Sets multiple values\n\t\tif ( typeof key === \"object\" ) {\n\t\t\treturn this.each( function() {\n\t\t\t\tdataUser.set( this, key );\n\t\t\t} );\n\t\t}\n\n\t\treturn access( this, function( value ) {\n\t\t\tvar data;\n\n\t\t\t// The calling jQuery object (element matches) is not empty\n\t\t\t// (and therefore has an element appears at this[ 0 ]) and the\n\t\t\t// `value` parameter was not undefined. An empty jQuery object\n\t\t\t// will result in `undefined` for elem = this[ 0 ] which will\n\t\t\t// throw an exception if an attempt to read a data cache is made.\n\t\t\tif ( elem && value === undefined ) {\n\n\t\t\t\t// Attempt to get data from the cache\n\t\t\t\t// The key will always be camelCased in Data\n\t\t\t\tdata = dataUser.get( elem, key );\n\t\t\t\tif ( data !== undefined ) {\n\t\t\t\t\treturn data;\n\t\t\t\t}\n\n\t\t\t\t// Attempt to \"discover\" the data in\n\t\t\t\t// HTML5 custom data-* attrs\n\t\t\t\tdata = dataAttr( elem, key );\n\t\t\t\tif ( data !== undefined ) {\n\t\t\t\t\treturn data;\n\t\t\t\t}\n\n\t\t\t\t// We tried really hard, but the data doesn't exist.\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Set the data...\n\t\t\tthis.each( function() {\n\n\t\t\t\t// We always store the camelCased key\n\t\t\t\tdataUser.set( this, key, value );\n\t\t\t} );\n\t\t}, null, value, arguments.length > 1, null, true );\n\t},\n\n\tremoveData: function( key ) {\n\t\treturn this.each( function() {\n\t\t\tdataUser.remove( this, key );\n\t\t} );\n\t}\n} );\n\n\njQuery.extend( {\n\tqueue: function( elem, type, data ) {\n\t\tvar queue;\n\n\t\tif ( elem ) {\n\t\t\ttype = ( type || \"fx\" ) + \"queue\";\n\t\t\tqueue = dataPriv.get( elem, type );\n\n\t\t\t// Speed up dequeue by getting out quickly if this is just a lookup\n\t\t\tif ( data ) {\n\t\t\t\tif ( !queue || jQuery.isArray( data ) ) {\n\t\t\t\t\tqueue = dataPriv.access( elem, type, jQuery.makeArray( data ) );\n\t\t\t\t} else {\n\t\t\t\t\tqueue.push( data );\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn queue || [];\n\t\t}\n\t},\n\n\tdequeue: function( elem, type ) {\n\t\ttype = type || \"fx\";\n\n\t\tvar queue = jQuery.queue( elem, type ),\n\t\t\tstartLength = queue.length,\n\t\t\tfn = queue.shift(),\n\t\t\thooks = jQuery._queueHooks( elem, type ),\n\t\t\tnext = function() {\n\t\t\t\tjQuery.dequeue( elem, type );\n\t\t\t};\n\n\t\t// If the fx queue is dequeued, always remove the progress sentinel\n\t\tif ( fn === \"inprogress\" ) {\n\t\t\tfn = queue.shift();\n\t\t\tstartLength--;\n\t\t}\n\n\t\tif ( fn ) {\n\n\t\t\t// Add a progress sentinel to prevent the fx queue from being\n\t\t\t// automatically dequeued\n\t\t\tif ( type === \"fx\" ) {\n\t\t\t\tqueue.unshift( \"inprogress\" );\n\t\t\t}\n\n\t\t\t// Clear up the last queue stop function\n\t\t\tdelete hooks.stop;\n\t\t\tfn.call( elem, next, hooks );\n\t\t}\n\n\t\tif ( !startLength && hooks ) {\n\t\t\thooks.empty.fire();\n\t\t}\n\t},\n\n\t// Not public - generate a queueHooks object, or return the current one\n\t_queueHooks: function( elem, type ) {\n\t\tvar key = type + \"queueHooks\";\n\t\treturn dataPriv.get( elem, key ) || dataPriv.access( elem, key, {\n\t\t\tempty: jQuery.Callbacks( \"once memory\" ).add( function() {\n\t\t\t\tdataPriv.remove( elem, [ type + \"queue\", key ] );\n\t\t\t} )\n\t\t} );\n\t}\n} );\n\njQuery.fn.extend( {\n\tqueue: function( type, data ) {\n\t\tvar setter = 2;\n\n\t\tif ( typeof type !== \"string\" ) {\n\t\t\tdata = type;\n\t\t\ttype = \"fx\";\n\t\t\tsetter--;\n\t\t}\n\n\t\tif ( arguments.length < setter ) {\n\t\t\treturn jQuery.queue( this[ 0 ], type );\n\t\t}\n\n\t\treturn data === undefined ?\n\t\t\tthis :\n\t\t\tthis.each( function() {\n\t\t\t\tvar queue = jQuery.queue( this, type, data );\n\n\t\t\t\t// Ensure a hooks for this queue\n\t\t\t\tjQuery._queueHooks( this, type );\n\n\t\t\t\tif ( type === \"fx\" && queue[ 0 ] !== \"inprogress\" ) {\n\t\t\t\t\tjQuery.dequeue( this, type );\n\t\t\t\t}\n\t\t\t} );\n\t},\n\tdequeue: function( type ) {\n\t\treturn this.each( function() {\n\t\t\tjQuery.dequeue( this, type );\n\t\t} );\n\t},\n\tclearQueue: function( type ) {\n\t\treturn this.queue( type || \"fx\", [] );\n\t},\n\n\t// Get a promise resolved when queues of a certain type\n\t// are emptied (fx is the type by default)\n\tpromise: function( type, obj ) {\n\t\tvar tmp,\n\t\t\tcount = 1,\n\t\t\tdefer = jQuery.Deferred(),\n\t\t\telements = this,\n\t\t\ti = this.length,\n\t\t\tresolve = function() {\n\t\t\t\tif ( !( --count ) ) {\n\t\t\t\t\tdefer.resolveWith( elements, [ elements ] );\n\t\t\t\t}\n\t\t\t};\n\n\t\tif ( typeof type !== \"string\" ) {\n\t\t\tobj = type;\n\t\t\ttype = undefined;\n\t\t}\n\t\ttype = type || \"fx\";\n\n\t\twhile ( i-- ) {\n\t\t\ttmp = dataPriv.get( elements[ i ], type + \"queueHooks\" );\n\t\t\tif ( tmp && tmp.empty ) {\n\t\t\t\tcount++;\n\t\t\t\ttmp.empty.add( resolve );\n\t\t\t}\n\t\t}\n\t\tresolve();\n\t\treturn defer.promise( obj );\n\t}\n} );\nvar pnum = ( /[+-]?(?:\\d*\\.|)\\d+(?:[eE][+-]?\\d+|)/ ).source;\n\nvar rcssNum = new RegExp( \"^(?:([+-])=|)(\" + pnum + \")([a-z%]*)$\", \"i\" );\n\n\nvar cssExpand = [ \"Top\", \"Right\", \"Bottom\", \"Left\" ];\n\nvar isHiddenWithinTree = function( elem, el ) {\n\n\t\t// isHiddenWithinTree might be called from jQuery#filter function;\n\t\t// in that case, element will be second argument\n\t\telem = el || elem;\n\n\t\t// Inline style trumps all\n\t\treturn elem.style.display === \"none\" ||\n\t\t\telem.style.display === \"\" &&\n\n\t\t\t// Otherwise, check computed style\n\t\t\t// Support: Firefox <=43 - 45\n\t\t\t// Disconnected elements can have computed display: none, so first confirm that elem is\n\t\t\t// in the document.\n\t\t\tjQuery.contains( elem.ownerDocument, elem ) &&\n\n\t\t\tjQuery.css( elem, \"display\" ) === \"none\";\n\t};\n\nvar swap = function( elem, options, callback, args ) {\n\tvar ret, name,\n\t\told = {};\n\n\t// Remember the old values, and insert the new ones\n\tfor ( name in options ) {\n\t\told[ name ] = elem.style[ name ];\n\t\telem.style[ name ] = options[ name ];\n\t}\n\n\tret = callback.apply( elem, args || [] );\n\n\t// Revert the old values\n\tfor ( name in options ) {\n\t\telem.style[ name ] = old[ name ];\n\t}\n\n\treturn ret;\n};\n\n\n\n\nfunction adjustCSS( elem, prop, valueParts, tween ) {\n\tvar adjusted,\n\t\tscale = 1,\n\t\tmaxIterations = 20,\n\t\tcurrentValue = tween ?\n\t\t\tfunction() {\n\t\t\t\treturn tween.cur();\n\t\t\t} :\n\t\t\tfunction() {\n\t\t\t\treturn jQuery.css( elem, prop, \"\" );\n\t\t\t},\n\t\tinitial = currentValue(),\n\t\tunit = valueParts && valueParts[ 3 ] || ( jQuery.cssNumber[ prop ] ? \"\" : \"px\" ),\n\n\t\t// Starting value computation is required for potential unit mismatches\n\t\tinitialInUnit = ( jQuery.cssNumber[ prop ] || unit !== \"px\" && +initial ) &&\n\t\t\trcssNum.exec( jQuery.css( elem, prop ) );\n\n\tif ( initialInUnit && initialInUnit[ 3 ] !== unit ) {\n\n\t\t// Trust units reported by jQuery.css\n\t\tunit = unit || initialInUnit[ 3 ];\n\n\t\t// Make sure we update the tween properties later on\n\t\tvalueParts = valueParts || [];\n\n\t\t// Iteratively approximate from a nonzero starting point\n\t\tinitialInUnit = +initial || 1;\n\n\t\tdo {\n\n\t\t\t// If previous iteration zeroed out, double until we get *something*.\n\t\t\t// Use string for doubling so we don't accidentally see scale as unchanged below\n\t\t\tscale = scale || \".5\";\n\n\t\t\t// Adjust and apply\n\t\t\tinitialInUnit = initialInUnit / scale;\n\t\t\tjQuery.style( elem, prop, initialInUnit + unit );\n\n\t\t// Update scale, tolerating zero or NaN from tween.cur()\n\t\t// Break the loop if scale is unchanged or perfect, or if we've just had enough.\n\t\t} while (\n\t\t\tscale !== ( scale = currentValue() / initial ) && scale !== 1 && --maxIterations\n\t\t);\n\t}\n\n\tif ( valueParts ) {\n\t\tinitialInUnit = +initialInUnit || +initial || 0;\n\n\t\t// Apply relative offset (+=/-=) if specified\n\t\tadjusted = valueParts[ 1 ] ?\n\t\t\tinitialInUnit + ( valueParts[ 1 ] + 1 ) * valueParts[ 2 ] :\n\t\t\t+valueParts[ 2 ];\n\t\tif ( tween ) {\n\t\t\ttween.unit = unit;\n\t\t\ttween.start = initialInUnit;\n\t\t\ttween.end = adjusted;\n\t\t}\n\t}\n\treturn adjusted;\n}\n\n\nvar defaultDisplayMap = {};\n\nfunction getDefaultDisplay( elem ) {\n\tvar temp,\n\t\tdoc = elem.ownerDocument,\n\t\tnodeName = elem.nodeName,\n\t\tdisplay = defaultDisplayMap[ nodeName ];\n\n\tif ( display ) {\n\t\treturn display;\n\t}\n\n\ttemp = doc.body.appendChild( doc.createElement( nodeName ) );\n\tdisplay = jQuery.css( temp, \"display\" );\n\n\ttemp.parentNode.removeChild( temp );\n\n\tif ( display === \"none\" ) {\n\t\tdisplay = \"block\";\n\t}\n\tdefaultDisplayMap[ nodeName ] = display;\n\n\treturn display;\n}\n\nfunction showHide( elements, show ) {\n\tvar display, elem,\n\t\tvalues = [],\n\t\tindex = 0,\n\t\tlength = elements.length;\n\n\t// Determine new display value for elements that need to change\n\tfor ( ; index < length; index++ ) {\n\t\telem = elements[ index ];\n\t\tif ( !elem.style ) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tdisplay = elem.style.display;\n\t\tif ( show ) {\n\n\t\t\t// Since we force visibility upon cascade-hidden elements, an immediate (and slow)\n\t\t\t// check is required in this first loop unless we have a nonempty display value (either\n\t\t\t// inline or about-to-be-restored)\n\t\t\tif ( display === \"none\" ) {\n\t\t\t\tvalues[ index ] = dataPriv.get( elem, \"display\" ) || null;\n\t\t\t\tif ( !values[ index ] ) {\n\t\t\t\t\telem.style.display = \"\";\n\t\t\t\t}\n\t\t\t}\n\t\t\tif ( elem.style.display === \"\" && isHiddenWithinTree( elem ) ) {\n\t\t\t\tvalues[ index ] = getDefaultDisplay( elem );\n\t\t\t}\n\t\t} else {\n\t\t\tif ( display !== \"none\" ) {\n\t\t\t\tvalues[ index ] = \"none\";\n\n\t\t\t\t// Remember what we're overwriting\n\t\t\t\tdataPriv.set( elem, \"display\", display );\n\t\t\t}\n\t\t}\n\t}\n\n\t// Set the display of the elements in a second loop to avoid constant reflow\n\tfor ( index = 0; index < length; index++ ) {\n\t\tif ( values[ index ] != null ) {\n\t\t\telements[ index ].style.display = values[ index ];\n\t\t}\n\t}\n\n\treturn elements;\n}\n\njQuery.fn.extend( {\n\tshow: function() {\n\t\treturn showHide( this, true );\n\t},\n\thide: function() {\n\t\treturn showHide( this );\n\t},\n\ttoggle: function( state ) {\n\t\tif ( typeof state === \"boolean\" ) {\n\t\t\treturn state ? this.show() : this.hide();\n\t\t}\n\n\t\treturn this.each( function() {\n\t\t\tif ( isHiddenWithinTree( this ) ) {\n\t\t\t\tjQuery( this ).show();\n\t\t\t} else {\n\t\t\t\tjQuery( this ).hide();\n\t\t\t}\n\t\t} );\n\t}\n} );\nvar rcheckableType = ( /^(?:checkbox|radio)$/i );\n\nvar rtagName = ( /<([a-z][^\\/\\0>\\x20\\t\\r\\n\\f]+)/i );\n\nvar rscriptType = ( /^$|\\/(?:java|ecma)script/i );\n\n\n\n// We have to close these tags to support XHTML (#13200)\nvar wrapMap = {\n\n\t// Support: IE <=9 only\n\toption: [ 1, \"<select multiple='multiple'>\", \"</select>\" ],\n\n\t// XHTML parsers do not magically insert elements in the\n\t// same way that tag soup parsers do. So we cannot shorten\n\t// this by omitting <tbody> or other required elements.\n\tthead: [ 1, \"<table>\", \"</table>\" ],\n\tcol: [ 2, \"<table><colgroup>\", \"</colgroup></table>\" ],\n\ttr: [ 2, \"<table><tbody>\", \"</tbody></table>\" ],\n\ttd: [ 3, \"<table><tbody><tr>\", \"</tr></tbody></table>\" ],\n\n\t_default: [ 0, \"\", \"\" ]\n};\n\n// Support: IE <=9 only\nwrapMap.optgroup = wrapMap.option;\n\nwrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;\nwrapMap.th = wrapMap.td;\n\n\nfunction getAll( context, tag ) {\n\n\t// Support: IE <=9 - 11 only\n\t// Use typeof to avoid zero-argument method invocation on host objects (#15151)\n\tvar ret;\n\n\tif ( typeof context.getElementsByTagName !== \"undefined\" ) {\n\t\tret = context.getElementsByTagName( tag || \"*\" );\n\n\t} else if ( typeof context.querySelectorAll !== \"undefined\" ) {\n\t\tret = context.querySelectorAll( tag || \"*\" );\n\n\t} else {\n\t\tret = [];\n\t}\n\n\tif ( tag === undefined || tag && jQuery.nodeName( context, tag ) ) {\n\t\treturn jQuery.merge( [ context ], ret );\n\t}\n\n\treturn ret;\n}\n\n\n// Mark scripts as having already been evaluated\nfunction setGlobalEval( elems, refElements ) {\n\tvar i = 0,\n\t\tl = elems.length;\n\n\tfor ( ; i < l; i++ ) {\n\t\tdataPriv.set(\n\t\t\telems[ i ],\n\t\t\t\"globalEval\",\n\t\t\t!refElements || dataPriv.get( refElements[ i ], \"globalEval\" )\n\t\t);\n\t}\n}\n\n\nvar rhtml = /<|&#?\\w+;/;\n\nfunction buildFragment( elems, context, scripts, selection, ignored ) {\n\tvar elem, tmp, tag, wrap, contains, j,\n\t\tfragment = context.createDocumentFragment(),\n\t\tnodes = [],\n\t\ti = 0,\n\t\tl = elems.length;\n\n\tfor ( ; i < l; i++ ) {\n\t\telem = elems[ i ];\n\n\t\tif ( elem || elem === 0 ) {\n\n\t\t\t// Add nodes directly\n\t\t\tif ( jQuery.type( elem ) === \"object\" ) {\n\n\t\t\t\t// Support: Android <=4.0 only, PhantomJS 1 only\n\t\t\t\t// push.apply(_, arraylike) throws on ancient WebKit\n\t\t\t\tjQuery.merge( nodes, elem.nodeType ? [ elem ] : elem );\n\n\t\t\t// Convert non-html into a text node\n\t\t\t} else if ( !rhtml.test( elem ) ) {\n\t\t\t\tnodes.push( context.createTextNode( elem ) );\n\n\t\t\t// Convert html into DOM nodes\n\t\t\t} else {\n\t\t\t\ttmp = tmp || fragment.appendChild( context.createElement( \"div\" ) );\n\n\t\t\t\t// Deserialize a standard representation\n\t\t\t\ttag = ( rtagName.exec( elem ) || [ \"\", \"\" ] )[ 1 ].toLowerCase();\n\t\t\t\twrap = wrapMap[ tag ] || wrapMap._default;\n\t\t\t\ttmp.innerHTML = wrap[ 1 ] + jQuery.htmlPrefilter( elem ) + wrap[ 2 ];\n\n\t\t\t\t// Descend through wrappers to the right content\n\t\t\t\tj = wrap[ 0 ];\n\t\t\t\twhile ( j-- ) {\n\t\t\t\t\ttmp = tmp.lastChild;\n\t\t\t\t}\n\n\t\t\t\t// Support: Android <=4.0 only, PhantomJS 1 only\n\t\t\t\t// push.apply(_, arraylike) throws on ancient WebKit\n\t\t\t\tjQuery.merge( nodes, tmp.childNodes );\n\n\t\t\t\t// Remember the top-level container\n\t\t\t\ttmp = fragment.firstChild;\n\n\t\t\t\t// Ensure the created nodes are orphaned (#12392)\n\t\t\t\ttmp.textContent = \"\";\n\t\t\t}\n\t\t}\n\t}\n\n\t// Remove wrapper from fragment\n\tfragment.textContent = \"\";\n\n\ti = 0;\n\twhile ( ( elem = nodes[ i++ ] ) ) {\n\n\t\t// Skip elements already in the context collection (trac-4087)\n\t\tif ( selection && jQuery.inArray( elem, selection ) > -1 ) {\n\t\t\tif ( ignored ) {\n\t\t\t\tignored.push( elem );\n\t\t\t}\n\t\t\tcontinue;\n\t\t}\n\n\t\tcontains = jQuery.contains( elem.ownerDocument, elem );\n\n\t\t// Append to fragment\n\t\ttmp = getAll( fragment.appendChild( elem ), \"script\" );\n\n\t\t// Preserve script evaluation history\n\t\tif ( contains ) {\n\t\t\tsetGlobalEval( tmp );\n\t\t}\n\n\t\t// Capture executables\n\t\tif ( scripts ) {\n\t\t\tj = 0;\n\t\t\twhile ( ( elem = tmp[ j++ ] ) ) {\n\t\t\t\tif ( rscriptType.test( elem.type || \"\" ) ) {\n\t\t\t\t\tscripts.push( elem );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn fragment;\n}\n\n\n( function() {\n\tvar fragment = document.createDocumentFragment(),\n\t\tdiv = fragment.appendChild( document.createElement( \"div\" ) ),\n\t\tinput = document.createElement( \"input\" );\n\n\t// Support: Android 4.0 - 4.3 only\n\t// Check state lost if the name is set (#11217)\n\t// Support: Windows Web Apps (WWA)\n\t// `name` and `type` must use .setAttribute for WWA (#14901)\n\tinput.setAttribute( \"type\", \"radio\" );\n\tinput.setAttribute( \"checked\", \"checked\" );\n\tinput.setAttribute( \"name\", \"t\" );\n\n\tdiv.appendChild( input );\n\n\t// Support: Android <=4.1 only\n\t// Older WebKit doesn't clone checked state correctly in fragments\n\tsupport.checkClone = div.cloneNode( true ).cloneNode( true ).lastChild.checked;\n\n\t// Support: IE <=11 only\n\t// Make sure textarea (and checkbox) defaultValue is properly cloned\n\tdiv.innerHTML = \"<textarea>x</textarea>\";\n\tsupport.noCloneChecked = !!div.cloneNode( true ).lastChild.defaultValue;\n} )();\nvar documentElement = document.documentElement;\n\n\n\nvar\n\trkeyEvent = /^key/,\n\trmouseEvent = /^(?:mouse|pointer|contextmenu|drag|drop)|click/,\n\trtypenamespace = /^([^.]*)(?:\\.(.+)|)/;\n\nfunction returnTrue() {\n\treturn true;\n}\n\nfunction returnFalse() {\n\treturn false;\n}\n\n// Support: IE <=9 only\n// See #13393 for more info\nfunction safeActiveElement() {\n\ttry {\n\t\treturn document.activeElement;\n\t} catch ( err ) { }\n}\n\nfunction on( elem, types, selector, data, fn, one ) {\n\tvar origFn, type;\n\n\t// Types can be a map of types/handlers\n\tif ( typeof types === \"object\" ) {\n\n\t\t// ( types-Object, selector, data )\n\t\tif ( typeof selector !== \"string\" ) {\n\n\t\t\t// ( types-Object, data )\n\t\t\tdata = data || selector;\n\t\t\tselector = undefined;\n\t\t}\n\t\tfor ( type in types ) {\n\t\t\ton( elem, type, selector, data, types[ type ], one );\n\t\t}\n\t\treturn elem;\n\t}\n\n\tif ( data == null && fn == null ) {\n\n\t\t// ( types, fn )\n\t\tfn = selector;\n\t\tdata = selector = undefined;\n\t} else if ( fn == null ) {\n\t\tif ( typeof selector === \"string\" ) {\n\n\t\t\t// ( types, selector, fn )\n\t\t\tfn = data;\n\t\t\tdata = undefined;\n\t\t} else {\n\n\t\t\t// ( types, data, fn )\n\t\t\tfn = data;\n\t\t\tdata = selector;\n\t\t\tselector = undefined;\n\t\t}\n\t}\n\tif ( fn === false ) {\n\t\tfn = returnFalse;\n\t} else if ( !fn ) {\n\t\treturn elem;\n\t}\n\n\tif ( one === 1 ) {\n\t\torigFn = fn;\n\t\tfn = function( event ) {\n\n\t\t\t// Can use an empty set, since event contains the info\n\t\t\tjQuery().off( event );\n\t\t\treturn origFn.apply( this, arguments );\n\t\t};\n\n\t\t// Use same guid so caller can remove using origFn\n\t\tfn.guid = origFn.guid || ( origFn.guid = jQuery.guid++ );\n\t}\n\treturn elem.each( function() {\n\t\tjQuery.event.add( this, types, fn, data, selector );\n\t} );\n}\n\n/*\n * Helper functions for managing events -- not part of the public interface.\n * Props to Dean Edwards' addEvent library for many of the ideas.\n */\njQuery.event = {\n\n\tglobal: {},\n\n\tadd: function( elem, types, handler, data, selector ) {\n\n\t\tvar handleObjIn, eventHandle, tmp,\n\t\t\tevents, t, handleObj,\n\t\t\tspecial, handlers, type, namespaces, origType,\n\t\t\telemData = dataPriv.get( elem );\n\n\t\t// Don't attach events to noData or text/comment nodes (but allow plain objects)\n\t\tif ( !elemData ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Caller can pass in an object of custom data in lieu of the handler\n\t\tif ( handler.handler ) {\n\t\t\thandleObjIn = handler;\n\t\t\thandler = handleObjIn.handler;\n\t\t\tselector = handleObjIn.selector;\n\t\t}\n\n\t\t// Ensure that invalid selectors throw exceptions at attach time\n\t\t// Evaluate against documentElement in case elem is a non-element node (e.g., document)\n\t\tif ( selector ) {\n\t\t\tjQuery.find.matchesSelector( documentElement, selector );\n\t\t}\n\n\t\t// Make sure that the handler has a unique ID, used to find/remove it later\n\t\tif ( !handler.guid ) {\n\t\t\thandler.guid = jQuery.guid++;\n\t\t}\n\n\t\t// Init the element's event structure and main handler, if this is the first\n\t\tif ( !( events = elemData.events ) ) {\n\t\t\tevents = elemData.events = {};\n\t\t}\n\t\tif ( !( eventHandle = elemData.handle ) ) {\n\t\t\teventHandle = elemData.handle = function( e ) {\n\n\t\t\t\t// Discard the second event of a jQuery.event.trigger() and\n\t\t\t\t// when an event is called after a page has unloaded\n\t\t\t\treturn typeof jQuery !== \"undefined\" && jQuery.event.triggered !== e.type ?\n\t\t\t\t\tjQuery.event.dispatch.apply( elem, arguments ) : undefined;\n\t\t\t};\n\t\t}\n\n\t\t// Handle multiple events separated by a space\n\t\ttypes = ( types || \"\" ).match( rnothtmlwhite ) || [ \"\" ];\n\t\tt = types.length;\n\t\twhile ( t-- ) {\n\t\t\ttmp = rtypenamespace.exec( types[ t ] ) || [];\n\t\t\ttype = origType = tmp[ 1 ];\n\t\t\tnamespaces = ( tmp[ 2 ] || \"\" ).split( \".\" ).sort();\n\n\t\t\t// There *must* be a type, no attaching namespace-only handlers\n\t\t\tif ( !type ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// If event changes its type, use the special event handlers for the changed type\n\t\t\tspecial = jQuery.event.special[ type ] || {};\n\n\t\t\t// If selector defined, determine special event api type, otherwise given type\n\t\t\ttype = ( selector ? special.delegateType : special.bindType ) || type;\n\n\t\t\t// Update special based on newly reset type\n\t\t\tspecial = jQuery.event.special[ type ] || {};\n\n\t\t\t// handleObj is passed to all event handlers\n\t\t\thandleObj = jQuery.extend( {\n\t\t\t\ttype: type,\n\t\t\t\torigType: origType,\n\t\t\t\tdata: data,\n\t\t\t\thandler: handler,\n\t\t\t\tguid: handler.guid,\n\t\t\t\tselector: selector,\n\t\t\t\tneedsContext: selector && jQuery.expr.match.needsContext.test( selector ),\n\t\t\t\tnamespace: namespaces.join( \".\" )\n\t\t\t}, handleObjIn );\n\n\t\t\t// Init the event handler queue if we're the first\n\t\t\tif ( !( handlers = events[ type ] ) ) {\n\t\t\t\thandlers = events[ type ] = [];\n\t\t\t\thandlers.delegateCount = 0;\n\n\t\t\t\t// Only use addEventListener if the special events handler returns false\n\t\t\t\tif ( !special.setup ||\n\t\t\t\t\tspecial.setup.call( elem, data, namespaces, eventHandle ) === false ) {\n\n\t\t\t\t\tif ( elem.addEventListener ) {\n\t\t\t\t\t\telem.addEventListener( type, eventHandle );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif ( special.add ) {\n\t\t\t\tspecial.add.call( elem, handleObj );\n\n\t\t\t\tif ( !handleObj.handler.guid ) {\n\t\t\t\t\thandleObj.handler.guid = handler.guid;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Add to the element's handler list, delegates in front\n\t\t\tif ( selector ) {\n\t\t\t\thandlers.splice( handlers.delegateCount++, 0, handleObj );\n\t\t\t} else {\n\t\t\t\thandlers.push( handleObj );\n\t\t\t}\n\n\t\t\t// Keep track of which events have ever been used, for event optimization\n\t\t\tjQuery.event.global[ type ] = true;\n\t\t}\n\n\t},\n\n\t// Detach an event or set of events from an element\n\tremove: function( elem, types, handler, selector, mappedTypes ) {\n\n\t\tvar j, origCount, tmp,\n\t\t\tevents, t, handleObj,\n\t\t\tspecial, handlers, type, namespaces, origType,\n\t\t\telemData = dataPriv.hasData( elem ) && dataPriv.get( elem );\n\n\t\tif ( !elemData || !( events = elemData.events ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Once for each type.namespace in types; type may be omitted\n\t\ttypes = ( types || \"\" ).match( rnothtmlwhite ) || [ \"\" ];\n\t\tt = types.length;\n\t\twhile ( t-- ) {\n\t\t\ttmp = rtypenamespace.exec( types[ t ] ) || [];\n\t\t\ttype = origType = tmp[ 1 ];\n\t\t\tnamespaces = ( tmp[ 2 ] || \"\" ).split( \".\" ).sort();\n\n\t\t\t// Unbind all events (on this namespace, if provided) for the element\n\t\t\tif ( !type ) {\n\t\t\t\tfor ( type in events ) {\n\t\t\t\t\tjQuery.event.remove( elem, type + types[ t ], handler, selector, true );\n\t\t\t\t}\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tspecial = jQuery.event.special[ type ] || {};\n\t\t\ttype = ( selector ? special.delegateType : special.bindType ) || type;\n\t\t\thandlers = events[ type ] || [];\n\t\t\ttmp = tmp[ 2 ] &&\n\t\t\t\tnew RegExp( \"(^|\\\\.)\" + namespaces.join( \"\\\\.(?:.*\\\\.|)\" ) + \"(\\\\.|$)\" );\n\n\t\t\t// Remove matching events\n\t\t\torigCount = j = handlers.length;\n\t\t\twhile ( j-- ) {\n\t\t\t\thandleObj = handlers[ j ];\n\n\t\t\t\tif ( ( mappedTypes || origType === handleObj.origType ) &&\n\t\t\t\t\t( !handler || handler.guid === handleObj.guid ) &&\n\t\t\t\t\t( !tmp || tmp.test( handleObj.namespace ) ) &&\n\t\t\t\t\t( !selector || selector === handleObj.selector ||\n\t\t\t\t\t\tselector === \"**\" && handleObj.selector ) ) {\n\t\t\t\t\thandlers.splice( j, 1 );\n\n\t\t\t\t\tif ( handleObj.selector ) {\n\t\t\t\t\t\thandlers.delegateCount--;\n\t\t\t\t\t}\n\t\t\t\t\tif ( special.remove ) {\n\t\t\t\t\t\tspecial.remove.call( elem, handleObj );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Remove generic event handler if we removed something and no more handlers exist\n\t\t\t// (avoids potential for endless recursion during removal of special event handlers)\n\t\t\tif ( origCount && !handlers.length ) {\n\t\t\t\tif ( !special.teardown ||\n\t\t\t\t\tspecial.teardown.call( elem, namespaces, elemData.handle ) === false ) {\n\n\t\t\t\t\tjQuery.removeEvent( elem, type, elemData.handle );\n\t\t\t\t}\n\n\t\t\t\tdelete events[ type ];\n\t\t\t}\n\t\t}\n\n\t\t// Remove data and the expando if it's no longer used\n\t\tif ( jQuery.isEmptyObject( events ) ) {\n\t\t\tdataPriv.remove( elem, \"handle events\" );\n\t\t}\n\t},\n\n\tdispatch: function( nativeEvent ) {\n\n\t\t// Make a writable jQuery.Event from the native event object\n\t\tvar event = jQuery.event.fix( nativeEvent );\n\n\t\tvar i, j, ret, matched, handleObj, handlerQueue,\n\t\t\targs = new Array( arguments.length ),\n\t\t\thandlers = ( dataPriv.get( this, \"events\" ) || {} )[ event.type ] || [],\n\t\t\tspecial = jQuery.event.special[ event.type ] || {};\n\n\t\t// Use the fix-ed jQuery.Event rather than the (read-only) native event\n\t\targs[ 0 ] = event;\n\n\t\tfor ( i = 1; i < arguments.length; i++ ) {\n\t\t\targs[ i ] = arguments[ i ];\n\t\t}\n\n\t\tevent.delegateTarget = this;\n\n\t\t// Call the preDispatch hook for the mapped type, and let it bail if desired\n\t\tif ( special.preDispatch && special.preDispatch.call( this, event ) === false ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Determine handlers\n\t\thandlerQueue = jQuery.event.handlers.call( this, event, handlers );\n\n\t\t// Run delegates first; they may want to stop propagation beneath us\n\t\ti = 0;\n\t\twhile ( ( matched = handlerQueue[ i++ ] ) && !event.isPropagationStopped() ) {\n\t\t\tevent.currentTarget = matched.elem;\n\n\t\t\tj = 0;\n\t\t\twhile ( ( handleObj = matched.handlers[ j++ ] ) &&\n\t\t\t\t!event.isImmediatePropagationStopped() ) {\n\n\t\t\t\t// Triggered event must either 1) have no namespace, or 2) have namespace(s)\n\t\t\t\t// a subset or equal to those in the bound event (both can have no namespace).\n\t\t\t\tif ( !event.rnamespace || event.rnamespace.test( handleObj.namespace ) ) {\n\n\t\t\t\t\tevent.handleObj = handleObj;\n\t\t\t\t\tevent.data = handleObj.data;\n\n\t\t\t\t\tret = ( ( jQuery.event.special[ handleObj.origType ] || {} ).handle ||\n\t\t\t\t\t\thandleObj.handler ).apply( matched.elem, args );\n\n\t\t\t\t\tif ( ret !== undefined ) {\n\t\t\t\t\t\tif ( ( event.result = ret ) === false ) {\n\t\t\t\t\t\t\tevent.preventDefault();\n\t\t\t\t\t\t\tevent.stopPropagation();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Call the postDispatch hook for the mapped type\n\t\tif ( special.postDispatch ) {\n\t\t\tspecial.postDispatch.call( this, event );\n\t\t}\n\n\t\treturn event.result;\n\t},\n\n\thandlers: function( event, handlers ) {\n\t\tvar i, handleObj, sel, matchedHandlers, matchedSelectors,\n\t\t\thandlerQueue = [],\n\t\t\tdelegateCount = handlers.delegateCount,\n\t\t\tcur = event.target;\n\n\t\t// Find delegate handlers\n\t\tif ( delegateCount &&\n\n\t\t\t// Support: IE <=9\n\t\t\t// Black-hole SVG <use> instance trees (trac-13180)\n\t\t\tcur.nodeType &&\n\n\t\t\t// Support: Firefox <=42\n\t\t\t// Suppress spec-violating clicks indicating a non-primary pointer button (trac-3861)\n\t\t\t// https://www.w3.org/TR/DOM-Level-3-Events/#event-type-click\n\t\t\t// Support: IE 11 only\n\t\t\t// ...but not arrow key \"clicks\" of radio inputs, which can have `button` -1 (gh-2343)\n\t\t\t!( event.type === \"click\" && event.button >= 1 ) ) {\n\n\t\t\tfor ( ; cur !== this; cur = cur.parentNode || this ) {\n\n\t\t\t\t// Don't check non-elements (#13208)\n\t\t\t\t// Don't process clicks on disabled elements (#6911, #8165, #11382, #11764)\n\t\t\t\tif ( cur.nodeType === 1 && !( event.type === \"click\" && cur.disabled === true ) ) {\n\t\t\t\t\tmatchedHandlers = [];\n\t\t\t\t\tmatchedSelectors = {};\n\t\t\t\t\tfor ( i = 0; i < delegateCount; i++ ) {\n\t\t\t\t\t\thandleObj = handlers[ i ];\n\n\t\t\t\t\t\t// Don't conflict with Object.prototype properties (#13203)\n\t\t\t\t\t\tsel = handleObj.selector + \" \";\n\n\t\t\t\t\t\tif ( matchedSelectors[ sel ] === undefined ) {\n\t\t\t\t\t\t\tmatchedSelectors[ sel ] = handleObj.needsContext ?\n\t\t\t\t\t\t\t\tjQuery( sel, this ).index( cur ) > -1 :\n\t\t\t\t\t\t\t\tjQuery.find( sel, this, null, [ cur ] ).length;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif ( matchedSelectors[ sel ] ) {\n\t\t\t\t\t\t\tmatchedHandlers.push( handleObj );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif ( matchedHandlers.length ) {\n\t\t\t\t\t\thandlerQueue.push( { elem: cur, handlers: matchedHandlers } );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Add the remaining (directly-bound) handlers\n\t\tcur = this;\n\t\tif ( delegateCount < handlers.length ) {\n\t\t\thandlerQueue.push( { elem: cur, handlers: handlers.slice( delegateCount ) } );\n\t\t}\n\n\t\treturn handlerQueue;\n\t},\n\n\taddProp: function( name, hook ) {\n\t\tObject.defineProperty( jQuery.Event.prototype, name, {\n\t\t\tenumerable: true,\n\t\t\tconfigurable: true,\n\n\t\t\tget: jQuery.isFunction( hook ) ?\n\t\t\t\tfunction() {\n\t\t\t\t\tif ( this.originalEvent ) {\n\t\t\t\t\t\t\treturn hook( this.originalEvent );\n\t\t\t\t\t}\n\t\t\t\t} :\n\t\t\t\tfunction() {\n\t\t\t\t\tif ( this.originalEvent ) {\n\t\t\t\t\t\t\treturn this.originalEvent[ name ];\n\t\t\t\t\t}\n\t\t\t\t},\n\n\t\t\tset: function( value ) {\n\t\t\t\tObject.defineProperty( this, name, {\n\t\t\t\t\tenumerable: true,\n\t\t\t\t\tconfigurable: true,\n\t\t\t\t\twritable: true,\n\t\t\t\t\tvalue: value\n\t\t\t\t} );\n\t\t\t}\n\t\t} );\n\t},\n\n\tfix: function( originalEvent ) {\n\t\treturn originalEvent[ jQuery.expando ] ?\n\t\t\toriginalEvent :\n\t\t\tnew jQuery.Event( originalEvent );\n\t},\n\n\tspecial: {\n\t\tload: {\n\n\t\t\t// Prevent triggered image.load events from bubbling to window.load\n\t\t\tnoBubble: true\n\t\t},\n\t\tfocus: {\n\n\t\t\t// Fire native event if possible so blur/focus sequence is correct\n\t\t\ttrigger: function() {\n\t\t\t\tif ( this !== safeActiveElement() && this.focus ) {\n\t\t\t\t\tthis.focus();\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t},\n\t\t\tdelegateType: \"focusin\"\n\t\t},\n\t\tblur: {\n\t\t\ttrigger: function() {\n\t\t\t\tif ( this === safeActiveElement() && this.blur ) {\n\t\t\t\t\tthis.blur();\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t},\n\t\t\tdelegateType: \"focusout\"\n\t\t},\n\t\tclick: {\n\n\t\t\t// For checkbox, fire native event so checked state will be right\n\t\t\ttrigger: function() {\n\t\t\t\tif ( this.type === \"checkbox\" && this.click && jQuery.nodeName( this, \"input\" ) ) {\n\t\t\t\t\tthis.click();\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t},\n\n\t\t\t// For cross-browser consistency, don't fire native .click() on links\n\t\t\t_default: function( event ) {\n\t\t\t\treturn jQuery.nodeName( event.target, \"a\" );\n\t\t\t}\n\t\t},\n\n\t\tbeforeunload: {\n\t\t\tpostDispatch: function( event ) {\n\n\t\t\t\t// Support: Firefox 20+\n\t\t\t\t// Firefox doesn't alert if the returnValue field is not set.\n\t\t\t\tif ( event.result !== undefined && event.originalEvent ) {\n\t\t\t\t\tevent.originalEvent.returnValue = event.result;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n};\n\njQuery.removeEvent = function( elem, type, handle ) {\n\n\t// This \"if\" is needed for plain objects\n\tif ( elem.removeEventListener ) {\n\t\telem.removeEventListener( type, handle );\n\t}\n};\n\njQuery.Event = function( src, props ) {\n\n\t// Allow instantiation without the 'new' keyword\n\tif ( !( this instanceof jQuery.Event ) ) {\n\t\treturn new jQuery.Event( src, props );\n\t}\n\n\t// Event object\n\tif ( src && src.type ) {\n\t\tthis.originalEvent = src;\n\t\tthis.type = src.type;\n\n\t\t// Events bubbling up the document may have been marked as prevented\n\t\t// by a handler lower down the tree; reflect the correct value.\n\t\tthis.isDefaultPrevented = src.defaultPrevented ||\n\t\t\t\tsrc.defaultPrevented === undefined &&\n\n\t\t\t\t// Support: Android <=2.3 only\n\t\t\t\tsrc.returnValue === false ?\n\t\t\treturnTrue :\n\t\t\treturnFalse;\n\n\t\t// Create target properties\n\t\t// Support: Safari <=6 - 7 only\n\t\t// Target should not be a text node (#504, #13143)\n\t\tthis.target = ( src.target && src.target.nodeType === 3 ) ?\n\t\t\tsrc.target.parentNode :\n\t\t\tsrc.target;\n\n\t\tthis.currentTarget = src.currentTarget;\n\t\tthis.relatedTarget = src.relatedTarget;\n\n\t// Event type\n\t} else {\n\t\tthis.type = src;\n\t}\n\n\t// Put explicitly provided properties onto the event object\n\tif ( props ) {\n\t\tjQuery.extend( this, props );\n\t}\n\n\t// Create a timestamp if incoming event doesn't have one\n\tthis.timeStamp = src && src.timeStamp || jQuery.now();\n\n\t// Mark it as fixed\n\tthis[ jQuery.expando ] = true;\n};\n\n// jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding\n// https://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html\njQuery.Event.prototype = {\n\tconstructor: jQuery.Event,\n\tisDefaultPrevented: returnFalse,\n\tisPropagationStopped: returnFalse,\n\tisImmediatePropagationStopped: returnFalse,\n\tisSimulated: false,\n\n\tpreventDefault: function() {\n\t\tvar e = this.originalEvent;\n\n\t\tthis.isDefaultPrevented = returnTrue;\n\n\t\tif ( e && !this.isSimulated ) {\n\t\t\te.preventDefault();\n\t\t}\n\t},\n\tstopPropagation: function() {\n\t\tvar e = this.originalEvent;\n\n\t\tthis.isPropagationStopped = returnTrue;\n\n\t\tif ( e && !this.isSimulated ) {\n\t\t\te.stopPropagation();\n\t\t}\n\t},\n\tstopImmediatePropagation: function() {\n\t\tvar e = this.originalEvent;\n\n\t\tthis.isImmediatePropagationStopped = returnTrue;\n\n\t\tif ( e && !this.isSimulated ) {\n\t\t\te.stopImmediatePropagation();\n\t\t}\n\n\t\tthis.stopPropagation();\n\t}\n};\n\n// Includes all common event props including KeyEvent and MouseEvent specific props\njQuery.each( {\n\taltKey: true,\n\tbubbles: true,\n\tcancelable: true,\n\tchangedTouches: true,\n\tctrlKey: true,\n\tdetail: true,\n\teventPhase: true,\n\tmetaKey: true,\n\tpageX: true,\n\tpageY: true,\n\tshiftKey: true,\n\tview: true,\n\t\"char\": true,\n\tcharCode: true,\n\tkey: true,\n\tkeyCode: true,\n\tbutton: true,\n\tbuttons: true,\n\tclientX: true,\n\tclientY: true,\n\toffsetX: true,\n\toffsetY: true,\n\tpointerId: true,\n\tpointerType: true,\n\tscreenX: true,\n\tscreenY: true,\n\ttargetTouches: true,\n\ttoElement: true,\n\ttouches: true,\n\n\twhich: function( event ) {\n\t\tvar button = event.button;\n\n\t\t// Add which for key events\n\t\tif ( event.which == null && rkeyEvent.test( event.type ) ) {\n\t\t\treturn event.charCode != null ? event.charCode : event.keyCode;\n\t\t}\n\n\t\t// Add which for click: 1 === left; 2 === middle; 3 === right\n\t\tif ( !event.which && button !== undefined && rmouseEvent.test( event.type ) ) {\n\t\t\tif ( button & 1 ) {\n\t\t\t\treturn 1;\n\t\t\t}\n\n\t\t\tif ( button & 2 ) {\n\t\t\t\treturn 3;\n\t\t\t}\n\n\t\t\tif ( button & 4 ) {\n\t\t\t\treturn 2;\n\t\t\t}\n\n\t\t\treturn 0;\n\t\t}\n\n\t\treturn event.which;\n\t}\n}, jQuery.event.addProp );\n\n// Create mouseenter/leave events using mouseover/out and event-time checks\n// so that event delegation works in jQuery.\n// Do the same for pointerenter/pointerleave and pointerover/pointerout\n//\n// Support: Safari 7 only\n// Safari sends mouseenter too often; see:\n// https://bugs.chromium.org/p/chromium/issues/detail?id=470258\n// for the description of the bug (it existed in older Chrome versions as well).\njQuery.each( {\n\tmouseenter: \"mouseover\",\n\tmouseleave: \"mouseout\",\n\tpointerenter: \"pointerover\",\n\tpointerleave: \"pointerout\"\n}, function( orig, fix ) {\n\tjQuery.event.special[ orig ] = {\n\t\tdelegateType: fix,\n\t\tbindType: fix,\n\n\t\thandle: function( event ) {\n\t\t\tvar ret,\n\t\t\t\ttarget = this,\n\t\t\t\trelated = event.relatedTarget,\n\t\t\t\thandleObj = event.handleObj;\n\n\t\t\t// For mouseenter/leave call the handler if related is outside the target.\n\t\t\t// NB: No relatedTarget if the mouse left/entered the browser window\n\t\t\tif ( !related || ( related !== target && !jQuery.contains( target, related ) ) ) {\n\t\t\t\tevent.type = handleObj.origType;\n\t\t\t\tret = handleObj.handler.apply( this, arguments );\n\t\t\t\tevent.type = fix;\n\t\t\t}\n\t\t\treturn ret;\n\t\t}\n\t};\n} );\n\njQuery.fn.extend( {\n\n\ton: function( types, selector, data, fn ) {\n\t\treturn on( this, types, selector, data, fn );\n\t},\n\tone: function( types, selector, data, fn ) {\n\t\treturn on( this, types, selector, data, fn, 1 );\n\t},\n\toff: function( types, selector, fn ) {\n\t\tvar handleObj, type;\n\t\tif ( types && types.preventDefault && types.handleObj ) {\n\n\t\t\t// ( event )  dispatched jQuery.Event\n\t\t\thandleObj = types.handleObj;\n\t\t\tjQuery( types.delegateTarget ).off(\n\t\t\t\thandleObj.namespace ?\n\t\t\t\t\thandleObj.origType + \".\" + handleObj.namespace :\n\t\t\t\t\thandleObj.origType,\n\t\t\t\thandleObj.selector,\n\t\t\t\thandleObj.handler\n\t\t\t);\n\t\t\treturn this;\n\t\t}\n\t\tif ( typeof types === \"object\" ) {\n\n\t\t\t// ( types-object [, selector] )\n\t\t\tfor ( type in types ) {\n\t\t\t\tthis.off( type, selector, types[ type ] );\n\t\t\t}\n\t\t\treturn this;\n\t\t}\n\t\tif ( selector === false || typeof selector === \"function\" ) {\n\n\t\t\t// ( types [, fn] )\n\t\t\tfn = selector;\n\t\t\tselector = undefined;\n\t\t}\n\t\tif ( fn === false ) {\n\t\t\tfn = returnFalse;\n\t\t}\n\t\treturn this.each( function() {\n\t\t\tjQuery.event.remove( this, types, fn, selector );\n\t\t} );\n\t}\n} );\n\n\nvar\n\n\t/* eslint-disable max-len */\n\n\t// See https://github.com/eslint/eslint/issues/3229\n\trxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\\/\\0>\\x20\\t\\r\\n\\f]*)[^>]*)\\/>/gi,\n\n\t/* eslint-enable */\n\n\t// Support: IE <=10 - 11, Edge 12 - 13\n\t// In IE/Edge using regex groups here causes severe slowdowns.\n\t// See https://connect.microsoft.com/IE/feedback/details/1736512/\n\trnoInnerhtml = /<script|<style|<link/i,\n\n\t// checked=\"checked\" or checked\n\trchecked = /checked\\s*(?:[^=]|=\\s*.checked.)/i,\n\trscriptTypeMasked = /^true\\/(.*)/,\n\trcleanScript = /^\\s*<!(?:\\[CDATA\\[|--)|(?:\\]\\]|--)>\\s*$/g;\n\nfunction manipulationTarget( elem, content ) {\n\tif ( jQuery.nodeName( elem, \"table\" ) &&\n\t\tjQuery.nodeName( content.nodeType !== 11 ? content : content.firstChild, \"tr\" ) ) {\n\n\t\treturn elem.getElementsByTagName( \"tbody\" )[ 0 ] || elem;\n\t}\n\n\treturn elem;\n}\n\n// Replace/restore the type attribute of script elements for safe DOM manipulation\nfunction disableScript( elem ) {\n\telem.type = ( elem.getAttribute( \"type\" ) !== null ) + \"/\" + elem.type;\n\treturn elem;\n}\nfunction restoreScript( elem ) {\n\tvar match = rscriptTypeMasked.exec( elem.type );\n\n\tif ( match ) {\n\t\telem.type = match[ 1 ];\n\t} else {\n\t\telem.removeAttribute( \"type\" );\n\t}\n\n\treturn elem;\n}\n\nfunction cloneCopyEvent( src, dest ) {\n\tvar i, l, type, pdataOld, pdataCur, udataOld, udataCur, events;\n\n\tif ( dest.nodeType !== 1 ) {\n\t\treturn;\n\t}\n\n\t// 1. Copy private data: events, handlers, etc.\n\tif ( dataPriv.hasData( src ) ) {\n\t\tpdataOld = dataPriv.access( src );\n\t\tpdataCur = dataPriv.set( dest, pdataOld );\n\t\tevents = pdataOld.events;\n\n\t\tif ( events ) {\n\t\t\tdelete pdataCur.handle;\n\t\t\tpdataCur.events = {};\n\n\t\t\tfor ( type in events ) {\n\t\t\t\tfor ( i = 0, l = events[ type ].length; i < l; i++ ) {\n\t\t\t\t\tjQuery.event.add( dest, type, events[ type ][ i ] );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// 2. Copy user data\n\tif ( dataUser.hasData( src ) ) {\n\t\tudataOld = dataUser.access( src );\n\t\tudataCur = jQuery.extend( {}, udataOld );\n\n\t\tdataUser.set( dest, udataCur );\n\t}\n}\n\n// Fix IE bugs, see support tests\nfunction fixInput( src, dest ) {\n\tvar nodeName = dest.nodeName.toLowerCase();\n\n\t// Fails to persist the checked state of a cloned checkbox or radio button.\n\tif ( nodeName === \"input\" && rcheckableType.test( src.type ) ) {\n\t\tdest.checked = src.checked;\n\n\t// Fails to return the selected option to the default selected state when cloning options\n\t} else if ( nodeName === \"input\" || nodeName === \"textarea\" ) {\n\t\tdest.defaultValue = src.defaultValue;\n\t}\n}\n\nfunction domManip( collection, args, callback, ignored ) {\n\n\t// Flatten any nested arrays\n\targs = concat.apply( [], args );\n\n\tvar fragment, first, scripts, hasScripts, node, doc,\n\t\ti = 0,\n\t\tl = collection.length,\n\t\tiNoClone = l - 1,\n\t\tvalue = args[ 0 ],\n\t\tisFunction = jQuery.isFunction( value );\n\n\t// We can't cloneNode fragments that contain checked, in WebKit\n\tif ( isFunction ||\n\t\t\t( l > 1 && typeof value === \"string\" &&\n\t\t\t\t!support.checkClone && rchecked.test( value ) ) ) {\n\t\treturn collection.each( function( index ) {\n\t\t\tvar self = collection.eq( index );\n\t\t\tif ( isFunction ) {\n\t\t\t\targs[ 0 ] = value.call( this, index, self.html() );\n\t\t\t}\n\t\t\tdomManip( self, args, callback, ignored );\n\t\t} );\n\t}\n\n\tif ( l ) {\n\t\tfragment = buildFragment( args, collection[ 0 ].ownerDocument, false, collection, ignored );\n\t\tfirst = fragment.firstChild;\n\n\t\tif ( fragment.childNodes.length === 1 ) {\n\t\t\tfragment = first;\n\t\t}\n\n\t\t// Require either new content or an interest in ignored elements to invoke the callback\n\t\tif ( first || ignored ) {\n\t\t\tscripts = jQuery.map( getAll( fragment, \"script\" ), disableScript );\n\t\t\thasScripts = scripts.length;\n\n\t\t\t// Use the original fragment for the last item\n\t\t\t// instead of the first because it can end up\n\t\t\t// being emptied incorrectly in certain situations (#8070).\n\t\t\tfor ( ; i < l; i++ ) {\n\t\t\t\tnode = fragment;\n\n\t\t\t\tif ( i !== iNoClone ) {\n\t\t\t\t\tnode = jQuery.clone( node, true, true );\n\n\t\t\t\t\t// Keep references to cloned scripts for later restoration\n\t\t\t\t\tif ( hasScripts ) {\n\n\t\t\t\t\t\t// Support: Android <=4.0 only, PhantomJS 1 only\n\t\t\t\t\t\t// push.apply(_, arraylike) throws on ancient WebKit\n\t\t\t\t\t\tjQuery.merge( scripts, getAll( node, \"script\" ) );\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tcallback.call( collection[ i ], node, i );\n\t\t\t}\n\n\t\t\tif ( hasScripts ) {\n\t\t\t\tdoc = scripts[ scripts.length - 1 ].ownerDocument;\n\n\t\t\t\t// Reenable scripts\n\t\t\t\tjQuery.map( scripts, restoreScript );\n\n\t\t\t\t// Evaluate executable scripts on first document insertion\n\t\t\t\tfor ( i = 0; i < hasScripts; i++ ) {\n\t\t\t\t\tnode = scripts[ i ];\n\t\t\t\t\tif ( rscriptType.test( node.type || \"\" ) &&\n\t\t\t\t\t\t!dataPriv.access( node, \"globalEval\" ) &&\n\t\t\t\t\t\tjQuery.contains( doc, node ) ) {\n\n\t\t\t\t\t\tif ( node.src ) {\n\n\t\t\t\t\t\t\t// Optional AJAX dependency, but won't run scripts if not present\n\t\t\t\t\t\t\tif ( jQuery._evalUrl ) {\n\t\t\t\t\t\t\t\tjQuery._evalUrl( node.src );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tDOMEval( node.textContent.replace( rcleanScript, \"\" ), doc );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn collection;\n}\n\nfunction remove( elem, selector, keepData ) {\n\tvar node,\n\t\tnodes = selector ? jQuery.filter( selector, elem ) : elem,\n\t\ti = 0;\n\n\tfor ( ; ( node = nodes[ i ] ) != null; i++ ) {\n\t\tif ( !keepData && node.nodeType === 1 ) {\n\t\t\tjQuery.cleanData( getAll( node ) );\n\t\t}\n\n\t\tif ( node.parentNode ) {\n\t\t\tif ( keepData && jQuery.contains( node.ownerDocument, node ) ) {\n\t\t\t\tsetGlobalEval( getAll( node, \"script\" ) );\n\t\t\t}\n\t\t\tnode.parentNode.removeChild( node );\n\t\t}\n\t}\n\n\treturn elem;\n}\n\njQuery.extend( {\n\thtmlPrefilter: function( html ) {\n\t\treturn html.replace( rxhtmlTag, \"<$1></$2>\" );\n\t},\n\n\tclone: function( elem, dataAndEvents, deepDataAndEvents ) {\n\t\tvar i, l, srcElements, destElements,\n\t\t\tclone = elem.cloneNode( true ),\n\t\t\tinPage = jQuery.contains( elem.ownerDocument, elem );\n\n\t\t// Fix IE cloning issues\n\t\tif ( !support.noCloneChecked && ( elem.nodeType === 1 || elem.nodeType === 11 ) &&\n\t\t\t\t!jQuery.isXMLDoc( elem ) ) {\n\n\t\t\t// We eschew Sizzle here for performance reasons: https://jsperf.com/getall-vs-sizzle/2\n\t\t\tdestElements = getAll( clone );\n\t\t\tsrcElements = getAll( elem );\n\n\t\t\tfor ( i = 0, l = srcElements.length; i < l; i++ ) {\n\t\t\t\tfixInput( srcElements[ i ], destElements[ i ] );\n\t\t\t}\n\t\t}\n\n\t\t// Copy the events from the original to the clone\n\t\tif ( dataAndEvents ) {\n\t\t\tif ( deepDataAndEvents ) {\n\t\t\t\tsrcElements = srcElements || getAll( elem );\n\t\t\t\tdestElements = destElements || getAll( clone );\n\n\t\t\t\tfor ( i = 0, l = srcElements.length; i < l; i++ ) {\n\t\t\t\t\tcloneCopyEvent( srcElements[ i ], destElements[ i ] );\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tcloneCopyEvent( elem, clone );\n\t\t\t}\n\t\t}\n\n\t\t// Preserve script evaluation history\n\t\tdestElements = getAll( clone, \"script\" );\n\t\tif ( destElements.length > 0 ) {\n\t\t\tsetGlobalEval( destElements, !inPage && getAll( elem, \"script\" ) );\n\t\t}\n\n\t\t// Return the cloned set\n\t\treturn clone;\n\t},\n\n\tcleanData: function( elems ) {\n\t\tvar data, elem, type,\n\t\t\tspecial = jQuery.event.special,\n\t\t\ti = 0;\n\n\t\tfor ( ; ( elem = elems[ i ] ) !== undefined; i++ ) {\n\t\t\tif ( acceptData( elem ) ) {\n\t\t\t\tif ( ( data = elem[ dataPriv.expando ] ) ) {\n\t\t\t\t\tif ( data.events ) {\n\t\t\t\t\t\tfor ( type in data.events ) {\n\t\t\t\t\t\t\tif ( special[ type ] ) {\n\t\t\t\t\t\t\t\tjQuery.event.remove( elem, type );\n\n\t\t\t\t\t\t\t// This is a shortcut to avoid jQuery.event.remove's overhead\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tjQuery.removeEvent( elem, type, data.handle );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// Support: Chrome <=35 - 45+\n\t\t\t\t\t// Assign undefined instead of using delete, see Data#remove\n\t\t\t\t\telem[ dataPriv.expando ] = undefined;\n\t\t\t\t}\n\t\t\t\tif ( elem[ dataUser.expando ] ) {\n\n\t\t\t\t\t// Support: Chrome <=35 - 45+\n\t\t\t\t\t// Assign undefined instead of using delete, see Data#remove\n\t\t\t\t\telem[ dataUser.expando ] = undefined;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n} );\n\njQuery.fn.extend( {\n\tdetach: function( selector ) {\n\t\treturn remove( this, selector, true );\n\t},\n\n\tremove: function( selector ) {\n\t\treturn remove( this, selector );\n\t},\n\n\ttext: function( value ) {\n\t\treturn access( this, function( value ) {\n\t\t\treturn value === undefined ?\n\t\t\t\tjQuery.text( this ) :\n\t\t\t\tthis.empty().each( function() {\n\t\t\t\t\tif ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {\n\t\t\t\t\t\tthis.textContent = value;\n\t\t\t\t\t}\n\t\t\t\t} );\n\t\t}, null, value, arguments.length );\n\t},\n\n\tappend: function() {\n\t\treturn domManip( this, arguments, function( elem ) {\n\t\t\tif ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {\n\t\t\t\tvar target = manipulationTarget( this, elem );\n\t\t\t\ttarget.appendChild( elem );\n\t\t\t}\n\t\t} );\n\t},\n\n\tprepend: function() {\n\t\treturn domManip( this, arguments, function( elem ) {\n\t\t\tif ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {\n\t\t\t\tvar target = manipulationTarget( this, elem );\n\t\t\t\ttarget.insertBefore( elem, target.firstChild );\n\t\t\t}\n\t\t} );\n\t},\n\n\tbefore: function() {\n\t\treturn domManip( this, arguments, function( elem ) {\n\t\t\tif ( this.parentNode ) {\n\t\t\t\tthis.parentNode.insertBefore( elem, this );\n\t\t\t}\n\t\t} );\n\t},\n\n\tafter: function() {\n\t\treturn domManip( this, arguments, function( elem ) {\n\t\t\tif ( this.parentNode ) {\n\t\t\t\tthis.parentNode.insertBefore( elem, this.nextSibling );\n\t\t\t}\n\t\t} );\n\t},\n\n\tempty: function() {\n\t\tvar elem,\n\t\t\ti = 0;\n\n\t\tfor ( ; ( elem = this[ i ] ) != null; i++ ) {\n\t\t\tif ( elem.nodeType === 1 ) {\n\n\t\t\t\t// Prevent memory leaks\n\t\t\t\tjQuery.cleanData( getAll( elem, false ) );\n\n\t\t\t\t// Remove any remaining nodes\n\t\t\t\telem.textContent = \"\";\n\t\t\t}\n\t\t}\n\n\t\treturn this;\n\t},\n\n\tclone: function( dataAndEvents, deepDataAndEvents ) {\n\t\tdataAndEvents = dataAndEvents == null ? false : dataAndEvents;\n\t\tdeepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;\n\n\t\treturn this.map( function() {\n\t\t\treturn jQuery.clone( this, dataAndEvents, deepDataAndEvents );\n\t\t} );\n\t},\n\n\thtml: function( value ) {\n\t\treturn access( this, function( value ) {\n\t\t\tvar elem = this[ 0 ] || {},\n\t\t\t\ti = 0,\n\t\t\t\tl = this.length;\n\n\t\t\tif ( value === undefined && elem.nodeType === 1 ) {\n\t\t\t\treturn elem.innerHTML;\n\t\t\t}\n\n\t\t\t// See if we can take a shortcut and just use innerHTML\n\t\t\tif ( typeof value === \"string\" && !rnoInnerhtml.test( value ) &&\n\t\t\t\t!wrapMap[ ( rtagName.exec( value ) || [ \"\", \"\" ] )[ 1 ].toLowerCase() ] ) {\n\n\t\t\t\tvalue = jQuery.htmlPrefilter( value );\n\n\t\t\t\ttry {\n\t\t\t\t\tfor ( ; i < l; i++ ) {\n\t\t\t\t\t\telem = this[ i ] || {};\n\n\t\t\t\t\t\t// Remove element nodes and prevent memory leaks\n\t\t\t\t\t\tif ( elem.nodeType === 1 ) {\n\t\t\t\t\t\t\tjQuery.cleanData( getAll( elem, false ) );\n\t\t\t\t\t\t\telem.innerHTML = value;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\telem = 0;\n\n\t\t\t\t// If using innerHTML throws an exception, use the fallback method\n\t\t\t\t} catch ( e ) {}\n\t\t\t}\n\n\t\t\tif ( elem ) {\n\t\t\t\tthis.empty().append( value );\n\t\t\t}\n\t\t}, null, value, arguments.length );\n\t},\n\n\treplaceWith: function() {\n\t\tvar ignored = [];\n\n\t\t// Make the changes, replacing each non-ignored context element with the new content\n\t\treturn domManip( this, arguments, function( elem ) {\n\t\t\tvar parent = this.parentNode;\n\n\t\t\tif ( jQuery.inArray( this, ignored ) < 0 ) {\n\t\t\t\tjQuery.cleanData( getAll( this ) );\n\t\t\t\tif ( parent ) {\n\t\t\t\t\tparent.replaceChild( elem, this );\n\t\t\t\t}\n\t\t\t}\n\n\t\t// Force callback invocation\n\t\t}, ignored );\n\t}\n} );\n\njQuery.each( {\n\tappendTo: \"append\",\n\tprependTo: \"prepend\",\n\tinsertBefore: \"before\",\n\tinsertAfter: \"after\",\n\treplaceAll: \"replaceWith\"\n}, function( name, original ) {\n\tjQuery.fn[ name ] = function( selector ) {\n\t\tvar elems,\n\t\t\tret = [],\n\t\t\tinsert = jQuery( selector ),\n\t\t\tlast = insert.length - 1,\n\t\t\ti = 0;\n\n\t\tfor ( ; i <= last; i++ ) {\n\t\t\telems = i === last ? this : this.clone( true );\n\t\t\tjQuery( insert[ i ] )[ original ]( elems );\n\n\t\t\t// Support: Android <=4.0 only, PhantomJS 1 only\n\t\t\t// .get() because push.apply(_, arraylike) throws on ancient WebKit\n\t\t\tpush.apply( ret, elems.get() );\n\t\t}\n\n\t\treturn this.pushStack( ret );\n\t};\n} );\nvar rmargin = ( /^margin/ );\n\nvar rnumnonpx = new RegExp( \"^(\" + pnum + \")(?!px)[a-z%]+$\", \"i\" );\n\nvar getStyles = function( elem ) {\n\n\t\t// Support: IE <=11 only, Firefox <=30 (#15098, #14150)\n\t\t// IE throws on elements created in popups\n\t\t// FF meanwhile throws on frame elements through \"defaultView.getComputedStyle\"\n\t\tvar view = elem.ownerDocument.defaultView;\n\n\t\tif ( !view || !view.opener ) {\n\t\t\tview = window;\n\t\t}\n\n\t\treturn view.getComputedStyle( elem );\n\t};\n\n\n\n( function() {\n\n\t// Executing both pixelPosition & boxSizingReliable tests require only one layout\n\t// so they're executed at the same time to save the second computation.\n\tfunction computeStyleTests() {\n\n\t\t// This is a singleton, we need to execute it only once\n\t\tif ( !div ) {\n\t\t\treturn;\n\t\t}\n\n\t\tdiv.style.cssText =\n\t\t\t\"box-sizing:border-box;\" +\n\t\t\t\"position:relative;display:block;\" +\n\t\t\t\"margin:auto;border:1px;padding:1px;\" +\n\t\t\t\"top:1%;width:50%\";\n\t\tdiv.innerHTML = \"\";\n\t\tdocumentElement.appendChild( container );\n\n\t\tvar divStyle = window.getComputedStyle( div );\n\t\tpixelPositionVal = divStyle.top !== \"1%\";\n\n\t\t// Support: Android 4.0 - 4.3 only, Firefox <=3 - 44\n\t\treliableMarginLeftVal = divStyle.marginLeft === \"2px\";\n\t\tboxSizingReliableVal = divStyle.width === \"4px\";\n\n\t\t// Support: Android 4.0 - 4.3 only\n\t\t// Some styles come back with percentage values, even though they shouldn't\n\t\tdiv.style.marginRight = \"50%\";\n\t\tpixelMarginRightVal = divStyle.marginRight === \"4px\";\n\n\t\tdocumentElement.removeChild( container );\n\n\t\t// Nullify the div so it wouldn't be stored in the memory and\n\t\t// it will also be a sign that checks already performed\n\t\tdiv = null;\n\t}\n\n\tvar pixelPositionVal, boxSizingReliableVal, pixelMarginRightVal, reliableMarginLeftVal,\n\t\tcontainer = document.createElement( \"div\" ),\n\t\tdiv = document.createElement( \"div\" );\n\n\t// Finish early in limited (non-browser) environments\n\tif ( !div.style ) {\n\t\treturn;\n\t}\n\n\t// Support: IE <=9 - 11 only\n\t// Style of cloned element affects source element cloned (#8908)\n\tdiv.style.backgroundClip = \"content-box\";\n\tdiv.cloneNode( true ).style.backgroundClip = \"\";\n\tsupport.clearCloneStyle = div.style.backgroundClip === \"content-box\";\n\n\tcontainer.style.cssText = \"border:0;width:8px;height:0;top:0;left:-9999px;\" +\n\t\t\"padding:0;margin-top:1px;position:absolute\";\n\tcontainer.appendChild( div );\n\n\tjQuery.extend( support, {\n\t\tpixelPosition: function() {\n\t\t\tcomputeStyleTests();\n\t\t\treturn pixelPositionVal;\n\t\t},\n\t\tboxSizingReliable: function() {\n\t\t\tcomputeStyleTests();\n\t\t\treturn boxSizingReliableVal;\n\t\t},\n\t\tpixelMarginRight: function() {\n\t\t\tcomputeStyleTests();\n\t\t\treturn pixelMarginRightVal;\n\t\t},\n\t\treliableMarginLeft: function() {\n\t\t\tcomputeStyleTests();\n\t\t\treturn reliableMarginLeftVal;\n\t\t}\n\t} );\n} )();\n\n\nfunction curCSS( elem, name, computed ) {\n\tvar width, minWidth, maxWidth, ret,\n\t\tstyle = elem.style;\n\n\tcomputed = computed || getStyles( elem );\n\n\t// Support: IE <=9 only\n\t// getPropertyValue is only needed for .css('filter') (#12537)\n\tif ( computed ) {\n\t\tret = computed.getPropertyValue( name ) || computed[ name ];\n\n\t\tif ( ret === \"\" && !jQuery.contains( elem.ownerDocument, elem ) ) {\n\t\t\tret = jQuery.style( elem, name );\n\t\t}\n\n\t\t// A tribute to the \"awesome hack by Dean Edwards\"\n\t\t// Android Browser returns percentage for some values,\n\t\t// but width seems to be reliably pixels.\n\t\t// This is against the CSSOM draft spec:\n\t\t// https://drafts.csswg.org/cssom/#resolved-values\n\t\tif ( !support.pixelMarginRight() && rnumnonpx.test( ret ) && rmargin.test( name ) ) {\n\n\t\t\t// Remember the original values\n\t\t\twidth = style.width;\n\t\t\tminWidth = style.minWidth;\n\t\t\tmaxWidth = style.maxWidth;\n\n\t\t\t// Put in the new values to get a computed value out\n\t\t\tstyle.minWidth = style.maxWidth = style.width = ret;\n\t\t\tret = computed.width;\n\n\t\t\t// Revert the changed values\n\t\t\tstyle.width = width;\n\t\t\tstyle.minWidth = minWidth;\n\t\t\tstyle.maxWidth = maxWidth;\n\t\t}\n\t}\n\n\treturn ret !== undefined ?\n\n\t\t// Support: IE <=9 - 11 only\n\t\t// IE returns zIndex value as an integer.\n\t\tret + \"\" :\n\t\tret;\n}\n\n\nfunction addGetHookIf( conditionFn, hookFn ) {\n\n\t// Define the hook, we'll check on the first run if it's really needed.\n\treturn {\n\t\tget: function() {\n\t\t\tif ( conditionFn() ) {\n\n\t\t\t\t// Hook not needed (or it's not possible to use it due\n\t\t\t\t// to missing dependency), remove it.\n\t\t\t\tdelete this.get;\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Hook needed; redefine it so that the support test is not executed again.\n\t\t\treturn ( this.get = hookFn ).apply( this, arguments );\n\t\t}\n\t};\n}\n\n\nvar\n\n\t// Swappable if display is none or starts with table\n\t// except \"table\", \"table-cell\", or \"table-caption\"\n\t// See here for display values: https://developer.mozilla.org/en-US/docs/CSS/display\n\trdisplayswap = /^(none|table(?!-c[ea]).+)/,\n\tcssShow = { position: \"absolute\", visibility: \"hidden\", display: \"block\" },\n\tcssNormalTransform = {\n\t\tletterSpacing: \"0\",\n\t\tfontWeight: \"400\"\n\t},\n\n\tcssPrefixes = [ \"Webkit\", \"Moz\", \"ms\" ],\n\temptyStyle = document.createElement( \"div\" ).style;\n\n// Return a css property mapped to a potentially vendor prefixed property\nfunction vendorPropName( name ) {\n\n\t// Shortcut for names that are not vendor prefixed\n\tif ( name in emptyStyle ) {\n\t\treturn name;\n\t}\n\n\t// Check for vendor prefixed names\n\tvar capName = name[ 0 ].toUpperCase() + name.slice( 1 ),\n\t\ti = cssPrefixes.length;\n\n\twhile ( i-- ) {\n\t\tname = cssPrefixes[ i ] + capName;\n\t\tif ( name in emptyStyle ) {\n\t\t\treturn name;\n\t\t}\n\t}\n}\n\nfunction setPositiveNumber( elem, value, subtract ) {\n\n\t// Any relative (+/-) values have already been\n\t// normalized at this point\n\tvar matches = rcssNum.exec( value );\n\treturn matches ?\n\n\t\t// Guard against undefined \"subtract\", e.g., when used as in cssHooks\n\t\tMath.max( 0, matches[ 2 ] - ( subtract || 0 ) ) + ( matches[ 3 ] || \"px\" ) :\n\t\tvalue;\n}\n\nfunction augmentWidthOrHeight( elem, name, extra, isBorderBox, styles ) {\n\tvar i,\n\t\tval = 0;\n\n\t// If we already have the right measurement, avoid augmentation\n\tif ( extra === ( isBorderBox ? \"border\" : \"content\" ) ) {\n\t\ti = 4;\n\n\t// Otherwise initialize for horizontal or vertical properties\n\t} else {\n\t\ti = name === \"width\" ? 1 : 0;\n\t}\n\n\tfor ( ; i < 4; i += 2 ) {\n\n\t\t// Both box models exclude margin, so add it if we want it\n\t\tif ( extra === \"margin\" ) {\n\t\t\tval += jQuery.css( elem, extra + cssExpand[ i ], true, styles );\n\t\t}\n\n\t\tif ( isBorderBox ) {\n\n\t\t\t// border-box includes padding, so remove it if we want content\n\t\t\tif ( extra === \"content\" ) {\n\t\t\t\tval -= jQuery.css( elem, \"padding\" + cssExpand[ i ], true, styles );\n\t\t\t}\n\n\t\t\t// At this point, extra isn't border nor margin, so remove border\n\t\t\tif ( extra !== \"margin\" ) {\n\t\t\t\tval -= jQuery.css( elem, \"border\" + cssExpand[ i ] + \"Width\", true, styles );\n\t\t\t}\n\t\t} else {\n\n\t\t\t// At this point, extra isn't content, so add padding\n\t\t\tval += jQuery.css( elem, \"padding\" + cssExpand[ i ], true, styles );\n\n\t\t\t// At this point, extra isn't content nor padding, so add border\n\t\t\tif ( extra !== \"padding\" ) {\n\t\t\t\tval += jQuery.css( elem, \"border\" + cssExpand[ i ] + \"Width\", true, styles );\n\t\t\t}\n\t\t}\n\t}\n\n\treturn val;\n}\n\nfunction getWidthOrHeight( elem, name, extra ) {\n\n\t// Start with offset property, which is equivalent to the border-box value\n\tvar val,\n\t\tvalueIsBorderBox = true,\n\t\tstyles = getStyles( elem ),\n\t\tisBorderBox = jQuery.css( elem, \"boxSizing\", false, styles ) === \"border-box\";\n\n\t// Support: IE <=11 only\n\t// Running getBoundingClientRect on a disconnected node\n\t// in IE throws an error.\n\tif ( elem.getClientRects().length ) {\n\t\tval = elem.getBoundingClientRect()[ name ];\n\t}\n\n\t// Some non-html elements return undefined for offsetWidth, so check for null/undefined\n\t// svg - https://bugzilla.mozilla.org/show_bug.cgi?id=649285\n\t// MathML - https://bugzilla.mozilla.org/show_bug.cgi?id=491668\n\tif ( val <= 0 || val == null ) {\n\n\t\t// Fall back to computed then uncomputed css if necessary\n\t\tval = curCSS( elem, name, styles );\n\t\tif ( val < 0 || val == null ) {\n\t\t\tval = elem.style[ name ];\n\t\t}\n\n\t\t// Computed unit is not pixels. Stop here and return.\n\t\tif ( rnumnonpx.test( val ) ) {\n\t\t\treturn val;\n\t\t}\n\n\t\t// Check for style in case a browser which returns unreliable values\n\t\t// for getComputedStyle silently falls back to the reliable elem.style\n\t\tvalueIsBorderBox = isBorderBox &&\n\t\t\t( support.boxSizingReliable() || val === elem.style[ name ] );\n\n\t\t// Normalize \"\", auto, and prepare for extra\n\t\tval = parseFloat( val ) || 0;\n\t}\n\n\t// Use the active box-sizing model to add/subtract irrelevant styles\n\treturn ( val +\n\t\taugmentWidthOrHeight(\n\t\t\telem,\n\t\t\tname,\n\t\t\textra || ( isBorderBox ? \"border\" : \"content\" ),\n\t\t\tvalueIsBorderBox,\n\t\t\tstyles\n\t\t)\n\t) + \"px\";\n}\n\njQuery.extend( {\n\n\t// Add in style property hooks for overriding the default\n\t// behavior of getting and setting a style property\n\tcssHooks: {\n\t\topacity: {\n\t\t\tget: function( elem, computed ) {\n\t\t\t\tif ( computed ) {\n\n\t\t\t\t\t// We should always get a number back from opacity\n\t\t\t\t\tvar ret = curCSS( elem, \"opacity\" );\n\t\t\t\t\treturn ret === \"\" ? \"1\" : ret;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t},\n\n\t// Don't automatically add \"px\" to these possibly-unitless properties\n\tcssNumber: {\n\t\t\"animationIterationCount\": true,\n\t\t\"columnCount\": true,\n\t\t\"fillOpacity\": true,\n\t\t\"flexGrow\": true,\n\t\t\"flexShrink\": true,\n\t\t\"fontWeight\": true,\n\t\t\"lineHeight\": true,\n\t\t\"opacity\": true,\n\t\t\"order\": true,\n\t\t\"orphans\": true,\n\t\t\"widows\": true,\n\t\t\"zIndex\": true,\n\t\t\"zoom\": true\n\t},\n\n\t// Add in properties whose names you wish to fix before\n\t// setting or getting the value\n\tcssProps: {\n\t\t\"float\": \"cssFloat\"\n\t},\n\n\t// Get and set the style property on a DOM Node\n\tstyle: function( elem, name, value, extra ) {\n\n\t\t// Don't set styles on text and comment nodes\n\t\tif ( !elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Make sure that we're working with the right name\n\t\tvar ret, type, hooks,\n\t\t\torigName = jQuery.camelCase( name ),\n\t\t\tstyle = elem.style;\n\n\t\tname = jQuery.cssProps[ origName ] ||\n\t\t\t( jQuery.cssProps[ origName ] = vendorPropName( origName ) || origName );\n\n\t\t// Gets hook for the prefixed version, then unprefixed version\n\t\thooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];\n\n\t\t// Check if we're setting a value\n\t\tif ( value !== undefined ) {\n\t\t\ttype = typeof value;\n\n\t\t\t// Convert \"+=\" or \"-=\" to relative numbers (#7345)\n\t\t\tif ( type === \"string\" && ( ret = rcssNum.exec( value ) ) && ret[ 1 ] ) {\n\t\t\t\tvalue = adjustCSS( elem, name, ret );\n\n\t\t\t\t// Fixes bug #9237\n\t\t\t\ttype = \"number\";\n\t\t\t}\n\n\t\t\t// Make sure that null and NaN values aren't set (#7116)\n\t\t\tif ( value == null || value !== value ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// If a number was passed in, add the unit (except for certain CSS properties)\n\t\t\tif ( type === \"number\" ) {\n\t\t\t\tvalue += ret && ret[ 3 ] || ( jQuery.cssNumber[ origName ] ? \"\" : \"px\" );\n\t\t\t}\n\n\t\t\t// background-* props affect original clone's values\n\t\t\tif ( !support.clearCloneStyle && value === \"\" && name.indexOf( \"background\" ) === 0 ) {\n\t\t\t\tstyle[ name ] = \"inherit\";\n\t\t\t}\n\n\t\t\t// If a hook was provided, use that value, otherwise just set the specified value\n\t\t\tif ( !hooks || !( \"set\" in hooks ) ||\n\t\t\t\t( value = hooks.set( elem, value, extra ) ) !== undefined ) {\n\n\t\t\t\tstyle[ name ] = value;\n\t\t\t}\n\n\t\t} else {\n\n\t\t\t// If a hook was provided get the non-computed value from there\n\t\t\tif ( hooks && \"get\" in hooks &&\n\t\t\t\t( ret = hooks.get( elem, false, extra ) ) !== undefined ) {\n\n\t\t\t\treturn ret;\n\t\t\t}\n\n\t\t\t// Otherwise just get the value from the style object\n\t\t\treturn style[ name ];\n\t\t}\n\t},\n\n\tcss: function( elem, name, extra, styles ) {\n\t\tvar val, num, hooks,\n\t\t\torigName = jQuery.camelCase( name );\n\n\t\t// Make sure that we're working with the right name\n\t\tname = jQuery.cssProps[ origName ] ||\n\t\t\t( jQuery.cssProps[ origName ] = vendorPropName( origName ) || origName );\n\n\t\t// Try prefixed name followed by the unprefixed name\n\t\thooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];\n\n\t\t// If a hook was provided get the computed value from there\n\t\tif ( hooks && \"get\" in hooks ) {\n\t\t\tval = hooks.get( elem, true, extra );\n\t\t}\n\n\t\t// Otherwise, if a way to get the computed value exists, use that\n\t\tif ( val === undefined ) {\n\t\t\tval = curCSS( elem, name, styles );\n\t\t}\n\n\t\t// Convert \"normal\" to computed value\n\t\tif ( val === \"normal\" && name in cssNormalTransform ) {\n\t\t\tval = cssNormalTransform[ name ];\n\t\t}\n\n\t\t// Make numeric if forced or a qualifier was provided and val looks numeric\n\t\tif ( extra === \"\" || extra ) {\n\t\t\tnum = parseFloat( val );\n\t\t\treturn extra === true || isFinite( num ) ? num || 0 : val;\n\t\t}\n\t\treturn val;\n\t}\n} );\n\njQuery.each( [ \"height\", \"width\" ], function( i, name ) {\n\tjQuery.cssHooks[ name ] = {\n\t\tget: function( elem, computed, extra ) {\n\t\t\tif ( computed ) {\n\n\t\t\t\t// Certain elements can have dimension info if we invisibly show them\n\t\t\t\t// but it must have a current display style that would benefit\n\t\t\t\treturn rdisplayswap.test( jQuery.css( elem, \"display\" ) ) &&\n\n\t\t\t\t\t// Support: Safari 8+\n\t\t\t\t\t// Table columns in Safari have non-zero offsetWidth & zero\n\t\t\t\t\t// getBoundingClientRect().width unless display is changed.\n\t\t\t\t\t// Support: IE <=11 only\n\t\t\t\t\t// Running getBoundingClientRect on a disconnected node\n\t\t\t\t\t// in IE throws an error.\n\t\t\t\t\t( !elem.getClientRects().length || !elem.getBoundingClientRect().width ) ?\n\t\t\t\t\t\tswap( elem, cssShow, function() {\n\t\t\t\t\t\t\treturn getWidthOrHeight( elem, name, extra );\n\t\t\t\t\t\t} ) :\n\t\t\t\t\t\tgetWidthOrHeight( elem, name, extra );\n\t\t\t}\n\t\t},\n\n\t\tset: function( elem, value, extra ) {\n\t\t\tvar matches,\n\t\t\t\tstyles = extra && getStyles( elem ),\n\t\t\t\tsubtract = extra && augmentWidthOrHeight(\n\t\t\t\t\telem,\n\t\t\t\t\tname,\n\t\t\t\t\textra,\n\t\t\t\t\tjQuery.css( elem, \"boxSizing\", false, styles ) === \"border-box\",\n\t\t\t\t\tstyles\n\t\t\t\t);\n\n\t\t\t// Convert to pixels if value adjustment is needed\n\t\t\tif ( subtract && ( matches = rcssNum.exec( value ) ) &&\n\t\t\t\t( matches[ 3 ] || \"px\" ) !== \"px\" ) {\n\n\t\t\t\telem.style[ name ] = value;\n\t\t\t\tvalue = jQuery.css( elem, name );\n\t\t\t}\n\n\t\t\treturn setPositiveNumber( elem, value, subtract );\n\t\t}\n\t};\n} );\n\njQuery.cssHooks.marginLeft = addGetHookIf( support.reliableMarginLeft,\n\tfunction( elem, computed ) {\n\t\tif ( computed ) {\n\t\t\treturn ( parseFloat( curCSS( elem, \"marginLeft\" ) ) ||\n\t\t\t\telem.getBoundingClientRect().left -\n\t\t\t\t\tswap( elem, { marginLeft: 0 }, function() {\n\t\t\t\t\t\treturn elem.getBoundingClientRect().left;\n\t\t\t\t\t} )\n\t\t\t\t) + \"px\";\n\t\t}\n\t}\n);\n\n// These hooks are used by animate to expand properties\njQuery.each( {\n\tmargin: \"\",\n\tpadding: \"\",\n\tborder: \"Width\"\n}, function( prefix, suffix ) {\n\tjQuery.cssHooks[ prefix + suffix ] = {\n\t\texpand: function( value ) {\n\t\t\tvar i = 0,\n\t\t\t\texpanded = {},\n\n\t\t\t\t// Assumes a single number if not a string\n\t\t\t\tparts = typeof value === \"string\" ? value.split( \" \" ) : [ value ];\n\n\t\t\tfor ( ; i < 4; i++ ) {\n\t\t\t\texpanded[ prefix + cssExpand[ i ] + suffix ] =\n\t\t\t\t\tparts[ i ] || parts[ i - 2 ] || parts[ 0 ];\n\t\t\t}\n\n\t\t\treturn expanded;\n\t\t}\n\t};\n\n\tif ( !rmargin.test( prefix ) ) {\n\t\tjQuery.cssHooks[ prefix + suffix ].set = setPositiveNumber;\n\t}\n} );\n\njQuery.fn.extend( {\n\tcss: function( name, value ) {\n\t\treturn access( this, function( elem, name, value ) {\n\t\t\tvar styles, len,\n\t\t\t\tmap = {},\n\t\t\t\ti = 0;\n\n\t\t\tif ( jQuery.isArray( name ) ) {\n\t\t\t\tstyles = getStyles( elem );\n\t\t\t\tlen = name.length;\n\n\t\t\t\tfor ( ; i < len; i++ ) {\n\t\t\t\t\tmap[ name[ i ] ] = jQuery.css( elem, name[ i ], false, styles );\n\t\t\t\t}\n\n\t\t\t\treturn map;\n\t\t\t}\n\n\t\t\treturn value !== undefined ?\n\t\t\t\tjQuery.style( elem, name, value ) :\n\t\t\t\tjQuery.css( elem, name );\n\t\t}, name, value, arguments.length > 1 );\n\t}\n} );\n\n\nfunction Tween( elem, options, prop, end, easing ) {\n\treturn new Tween.prototype.init( elem, options, prop, end, easing );\n}\njQuery.Tween = Tween;\n\nTween.prototype = {\n\tconstructor: Tween,\n\tinit: function( elem, options, prop, end, easing, unit ) {\n\t\tthis.elem = elem;\n\t\tthis.prop = prop;\n\t\tthis.easing = easing || jQuery.easing._default;\n\t\tthis.options = options;\n\t\tthis.start = this.now = this.cur();\n\t\tthis.end = end;\n\t\tthis.unit = unit || ( jQuery.cssNumber[ prop ] ? \"\" : \"px\" );\n\t},\n\tcur: function() {\n\t\tvar hooks = Tween.propHooks[ this.prop ];\n\n\t\treturn hooks && hooks.get ?\n\t\t\thooks.get( this ) :\n\t\t\tTween.propHooks._default.get( this );\n\t},\n\trun: function( percent ) {\n\t\tvar eased,\n\t\t\thooks = Tween.propHooks[ this.prop ];\n\n\t\tif ( this.options.duration ) {\n\t\t\tthis.pos = eased = jQuery.easing[ this.easing ](\n\t\t\t\tpercent, this.options.duration * percent, 0, 1, this.options.duration\n\t\t\t);\n\t\t} else {\n\t\t\tthis.pos = eased = percent;\n\t\t}\n\t\tthis.now = ( this.end - this.start ) * eased + this.start;\n\n\t\tif ( this.options.step ) {\n\t\t\tthis.options.step.call( this.elem, this.now, this );\n\t\t}\n\n\t\tif ( hooks && hooks.set ) {\n\t\t\thooks.set( this );\n\t\t} else {\n\t\t\tTween.propHooks._default.set( this );\n\t\t}\n\t\treturn this;\n\t}\n};\n\nTween.prototype.init.prototype = Tween.prototype;\n\nTween.propHooks = {\n\t_default: {\n\t\tget: function( tween ) {\n\t\t\tvar result;\n\n\t\t\t// Use a property on the element directly when it is not a DOM element,\n\t\t\t// or when there is no matching style property that exists.\n\t\t\tif ( tween.elem.nodeType !== 1 ||\n\t\t\t\ttween.elem[ tween.prop ] != null && tween.elem.style[ tween.prop ] == null ) {\n\t\t\t\treturn tween.elem[ tween.prop ];\n\t\t\t}\n\n\t\t\t// Passing an empty string as a 3rd parameter to .css will automatically\n\t\t\t// attempt a parseFloat and fallback to a string if the parse fails.\n\t\t\t// Simple values such as \"10px\" are parsed to Float;\n\t\t\t// complex values such as \"rotate(1rad)\" are returned as-is.\n\t\t\tresult = jQuery.css( tween.elem, tween.prop, \"\" );\n\n\t\t\t// Empty strings, null, undefined and \"auto\" are converted to 0.\n\t\t\treturn !result || result === \"auto\" ? 0 : result;\n\t\t},\n\t\tset: function( tween ) {\n\n\t\t\t// Use step hook for back compat.\n\t\t\t// Use cssHook if its there.\n\t\t\t// Use .style if available and use plain properties where available.\n\t\t\tif ( jQuery.fx.step[ tween.prop ] ) {\n\t\t\t\tjQuery.fx.step[ tween.prop ]( tween );\n\t\t\t} else if ( tween.elem.nodeType === 1 &&\n\t\t\t\t( tween.elem.style[ jQuery.cssProps[ tween.prop ] ] != null ||\n\t\t\t\t\tjQuery.cssHooks[ tween.prop ] ) ) {\n\t\t\t\tjQuery.style( tween.elem, tween.prop, tween.now + tween.unit );\n\t\t\t} else {\n\t\t\t\ttween.elem[ tween.prop ] = tween.now;\n\t\t\t}\n\t\t}\n\t}\n};\n\n// Support: IE <=9 only\n// Panic based approach to setting things on disconnected nodes\nTween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {\n\tset: function( tween ) {\n\t\tif ( tween.elem.nodeType && tween.elem.parentNode ) {\n\t\t\ttween.elem[ tween.prop ] = tween.now;\n\t\t}\n\t}\n};\n\njQuery.easing = {\n\tlinear: function( p ) {\n\t\treturn p;\n\t},\n\tswing: function( p ) {\n\t\treturn 0.5 - Math.cos( p * Math.PI ) / 2;\n\t},\n\t_default: \"swing\"\n};\n\njQuery.fx = Tween.prototype.init;\n\n// Back compat <1.8 extension point\njQuery.fx.step = {};\n\n\n\n\nvar\n\tfxNow, timerId,\n\trfxtypes = /^(?:toggle|show|hide)$/,\n\trrun = /queueHooks$/;\n\nfunction raf() {\n\tif ( timerId ) {\n\t\twindow.requestAnimationFrame( raf );\n\t\tjQuery.fx.tick();\n\t}\n}\n\n// Animations created synchronously will run synchronously\nfunction createFxNow() {\n\twindow.setTimeout( function() {\n\t\tfxNow = undefined;\n\t} );\n\treturn ( fxNow = jQuery.now() );\n}\n\n// Generate parameters to create a standard animation\nfunction genFx( type, includeWidth ) {\n\tvar which,\n\t\ti = 0,\n\t\tattrs = { height: type };\n\n\t// If we include width, step value is 1 to do all cssExpand values,\n\t// otherwise step value is 2 to skip over Left and Right\n\tincludeWidth = includeWidth ? 1 : 0;\n\tfor ( ; i < 4; i += 2 - includeWidth ) {\n\t\twhich = cssExpand[ i ];\n\t\tattrs[ \"margin\" + which ] = attrs[ \"padding\" + which ] = type;\n\t}\n\n\tif ( includeWidth ) {\n\t\tattrs.opacity = attrs.width = type;\n\t}\n\n\treturn attrs;\n}\n\nfunction createTween( value, prop, animation ) {\n\tvar tween,\n\t\tcollection = ( Animation.tweeners[ prop ] || [] ).concat( Animation.tweeners[ \"*\" ] ),\n\t\tindex = 0,\n\t\tlength = collection.length;\n\tfor ( ; index < length; index++ ) {\n\t\tif ( ( tween = collection[ index ].call( animation, prop, value ) ) ) {\n\n\t\t\t// We're done with this property\n\t\t\treturn tween;\n\t\t}\n\t}\n}\n\nfunction defaultPrefilter( elem, props, opts ) {\n\tvar prop, value, toggle, hooks, oldfire, propTween, restoreDisplay, display,\n\t\tisBox = \"width\" in props || \"height\" in props,\n\t\tanim = this,\n\t\torig = {},\n\t\tstyle = elem.style,\n\t\thidden = elem.nodeType && isHiddenWithinTree( elem ),\n\t\tdataShow = dataPriv.get( elem, \"fxshow\" );\n\n\t// Queue-skipping animations hijack the fx hooks\n\tif ( !opts.queue ) {\n\t\thooks = jQuery._queueHooks( elem, \"fx\" );\n\t\tif ( hooks.unqueued == null ) {\n\t\t\thooks.unqueued = 0;\n\t\t\toldfire = hooks.empty.fire;\n\t\t\thooks.empty.fire = function() {\n\t\t\t\tif ( !hooks.unqueued ) {\n\t\t\t\t\toldfire();\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\t\thooks.unqueued++;\n\n\t\tanim.always( function() {\n\n\t\t\t// Ensure the complete handler is called before this completes\n\t\t\tanim.always( function() {\n\t\t\t\thooks.unqueued--;\n\t\t\t\tif ( !jQuery.queue( elem, \"fx\" ).length ) {\n\t\t\t\t\thooks.empty.fire();\n\t\t\t\t}\n\t\t\t} );\n\t\t} );\n\t}\n\n\t// Detect show/hide animations\n\tfor ( prop in props ) {\n\t\tvalue = props[ prop ];\n\t\tif ( rfxtypes.test( value ) ) {\n\t\t\tdelete props[ prop ];\n\t\t\ttoggle = toggle || value === \"toggle\";\n\t\t\tif ( value === ( hidden ? \"hide\" : \"show\" ) ) {\n\n\t\t\t\t// Pretend to be hidden if this is a \"show\" and\n\t\t\t\t// there is still data from a stopped show/hide\n\t\t\t\tif ( value === \"show\" && dataShow && dataShow[ prop ] !== undefined ) {\n\t\t\t\t\thidden = true;\n\n\t\t\t\t// Ignore all other no-op show/hide data\n\t\t\t\t} else {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t}\n\t\t\torig[ prop ] = dataShow && dataShow[ prop ] || jQuery.style( elem, prop );\n\t\t}\n\t}\n\n\t// Bail out if this is a no-op like .hide().hide()\n\tpropTween = !jQuery.isEmptyObject( props );\n\tif ( !propTween && jQuery.isEmptyObject( orig ) ) {\n\t\treturn;\n\t}\n\n\t// Restrict \"overflow\" and \"display\" styles during box animations\n\tif ( isBox && elem.nodeType === 1 ) {\n\n\t\t// Support: IE <=9 - 11, Edge 12 - 13\n\t\t// Record all 3 overflow attributes because IE does not infer the shorthand\n\t\t// from identically-valued overflowX and overflowY\n\t\topts.overflow = [ style.overflow, style.overflowX, style.overflowY ];\n\n\t\t// Identify a display type, preferring old show/hide data over the CSS cascade\n\t\trestoreDisplay = dataShow && dataShow.display;\n\t\tif ( restoreDisplay == null ) {\n\t\t\trestoreDisplay = dataPriv.get( elem, \"display\" );\n\t\t}\n\t\tdisplay = jQuery.css( elem, \"display\" );\n\t\tif ( display === \"none\" ) {\n\t\t\tif ( restoreDisplay ) {\n\t\t\t\tdisplay = restoreDisplay;\n\t\t\t} else {\n\n\t\t\t\t// Get nonempty value(s) by temporarily forcing visibility\n\t\t\t\tshowHide( [ elem ], true );\n\t\t\t\trestoreDisplay = elem.style.display || restoreDisplay;\n\t\t\t\tdisplay = jQuery.css( elem, \"display\" );\n\t\t\t\tshowHide( [ elem ] );\n\t\t\t}\n\t\t}\n\n\t\t// Animate inline elements as inline-block\n\t\tif ( display === \"inline\" || display === \"inline-block\" && restoreDisplay != null ) {\n\t\t\tif ( jQuery.css( elem, \"float\" ) === \"none\" ) {\n\n\t\t\t\t// Restore the original display value at the end of pure show/hide animations\n\t\t\t\tif ( !propTween ) {\n\t\t\t\t\tanim.done( function() {\n\t\t\t\t\t\tstyle.display = restoreDisplay;\n\t\t\t\t\t} );\n\t\t\t\t\tif ( restoreDisplay == null ) {\n\t\t\t\t\t\tdisplay = style.display;\n\t\t\t\t\t\trestoreDisplay = display === \"none\" ? \"\" : display;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tstyle.display = \"inline-block\";\n\t\t\t}\n\t\t}\n\t}\n\n\tif ( opts.overflow ) {\n\t\tstyle.overflow = \"hidden\";\n\t\tanim.always( function() {\n\t\t\tstyle.overflow = opts.overflow[ 0 ];\n\t\t\tstyle.overflowX = opts.overflow[ 1 ];\n\t\t\tstyle.overflowY = opts.overflow[ 2 ];\n\t\t} );\n\t}\n\n\t// Implement show/hide animations\n\tpropTween = false;\n\tfor ( prop in orig ) {\n\n\t\t// General show/hide setup for this element animation\n\t\tif ( !propTween ) {\n\t\t\tif ( dataShow ) {\n\t\t\t\tif ( \"hidden\" in dataShow ) {\n\t\t\t\t\thidden = dataShow.hidden;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tdataShow = dataPriv.access( elem, \"fxshow\", { display: restoreDisplay } );\n\t\t\t}\n\n\t\t\t// Store hidden/visible for toggle so `.stop().toggle()` \"reverses\"\n\t\t\tif ( toggle ) {\n\t\t\t\tdataShow.hidden = !hidden;\n\t\t\t}\n\n\t\t\t// Show elements before animating them\n\t\t\tif ( hidden ) {\n\t\t\t\tshowHide( [ elem ], true );\n\t\t\t}\n\n\t\t\t/* eslint-disable no-loop-func */\n\n\t\t\tanim.done( function() {\n\n\t\t\t/* eslint-enable no-loop-func */\n\n\t\t\t\t// The final step of a \"hide\" animation is actually hiding the element\n\t\t\t\tif ( !hidden ) {\n\t\t\t\t\tshowHide( [ elem ] );\n\t\t\t\t}\n\t\t\t\tdataPriv.remove( elem, \"fxshow\" );\n\t\t\t\tfor ( prop in orig ) {\n\t\t\t\t\tjQuery.style( elem, prop, orig[ prop ] );\n\t\t\t\t}\n\t\t\t} );\n\t\t}\n\n\t\t// Per-property setup\n\t\tpropTween = createTween( hidden ? dataShow[ prop ] : 0, prop, anim );\n\t\tif ( !( prop in dataShow ) ) {\n\t\t\tdataShow[ prop ] = propTween.start;\n\t\t\tif ( hidden ) {\n\t\t\t\tpropTween.end = propTween.start;\n\t\t\t\tpropTween.start = 0;\n\t\t\t}\n\t\t}\n\t}\n}\n\nfunction propFilter( props, specialEasing ) {\n\tvar index, name, easing, value, hooks;\n\n\t// camelCase, specialEasing and expand cssHook pass\n\tfor ( index in props ) {\n\t\tname = jQuery.camelCase( index );\n\t\teasing = specialEasing[ name ];\n\t\tvalue = props[ index ];\n\t\tif ( jQuery.isArray( value ) ) {\n\t\t\teasing = value[ 1 ];\n\t\t\tvalue = props[ index ] = value[ 0 ];\n\t\t}\n\n\t\tif ( index !== name ) {\n\t\t\tprops[ name ] = value;\n\t\t\tdelete props[ index ];\n\t\t}\n\n\t\thooks = jQuery.cssHooks[ name ];\n\t\tif ( hooks && \"expand\" in hooks ) {\n\t\t\tvalue = hooks.expand( value );\n\t\t\tdelete props[ name ];\n\n\t\t\t// Not quite $.extend, this won't overwrite existing keys.\n\t\t\t// Reusing 'index' because we have the correct \"name\"\n\t\t\tfor ( index in value ) {\n\t\t\t\tif ( !( index in props ) ) {\n\t\t\t\t\tprops[ index ] = value[ index ];\n\t\t\t\t\tspecialEasing[ index ] = easing;\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tspecialEasing[ name ] = easing;\n\t\t}\n\t}\n}\n\nfunction Animation( elem, properties, options ) {\n\tvar result,\n\t\tstopped,\n\t\tindex = 0,\n\t\tlength = Animation.prefilters.length,\n\t\tdeferred = jQuery.Deferred().always( function() {\n\n\t\t\t// Don't match elem in the :animated selector\n\t\t\tdelete tick.elem;\n\t\t} ),\n\t\ttick = function() {\n\t\t\tif ( stopped ) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tvar currentTime = fxNow || createFxNow(),\n\t\t\t\tremaining = Math.max( 0, animation.startTime + animation.duration - currentTime ),\n\n\t\t\t\t// Support: Android 2.3 only\n\t\t\t\t// Archaic crash bug won't allow us to use `1 - ( 0.5 || 0 )` (#12497)\n\t\t\t\ttemp = remaining / animation.duration || 0,\n\t\t\t\tpercent = 1 - temp,\n\t\t\t\tindex = 0,\n\t\t\t\tlength = animation.tweens.length;\n\n\t\t\tfor ( ; index < length; index++ ) {\n\t\t\t\tanimation.tweens[ index ].run( percent );\n\t\t\t}\n\n\t\t\tdeferred.notifyWith( elem, [ animation, percent, remaining ] );\n\n\t\t\tif ( percent < 1 && length ) {\n\t\t\t\treturn remaining;\n\t\t\t} else {\n\t\t\t\tdeferred.resolveWith( elem, [ animation ] );\n\t\t\t\treturn false;\n\t\t\t}\n\t\t},\n\t\tanimation = deferred.promise( {\n\t\t\telem: elem,\n\t\t\tprops: jQuery.extend( {}, properties ),\n\t\t\topts: jQuery.extend( true, {\n\t\t\t\tspecialEasing: {},\n\t\t\t\teasing: jQuery.easing._default\n\t\t\t}, options ),\n\t\t\toriginalProperties: properties,\n\t\t\toriginalOptions: options,\n\t\t\tstartTime: fxNow || createFxNow(),\n\t\t\tduration: options.duration,\n\t\t\ttweens: [],\n\t\t\tcreateTween: function( prop, end ) {\n\t\t\t\tvar tween = jQuery.Tween( elem, animation.opts, prop, end,\n\t\t\t\t\t\tanimation.opts.specialEasing[ prop ] || animation.opts.easing );\n\t\t\t\tanimation.tweens.push( tween );\n\t\t\t\treturn tween;\n\t\t\t},\n\t\t\tstop: function( gotoEnd ) {\n\t\t\t\tvar index = 0,\n\n\t\t\t\t\t// If we are going to the end, we want to run all the tweens\n\t\t\t\t\t// otherwise we skip this part\n\t\t\t\t\tlength = gotoEnd ? animation.tweens.length : 0;\n\t\t\t\tif ( stopped ) {\n\t\t\t\t\treturn this;\n\t\t\t\t}\n\t\t\t\tstopped = true;\n\t\t\t\tfor ( ; index < length; index++ ) {\n\t\t\t\t\tanimation.tweens[ index ].run( 1 );\n\t\t\t\t}\n\n\t\t\t\t// Resolve when we played the last frame; otherwise, reject\n\t\t\t\tif ( gotoEnd ) {\n\t\t\t\t\tdeferred.notifyWith( elem, [ animation, 1, 0 ] );\n\t\t\t\t\tdeferred.resolveWith( elem, [ animation, gotoEnd ] );\n\t\t\t\t} else {\n\t\t\t\t\tdeferred.rejectWith( elem, [ animation, gotoEnd ] );\n\t\t\t\t}\n\t\t\t\treturn this;\n\t\t\t}\n\t\t} ),\n\t\tprops = animation.props;\n\n\tpropFilter( props, animation.opts.specialEasing );\n\n\tfor ( ; index < length; index++ ) {\n\t\tresult = Animation.prefilters[ index ].call( animation, elem, props, animation.opts );\n\t\tif ( result ) {\n\t\t\tif ( jQuery.isFunction( result.stop ) ) {\n\t\t\t\tjQuery._queueHooks( animation.elem, animation.opts.queue ).stop =\n\t\t\t\t\tjQuery.proxy( result.stop, result );\n\t\t\t}\n\t\t\treturn result;\n\t\t}\n\t}\n\n\tjQuery.map( props, createTween, animation );\n\n\tif ( jQuery.isFunction( animation.opts.start ) ) {\n\t\tanimation.opts.start.call( elem, animation );\n\t}\n\n\tjQuery.fx.timer(\n\t\tjQuery.extend( tick, {\n\t\t\telem: elem,\n\t\t\tanim: animation,\n\t\t\tqueue: animation.opts.queue\n\t\t} )\n\t);\n\n\t// attach callbacks from options\n\treturn animation.progress( animation.opts.progress )\n\t\t.done( animation.opts.done, animation.opts.complete )\n\t\t.fail( animation.opts.fail )\n\t\t.always( animation.opts.always );\n}\n\njQuery.Animation = jQuery.extend( Animation, {\n\n\ttweeners: {\n\t\t\"*\": [ function( prop, value ) {\n\t\t\tvar tween = this.createTween( prop, value );\n\t\t\tadjustCSS( tween.elem, prop, rcssNum.exec( value ), tween );\n\t\t\treturn tween;\n\t\t} ]\n\t},\n\n\ttweener: function( props, callback ) {\n\t\tif ( jQuery.isFunction( props ) ) {\n\t\t\tcallback = props;\n\t\t\tprops = [ \"*\" ];\n\t\t} else {\n\t\t\tprops = props.match( rnothtmlwhite );\n\t\t}\n\n\t\tvar prop,\n\t\t\tindex = 0,\n\t\t\tlength = props.length;\n\n\t\tfor ( ; index < length; index++ ) {\n\t\t\tprop = props[ index ];\n\t\t\tAnimation.tweeners[ prop ] = Animation.tweeners[ prop ] || [];\n\t\t\tAnimation.tweeners[ prop ].unshift( callback );\n\t\t}\n\t},\n\n\tprefilters: [ defaultPrefilter ],\n\n\tprefilter: function( callback, prepend ) {\n\t\tif ( prepend ) {\n\t\t\tAnimation.prefilters.unshift( callback );\n\t\t} else {\n\t\t\tAnimation.prefilters.push( callback );\n\t\t}\n\t}\n} );\n\njQuery.speed = function( speed, easing, fn ) {\n\tvar opt = speed && typeof speed === \"object\" ? jQuery.extend( {}, speed ) : {\n\t\tcomplete: fn || !fn && easing ||\n\t\t\tjQuery.isFunction( speed ) && speed,\n\t\tduration: speed,\n\t\teasing: fn && easing || easing && !jQuery.isFunction( easing ) && easing\n\t};\n\n\t// Go to the end state if fx are off or if document is hidden\n\tif ( jQuery.fx.off || document.hidden ) {\n\t\topt.duration = 0;\n\n\t} else {\n\t\tif ( typeof opt.duration !== \"number\" ) {\n\t\t\tif ( opt.duration in jQuery.fx.speeds ) {\n\t\t\t\topt.duration = jQuery.fx.speeds[ opt.duration ];\n\n\t\t\t} else {\n\t\t\t\topt.duration = jQuery.fx.speeds._default;\n\t\t\t}\n\t\t}\n\t}\n\n\t// Normalize opt.queue - true/undefined/null -> \"fx\"\n\tif ( opt.queue == null || opt.queue === true ) {\n\t\topt.queue = \"fx\";\n\t}\n\n\t// Queueing\n\topt.old = opt.complete;\n\n\topt.complete = function() {\n\t\tif ( jQuery.isFunction( opt.old ) ) {\n\t\t\topt.old.call( this );\n\t\t}\n\n\t\tif ( opt.queue ) {\n\t\t\tjQuery.dequeue( this, opt.queue );\n\t\t}\n\t};\n\n\treturn opt;\n};\n\njQuery.fn.extend( {\n\tfadeTo: function( speed, to, easing, callback ) {\n\n\t\t// Show any hidden elements after setting opacity to 0\n\t\treturn this.filter( isHiddenWithinTree ).css( \"opacity\", 0 ).show()\n\n\t\t\t// Animate to the value specified\n\t\t\t.end().animate( { opacity: to }, speed, easing, callback );\n\t},\n\tanimate: function( prop, speed, easing, callback ) {\n\t\tvar empty = jQuery.isEmptyObject( prop ),\n\t\t\toptall = jQuery.speed( speed, easing, callback ),\n\t\t\tdoAnimation = function() {\n\n\t\t\t\t// Operate on a copy of prop so per-property easing won't be lost\n\t\t\t\tvar anim = Animation( this, jQuery.extend( {}, prop ), optall );\n\n\t\t\t\t// Empty animations, or finishing resolves immediately\n\t\t\t\tif ( empty || dataPriv.get( this, \"finish\" ) ) {\n\t\t\t\t\tanim.stop( true );\n\t\t\t\t}\n\t\t\t};\n\t\t\tdoAnimation.finish = doAnimation;\n\n\t\treturn empty || optall.queue === false ?\n\t\t\tthis.each( doAnimation ) :\n\t\t\tthis.queue( optall.queue, doAnimation );\n\t},\n\tstop: function( type, clearQueue, gotoEnd ) {\n\t\tvar stopQueue = function( hooks ) {\n\t\t\tvar stop = hooks.stop;\n\t\t\tdelete hooks.stop;\n\t\t\tstop( gotoEnd );\n\t\t};\n\n\t\tif ( typeof type !== \"string\" ) {\n\t\t\tgotoEnd = clearQueue;\n\t\t\tclearQueue = type;\n\t\t\ttype = undefined;\n\t\t}\n\t\tif ( clearQueue && type !== false ) {\n\t\t\tthis.queue( type || \"fx\", [] );\n\t\t}\n\n\t\treturn this.each( function() {\n\t\t\tvar dequeue = true,\n\t\t\t\tindex = type != null && type + \"queueHooks\",\n\t\t\t\ttimers = jQuery.timers,\n\t\t\t\tdata = dataPriv.get( this );\n\n\t\t\tif ( index ) {\n\t\t\t\tif ( data[ index ] && data[ index ].stop ) {\n\t\t\t\t\tstopQueue( data[ index ] );\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tfor ( index in data ) {\n\t\t\t\t\tif ( data[ index ] && data[ index ].stop && rrun.test( index ) ) {\n\t\t\t\t\t\tstopQueue( data[ index ] );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfor ( index = timers.length; index--; ) {\n\t\t\t\tif ( timers[ index ].elem === this &&\n\t\t\t\t\t( type == null || timers[ index ].queue === type ) ) {\n\n\t\t\t\t\ttimers[ index ].anim.stop( gotoEnd );\n\t\t\t\t\tdequeue = false;\n\t\t\t\t\ttimers.splice( index, 1 );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Start the next in the queue if the last step wasn't forced.\n\t\t\t// Timers currently will call their complete callbacks, which\n\t\t\t// will dequeue but only if they were gotoEnd.\n\t\t\tif ( dequeue || !gotoEnd ) {\n\t\t\t\tjQuery.dequeue( this, type );\n\t\t\t}\n\t\t} );\n\t},\n\tfinish: function( type ) {\n\t\tif ( type !== false ) {\n\t\t\ttype = type || \"fx\";\n\t\t}\n\t\treturn this.each( function() {\n\t\t\tvar index,\n\t\t\t\tdata = dataPriv.get( this ),\n\t\t\t\tqueue = data[ type + \"queue\" ],\n\t\t\t\thooks = data[ type + \"queueHooks\" ],\n\t\t\t\ttimers = jQuery.timers,\n\t\t\t\tlength = queue ? queue.length : 0;\n\n\t\t\t// Enable finishing flag on private data\n\t\t\tdata.finish = true;\n\n\t\t\t// Empty the queue first\n\t\t\tjQuery.queue( this, type, [] );\n\n\t\t\tif ( hooks && hooks.stop ) {\n\t\t\t\thooks.stop.call( this, true );\n\t\t\t}\n\n\t\t\t// Look for any active animations, and finish them\n\t\t\tfor ( index = timers.length; index--; ) {\n\t\t\t\tif ( timers[ index ].elem === this && timers[ index ].queue === type ) {\n\t\t\t\t\ttimers[ index ].anim.stop( true );\n\t\t\t\t\ttimers.splice( index, 1 );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Look for any animations in the old queue and finish them\n\t\t\tfor ( index = 0; index < length; index++ ) {\n\t\t\t\tif ( queue[ index ] && queue[ index ].finish ) {\n\t\t\t\t\tqueue[ index ].finish.call( this );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Turn off finishing flag\n\t\t\tdelete data.finish;\n\t\t} );\n\t}\n} );\n\njQuery.each( [ \"toggle\", \"show\", \"hide\" ], function( i, name ) {\n\tvar cssFn = jQuery.fn[ name ];\n\tjQuery.fn[ name ] = function( speed, easing, callback ) {\n\t\treturn speed == null || typeof speed === \"boolean\" ?\n\t\t\tcssFn.apply( this, arguments ) :\n\t\t\tthis.animate( genFx( name, true ), speed, easing, callback );\n\t};\n} );\n\n// Generate shortcuts for custom animations\njQuery.each( {\n\tslideDown: genFx( \"show\" ),\n\tslideUp: genFx( \"hide\" ),\n\tslideToggle: genFx( \"toggle\" ),\n\tfadeIn: { opacity: \"show\" },\n\tfadeOut: { opacity: \"hide\" },\n\tfadeToggle: { opacity: \"toggle\" }\n}, function( name, props ) {\n\tjQuery.fn[ name ] = function( speed, easing, callback ) {\n\t\treturn this.animate( props, speed, easing, callback );\n\t};\n} );\n\njQuery.timers = [];\njQuery.fx.tick = function() {\n\tvar timer,\n\t\ti = 0,\n\t\ttimers = jQuery.timers;\n\n\tfxNow = jQuery.now();\n\n\tfor ( ; i < timers.length; i++ ) {\n\t\ttimer = timers[ i ];\n\n\t\t// Checks the timer has not already been removed\n\t\tif ( !timer() && timers[ i ] === timer ) {\n\t\t\ttimers.splice( i--, 1 );\n\t\t}\n\t}\n\n\tif ( !timers.length ) {\n\t\tjQuery.fx.stop();\n\t}\n\tfxNow = undefined;\n};\n\njQuery.fx.timer = function( timer ) {\n\tjQuery.timers.push( timer );\n\tif ( timer() ) {\n\t\tjQuery.fx.start();\n\t} else {\n\t\tjQuery.timers.pop();\n\t}\n};\n\njQuery.fx.interval = 13;\njQuery.fx.start = function() {\n\tif ( !timerId ) {\n\t\ttimerId = window.requestAnimationFrame ?\n\t\t\twindow.requestAnimationFrame( raf ) :\n\t\t\twindow.setInterval( jQuery.fx.tick, jQuery.fx.interval );\n\t}\n};\n\njQuery.fx.stop = function() {\n\tif ( window.cancelAnimationFrame ) {\n\t\twindow.cancelAnimationFrame( timerId );\n\t} else {\n\t\twindow.clearInterval( timerId );\n\t}\n\n\ttimerId = null;\n};\n\njQuery.fx.speeds = {\n\tslow: 600,\n\tfast: 200,\n\n\t// Default speed\n\t_default: 400\n};\n\n\n// Based off of the plugin by Clint Helfers, with permission.\n// https://web.archive.org/web/20100324014747/http://blindsignals.com/index.php/2009/07/jquery-delay/\njQuery.fn.delay = function( time, type ) {\n\ttime = jQuery.fx ? jQuery.fx.speeds[ time ] || time : time;\n\ttype = type || \"fx\";\n\n\treturn this.queue( type, function( next, hooks ) {\n\t\tvar timeout = window.setTimeout( next, time );\n\t\thooks.stop = function() {\n\t\t\twindow.clearTimeout( timeout );\n\t\t};\n\t} );\n};\n\n\n( function() {\n\tvar input = document.createElement( \"input\" ),\n\t\tselect = document.createElement( \"select\" ),\n\t\topt = select.appendChild( document.createElement( \"option\" ) );\n\n\tinput.type = \"checkbox\";\n\n\t// Support: Android <=4.3 only\n\t// Default value for a checkbox should be \"on\"\n\tsupport.checkOn = input.value !== \"\";\n\n\t// Support: IE <=11 only\n\t// Must access selectedIndex to make default options select\n\tsupport.optSelected = opt.selected;\n\n\t// Support: IE <=11 only\n\t// An input loses its value after becoming a radio\n\tinput = document.createElement( \"input\" );\n\tinput.value = \"t\";\n\tinput.type = \"radio\";\n\tsupport.radioValue = input.value === \"t\";\n} )();\n\n\nvar boolHook,\n\tattrHandle = jQuery.expr.attrHandle;\n\njQuery.fn.extend( {\n\tattr: function( name, value ) {\n\t\treturn access( this, jQuery.attr, name, value, arguments.length > 1 );\n\t},\n\n\tremoveAttr: function( name ) {\n\t\treturn this.each( function() {\n\t\t\tjQuery.removeAttr( this, name );\n\t\t} );\n\t}\n} );\n\njQuery.extend( {\n\tattr: function( elem, name, value ) {\n\t\tvar ret, hooks,\n\t\t\tnType = elem.nodeType;\n\n\t\t// Don't get/set attributes on text, comment and attribute nodes\n\t\tif ( nType === 3 || nType === 8 || nType === 2 ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Fallback to prop when attributes are not supported\n\t\tif ( typeof elem.getAttribute === \"undefined\" ) {\n\t\t\treturn jQuery.prop( elem, name, value );\n\t\t}\n\n\t\t// Attribute hooks are determined by the lowercase version\n\t\t// Grab necessary hook if one is defined\n\t\tif ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {\n\t\t\thooks = jQuery.attrHooks[ name.toLowerCase() ] ||\n\t\t\t\t( jQuery.expr.match.bool.test( name ) ? boolHook : undefined );\n\t\t}\n\n\t\tif ( value !== undefined ) {\n\t\t\tif ( value === null ) {\n\t\t\t\tjQuery.removeAttr( elem, name );\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif ( hooks && \"set\" in hooks &&\n\t\t\t\t( ret = hooks.set( elem, value, name ) ) !== undefined ) {\n\t\t\t\treturn ret;\n\t\t\t}\n\n\t\t\telem.setAttribute( name, value + \"\" );\n\t\t\treturn value;\n\t\t}\n\n\t\tif ( hooks && \"get\" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {\n\t\t\treturn ret;\n\t\t}\n\n\t\tret = jQuery.find.attr( elem, name );\n\n\t\t// Non-existent attributes return null, we normalize to undefined\n\t\treturn ret == null ? undefined : ret;\n\t},\n\n\tattrHooks: {\n\t\ttype: {\n\t\t\tset: function( elem, value ) {\n\t\t\t\tif ( !support.radioValue && value === \"radio\" &&\n\t\t\t\t\tjQuery.nodeName( elem, \"input\" ) ) {\n\t\t\t\t\tvar val = elem.value;\n\t\t\t\t\telem.setAttribute( \"type\", value );\n\t\t\t\t\tif ( val ) {\n\t\t\t\t\t\telem.value = val;\n\t\t\t\t\t}\n\t\t\t\t\treturn value;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t},\n\n\tremoveAttr: function( elem, value ) {\n\t\tvar name,\n\t\t\ti = 0,\n\n\t\t\t// Attribute names can contain non-HTML whitespace characters\n\t\t\t// https://html.spec.whatwg.org/multipage/syntax.html#attributes-2\n\t\t\tattrNames = value && value.match( rnothtmlwhite );\n\n\t\tif ( attrNames && elem.nodeType === 1 ) {\n\t\t\twhile ( ( name = attrNames[ i++ ] ) ) {\n\t\t\t\telem.removeAttribute( name );\n\t\t\t}\n\t\t}\n\t}\n} );\n\n// Hooks for boolean attributes\nboolHook = {\n\tset: function( elem, value, name ) {\n\t\tif ( value === false ) {\n\n\t\t\t// Remove boolean attributes when set to false\n\t\t\tjQuery.removeAttr( elem, name );\n\t\t} else {\n\t\t\telem.setAttribute( name, name );\n\t\t}\n\t\treturn name;\n\t}\n};\n\njQuery.each( jQuery.expr.match.bool.source.match( /\\w+/g ), function( i, name ) {\n\tvar getter = attrHandle[ name ] || jQuery.find.attr;\n\n\tattrHandle[ name ] = function( elem, name, isXML ) {\n\t\tvar ret, handle,\n\t\t\tlowercaseName = name.toLowerCase();\n\n\t\tif ( !isXML ) {\n\n\t\t\t// Avoid an infinite loop by temporarily removing this function from the getter\n\t\t\thandle = attrHandle[ lowercaseName ];\n\t\t\tattrHandle[ lowercaseName ] = ret;\n\t\t\tret = getter( elem, name, isXML ) != null ?\n\t\t\t\tlowercaseName :\n\t\t\t\tnull;\n\t\t\tattrHandle[ lowercaseName ] = handle;\n\t\t}\n\t\treturn ret;\n\t};\n} );\n\n\n\n\nvar rfocusable = /^(?:input|select|textarea|button)$/i,\n\trclickable = /^(?:a|area)$/i;\n\njQuery.fn.extend( {\n\tprop: function( name, value ) {\n\t\treturn access( this, jQuery.prop, name, value, arguments.length > 1 );\n\t},\n\n\tremoveProp: function( name ) {\n\t\treturn this.each( function() {\n\t\t\tdelete this[ jQuery.propFix[ name ] || name ];\n\t\t} );\n\t}\n} );\n\njQuery.extend( {\n\tprop: function( elem, name, value ) {\n\t\tvar ret, hooks,\n\t\t\tnType = elem.nodeType;\n\n\t\t// Don't get/set properties on text, comment and attribute nodes\n\t\tif ( nType === 3 || nType === 8 || nType === 2 ) {\n\t\t\treturn;\n\t\t}\n\n\t\tif ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {\n\n\t\t\t// Fix name and attach hooks\n\t\t\tname = jQuery.propFix[ name ] || name;\n\t\t\thooks = jQuery.propHooks[ name ];\n\t\t}\n\n\t\tif ( value !== undefined ) {\n\t\t\tif ( hooks && \"set\" in hooks &&\n\t\t\t\t( ret = hooks.set( elem, value, name ) ) !== undefined ) {\n\t\t\t\treturn ret;\n\t\t\t}\n\n\t\t\treturn ( elem[ name ] = value );\n\t\t}\n\n\t\tif ( hooks && \"get\" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {\n\t\t\treturn ret;\n\t\t}\n\n\t\treturn elem[ name ];\n\t},\n\n\tpropHooks: {\n\t\ttabIndex: {\n\t\t\tget: function( elem ) {\n\n\t\t\t\t// Support: IE <=9 - 11 only\n\t\t\t\t// elem.tabIndex doesn't always return the\n\t\t\t\t// correct value when it hasn't been explicitly set\n\t\t\t\t// https://web.archive.org/web/20141116233347/http://fluidproject.org/blog/2008/01/09/getting-setting-and-removing-tabindex-values-with-javascript/\n\t\t\t\t// Use proper attribute retrieval(#12072)\n\t\t\t\tvar tabindex = jQuery.find.attr( elem, \"tabindex\" );\n\n\t\t\t\tif ( tabindex ) {\n\t\t\t\t\treturn parseInt( tabindex, 10 );\n\t\t\t\t}\n\n\t\t\t\tif (\n\t\t\t\t\trfocusable.test( elem.nodeName ) ||\n\t\t\t\t\trclickable.test( elem.nodeName ) &&\n\t\t\t\t\telem.href\n\t\t\t\t) {\n\t\t\t\t\treturn 0;\n\t\t\t\t}\n\n\t\t\t\treturn -1;\n\t\t\t}\n\t\t}\n\t},\n\n\tpropFix: {\n\t\t\"for\": \"htmlFor\",\n\t\t\"class\": \"className\"\n\t}\n} );\n\n// Support: IE <=11 only\n// Accessing the selectedIndex property\n// forces the browser to respect setting selected\n// on the option\n// The getter ensures a default option is selected\n// when in an optgroup\n// eslint rule \"no-unused-expressions\" is disabled for this code\n// since it considers such accessions noop\nif ( !support.optSelected ) {\n\tjQuery.propHooks.selected = {\n\t\tget: function( elem ) {\n\n\t\t\t/* eslint no-unused-expressions: \"off\" */\n\n\t\t\tvar parent = elem.parentNode;\n\t\t\tif ( parent && parent.parentNode ) {\n\t\t\t\tparent.parentNode.selectedIndex;\n\t\t\t}\n\t\t\treturn null;\n\t\t},\n\t\tset: function( elem ) {\n\n\t\t\t/* eslint no-unused-expressions: \"off\" */\n\n\t\t\tvar parent = elem.parentNode;\n\t\t\tif ( parent ) {\n\t\t\t\tparent.selectedIndex;\n\n\t\t\t\tif ( parent.parentNode ) {\n\t\t\t\t\tparent.parentNode.selectedIndex;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n}\n\njQuery.each( [\n\t\"tabIndex\",\n\t\"readOnly\",\n\t\"maxLength\",\n\t\"cellSpacing\",\n\t\"cellPadding\",\n\t\"rowSpan\",\n\t\"colSpan\",\n\t\"useMap\",\n\t\"frameBorder\",\n\t\"contentEditable\"\n], function() {\n\tjQuery.propFix[ this.toLowerCase() ] = this;\n} );\n\n\n\n\n\t// Strip and collapse whitespace according to HTML spec\n\t// https://html.spec.whatwg.org/multipage/infrastructure.html#strip-and-collapse-whitespace\n\tfunction stripAndCollapse( value ) {\n\t\tvar tokens = value.match( rnothtmlwhite ) || [];\n\t\treturn tokens.join( \" \" );\n\t}\n\n\nfunction getClass( elem ) {\n\treturn elem.getAttribute && elem.getAttribute( \"class\" ) || \"\";\n}\n\njQuery.fn.extend( {\n\taddClass: function( value ) {\n\t\tvar classes, elem, cur, curValue, clazz, j, finalValue,\n\t\t\ti = 0;\n\n\t\tif ( jQuery.isFunction( value ) ) {\n\t\t\treturn this.each( function( j ) {\n\t\t\t\tjQuery( this ).addClass( value.call( this, j, getClass( this ) ) );\n\t\t\t} );\n\t\t}\n\n\t\tif ( typeof value === \"string\" && value ) {\n\t\t\tclasses = value.match( rnothtmlwhite ) || [];\n\n\t\t\twhile ( ( elem = this[ i++ ] ) ) {\n\t\t\t\tcurValue = getClass( elem );\n\t\t\t\tcur = elem.nodeType === 1 && ( \" \" + stripAndCollapse( curValue ) + \" \" );\n\n\t\t\t\tif ( cur ) {\n\t\t\t\t\tj = 0;\n\t\t\t\t\twhile ( ( clazz = classes[ j++ ] ) ) {\n\t\t\t\t\t\tif ( cur.indexOf( \" \" + clazz + \" \" ) < 0 ) {\n\t\t\t\t\t\t\tcur += clazz + \" \";\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// Only assign if different to avoid unneeded rendering.\n\t\t\t\t\tfinalValue = stripAndCollapse( cur );\n\t\t\t\t\tif ( curValue !== finalValue ) {\n\t\t\t\t\t\telem.setAttribute( \"class\", finalValue );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn this;\n\t},\n\n\tremoveClass: function( value ) {\n\t\tvar classes, elem, cur, curValue, clazz, j, finalValue,\n\t\t\ti = 0;\n\n\t\tif ( jQuery.isFunction( value ) ) {\n\t\t\treturn this.each( function( j ) {\n\t\t\t\tjQuery( this ).removeClass( value.call( this, j, getClass( this ) ) );\n\t\t\t} );\n\t\t}\n\n\t\tif ( !arguments.length ) {\n\t\t\treturn this.attr( \"class\", \"\" );\n\t\t}\n\n\t\tif ( typeof value === \"string\" && value ) {\n\t\t\tclasses = value.match( rnothtmlwhite ) || [];\n\n\t\t\twhile ( ( elem = this[ i++ ] ) ) {\n\t\t\t\tcurValue = getClass( elem );\n\n\t\t\t\t// This expression is here for better compressibility (see addClass)\n\t\t\t\tcur = elem.nodeType === 1 && ( \" \" + stripAndCollapse( curValue ) + \" \" );\n\n\t\t\t\tif ( cur ) {\n\t\t\t\t\tj = 0;\n\t\t\t\t\twhile ( ( clazz = classes[ j++ ] ) ) {\n\n\t\t\t\t\t\t// Remove *all* instances\n\t\t\t\t\t\twhile ( cur.indexOf( \" \" + clazz + \" \" ) > -1 ) {\n\t\t\t\t\t\t\tcur = cur.replace( \" \" + clazz + \" \", \" \" );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// Only assign if different to avoid unneeded rendering.\n\t\t\t\t\tfinalValue = stripAndCollapse( cur );\n\t\t\t\t\tif ( curValue !== finalValue ) {\n\t\t\t\t\t\telem.setAttribute( \"class\", finalValue );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn this;\n\t},\n\n\ttoggleClass: function( value, stateVal ) {\n\t\tvar type = typeof value;\n\n\t\tif ( typeof stateVal === \"boolean\" && type === \"string\" ) {\n\t\t\treturn stateVal ? this.addClass( value ) : this.removeClass( value );\n\t\t}\n\n\t\tif ( jQuery.isFunction( value ) ) {\n\t\t\treturn this.each( function( i ) {\n\t\t\t\tjQuery( this ).toggleClass(\n\t\t\t\t\tvalue.call( this, i, getClass( this ), stateVal ),\n\t\t\t\t\tstateVal\n\t\t\t\t);\n\t\t\t} );\n\t\t}\n\n\t\treturn this.each( function() {\n\t\t\tvar className, i, self, classNames;\n\n\t\t\tif ( type === \"string\" ) {\n\n\t\t\t\t// Toggle individual class names\n\t\t\t\ti = 0;\n\t\t\t\tself = jQuery( this );\n\t\t\t\tclassNames = value.match( rnothtmlwhite ) || [];\n\n\t\t\t\twhile ( ( className = classNames[ i++ ] ) ) {\n\n\t\t\t\t\t// Check each className given, space separated list\n\t\t\t\t\tif ( self.hasClass( className ) ) {\n\t\t\t\t\t\tself.removeClass( className );\n\t\t\t\t\t} else {\n\t\t\t\t\t\tself.addClass( className );\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t// Toggle whole class name\n\t\t\t} else if ( value === undefined || type === \"boolean\" ) {\n\t\t\t\tclassName = getClass( this );\n\t\t\t\tif ( className ) {\n\n\t\t\t\t\t// Store className if set\n\t\t\t\t\tdataPriv.set( this, \"__className__\", className );\n\t\t\t\t}\n\n\t\t\t\t// If the element has a class name or if we're passed `false`,\n\t\t\t\t// then remove the whole classname (if there was one, the above saved it).\n\t\t\t\t// Otherwise bring back whatever was previously saved (if anything),\n\t\t\t\t// falling back to the empty string if nothing was stored.\n\t\t\t\tif ( this.setAttribute ) {\n\t\t\t\t\tthis.setAttribute( \"class\",\n\t\t\t\t\t\tclassName || value === false ?\n\t\t\t\t\t\t\"\" :\n\t\t\t\t\t\tdataPriv.get( this, \"__className__\" ) || \"\"\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t} );\n\t},\n\n\thasClass: function( selector ) {\n\t\tvar className, elem,\n\t\t\ti = 0;\n\n\t\tclassName = \" \" + selector + \" \";\n\t\twhile ( ( elem = this[ i++ ] ) ) {\n\t\t\tif ( elem.nodeType === 1 &&\n\t\t\t\t( \" \" + stripAndCollapse( getClass( elem ) ) + \" \" ).indexOf( className ) > -1 ) {\n\t\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t}\n} );\n\n\n\n\nvar rreturn = /\\r/g;\n\njQuery.fn.extend( {\n\tval: function( value ) {\n\t\tvar hooks, ret, isFunction,\n\t\t\telem = this[ 0 ];\n\n\t\tif ( !arguments.length ) {\n\t\t\tif ( elem ) {\n\t\t\t\thooks = jQuery.valHooks[ elem.type ] ||\n\t\t\t\t\tjQuery.valHooks[ elem.nodeName.toLowerCase() ];\n\n\t\t\t\tif ( hooks &&\n\t\t\t\t\t\"get\" in hooks &&\n\t\t\t\t\t( ret = hooks.get( elem, \"value\" ) ) !== undefined\n\t\t\t\t) {\n\t\t\t\t\treturn ret;\n\t\t\t\t}\n\n\t\t\t\tret = elem.value;\n\n\t\t\t\t// Handle most common string cases\n\t\t\t\tif ( typeof ret === \"string\" ) {\n\t\t\t\t\treturn ret.replace( rreturn, \"\" );\n\t\t\t\t}\n\n\t\t\t\t// Handle cases where value is null/undef or number\n\t\t\t\treturn ret == null ? \"\" : ret;\n\t\t\t}\n\n\t\t\treturn;\n\t\t}\n\n\t\tisFunction = jQuery.isFunction( value );\n\n\t\treturn this.each( function( i ) {\n\t\t\tvar val;\n\n\t\t\tif ( this.nodeType !== 1 ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif ( isFunction ) {\n\t\t\t\tval = value.call( this, i, jQuery( this ).val() );\n\t\t\t} else {\n\t\t\t\tval = value;\n\t\t\t}\n\n\t\t\t// Treat null/undefined as \"\"; convert numbers to string\n\t\t\tif ( val == null ) {\n\t\t\t\tval = \"\";\n\n\t\t\t} else if ( typeof val === \"number\" ) {\n\t\t\t\tval += \"\";\n\n\t\t\t} else if ( jQuery.isArray( val ) ) {\n\t\t\t\tval = jQuery.map( val, function( value ) {\n\t\t\t\t\treturn value == null ? \"\" : value + \"\";\n\t\t\t\t} );\n\t\t\t}\n\n\t\t\thooks = jQuery.valHooks[ this.type ] || jQuery.valHooks[ this.nodeName.toLowerCase() ];\n\n\t\t\t// If set returns undefined, fall back to normal setting\n\t\t\tif ( !hooks || !( \"set\" in hooks ) || hooks.set( this, val, \"value\" ) === undefined ) {\n\t\t\t\tthis.value = val;\n\t\t\t}\n\t\t} );\n\t}\n} );\n\njQuery.extend( {\n\tvalHooks: {\n\t\toption: {\n\t\t\tget: function( elem ) {\n\n\t\t\t\tvar val = jQuery.find.attr( elem, \"value\" );\n\t\t\t\treturn val != null ?\n\t\t\t\t\tval :\n\n\t\t\t\t\t// Support: IE <=10 - 11 only\n\t\t\t\t\t// option.text throws exceptions (#14686, #14858)\n\t\t\t\t\t// Strip and collapse whitespace\n\t\t\t\t\t// https://html.spec.whatwg.org/#strip-and-collapse-whitespace\n\t\t\t\t\tstripAndCollapse( jQuery.text( elem ) );\n\t\t\t}\n\t\t},\n\t\tselect: {\n\t\t\tget: function( elem ) {\n\t\t\t\tvar value, option, i,\n\t\t\t\t\toptions = elem.options,\n\t\t\t\t\tindex = elem.selectedIndex,\n\t\t\t\t\tone = elem.type === \"select-one\",\n\t\t\t\t\tvalues = one ? null : [],\n\t\t\t\t\tmax = one ? index + 1 : options.length;\n\n\t\t\t\tif ( index < 0 ) {\n\t\t\t\t\ti = max;\n\n\t\t\t\t} else {\n\t\t\t\t\ti = one ? index : 0;\n\t\t\t\t}\n\n\t\t\t\t// Loop through all the selected options\n\t\t\t\tfor ( ; i < max; i++ ) {\n\t\t\t\t\toption = options[ i ];\n\n\t\t\t\t\t// Support: IE <=9 only\n\t\t\t\t\t// IE8-9 doesn't update selected after form reset (#2551)\n\t\t\t\t\tif ( ( option.selected || i === index ) &&\n\n\t\t\t\t\t\t\t// Don't return options that are disabled or in a disabled optgroup\n\t\t\t\t\t\t\t!option.disabled &&\n\t\t\t\t\t\t\t( !option.parentNode.disabled ||\n\t\t\t\t\t\t\t\t!jQuery.nodeName( option.parentNode, \"optgroup\" ) ) ) {\n\n\t\t\t\t\t\t// Get the specific value for the option\n\t\t\t\t\t\tvalue = jQuery( option ).val();\n\n\t\t\t\t\t\t// We don't need an array for one selects\n\t\t\t\t\t\tif ( one ) {\n\t\t\t\t\t\t\treturn value;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Multi-Selects return an array\n\t\t\t\t\t\tvalues.push( value );\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn values;\n\t\t\t},\n\n\t\t\tset: function( elem, value ) {\n\t\t\t\tvar optionSet, option,\n\t\t\t\t\toptions = elem.options,\n\t\t\t\t\tvalues = jQuery.makeArray( value ),\n\t\t\t\t\ti = options.length;\n\n\t\t\t\twhile ( i-- ) {\n\t\t\t\t\toption = options[ i ];\n\n\t\t\t\t\t/* eslint-disable no-cond-assign */\n\n\t\t\t\t\tif ( option.selected =\n\t\t\t\t\t\tjQuery.inArray( jQuery.valHooks.option.get( option ), values ) > -1\n\t\t\t\t\t) {\n\t\t\t\t\t\toptionSet = true;\n\t\t\t\t\t}\n\n\t\t\t\t\t/* eslint-enable no-cond-assign */\n\t\t\t\t}\n\n\t\t\t\t// Force browsers to behave consistently when non-matching value is set\n\t\t\t\tif ( !optionSet ) {\n\t\t\t\t\telem.selectedIndex = -1;\n\t\t\t\t}\n\t\t\t\treturn values;\n\t\t\t}\n\t\t}\n\t}\n} );\n\n// Radios and checkboxes getter/setter\njQuery.each( [ \"radio\", \"checkbox\" ], function() {\n\tjQuery.valHooks[ this ] = {\n\t\tset: function( elem, value ) {\n\t\t\tif ( jQuery.isArray( value ) ) {\n\t\t\t\treturn ( elem.checked = jQuery.inArray( jQuery( elem ).val(), value ) > -1 );\n\t\t\t}\n\t\t}\n\t};\n\tif ( !support.checkOn ) {\n\t\tjQuery.valHooks[ this ].get = function( elem ) {\n\t\t\treturn elem.getAttribute( \"value\" ) === null ? \"on\" : elem.value;\n\t\t};\n\t}\n} );\n\n\n\n\n// Return jQuery for attributes-only inclusion\n\n\nvar rfocusMorph = /^(?:focusinfocus|focusoutblur)$/;\n\njQuery.extend( jQuery.event, {\n\n\ttrigger: function( event, data, elem, onlyHandlers ) {\n\n\t\tvar i, cur, tmp, bubbleType, ontype, handle, special,\n\t\t\teventPath = [ elem || document ],\n\t\t\ttype = hasOwn.call( event, \"type\" ) ? event.type : event,\n\t\t\tnamespaces = hasOwn.call( event, \"namespace\" ) ? event.namespace.split( \".\" ) : [];\n\n\t\tcur = tmp = elem = elem || document;\n\n\t\t// Don't do events on text and comment nodes\n\t\tif ( elem.nodeType === 3 || elem.nodeType === 8 ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// focus/blur morphs to focusin/out; ensure we're not firing them right now\n\t\tif ( rfocusMorph.test( type + jQuery.event.triggered ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tif ( type.indexOf( \".\" ) > -1 ) {\n\n\t\t\t// Namespaced trigger; create a regexp to match event type in handle()\n\t\t\tnamespaces = type.split( \".\" );\n\t\t\ttype = namespaces.shift();\n\t\t\tnamespaces.sort();\n\t\t}\n\t\tontype = type.indexOf( \":\" ) < 0 && \"on\" + type;\n\n\t\t// Caller can pass in a jQuery.Event object, Object, or just an event type string\n\t\tevent = event[ jQuery.expando ] ?\n\t\t\tevent :\n\t\t\tnew jQuery.Event( type, typeof event === \"object\" && event );\n\n\t\t// Trigger bitmask: & 1 for native handlers; & 2 for jQuery (always true)\n\t\tevent.isTrigger = onlyHandlers ? 2 : 3;\n\t\tevent.namespace = namespaces.join( \".\" );\n\t\tevent.rnamespace = event.namespace ?\n\t\t\tnew RegExp( \"(^|\\\\.)\" + namespaces.join( \"\\\\.(?:.*\\\\.|)\" ) + \"(\\\\.|$)\" ) :\n\t\t\tnull;\n\n\t\t// Clean up the event in case it is being reused\n\t\tevent.result = undefined;\n\t\tif ( !event.target ) {\n\t\t\tevent.target = elem;\n\t\t}\n\n\t\t// Clone any incoming data and prepend the event, creating the handler arg list\n\t\tdata = data == null ?\n\t\t\t[ event ] :\n\t\t\tjQuery.makeArray( data, [ event ] );\n\n\t\t// Allow special events to draw outside the lines\n\t\tspecial = jQuery.event.special[ type ] || {};\n\t\tif ( !onlyHandlers && special.trigger && special.trigger.apply( elem, data ) === false ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Determine event propagation path in advance, per W3C events spec (#9951)\n\t\t// Bubble up to document, then to window; watch for a global ownerDocument var (#9724)\n\t\tif ( !onlyHandlers && !special.noBubble && !jQuery.isWindow( elem ) ) {\n\n\t\t\tbubbleType = special.delegateType || type;\n\t\t\tif ( !rfocusMorph.test( bubbleType + type ) ) {\n\t\t\t\tcur = cur.parentNode;\n\t\t\t}\n\t\t\tfor ( ; cur; cur = cur.parentNode ) {\n\t\t\t\teventPath.push( cur );\n\t\t\t\ttmp = cur;\n\t\t\t}\n\n\t\t\t// Only add window if we got to document (e.g., not plain obj or detached DOM)\n\t\t\tif ( tmp === ( elem.ownerDocument || document ) ) {\n\t\t\t\teventPath.push( tmp.defaultView || tmp.parentWindow || window );\n\t\t\t}\n\t\t}\n\n\t\t// Fire handlers on the event path\n\t\ti = 0;\n\t\twhile ( ( cur = eventPath[ i++ ] ) && !event.isPropagationStopped() ) {\n\n\t\t\tevent.type = i > 1 ?\n\t\t\t\tbubbleType :\n\t\t\t\tspecial.bindType || type;\n\n\t\t\t// jQuery handler\n\t\t\thandle = ( dataPriv.get( cur, \"events\" ) || {} )[ event.type ] &&\n\t\t\t\tdataPriv.get( cur, \"handle\" );\n\t\t\tif ( handle ) {\n\t\t\t\thandle.apply( cur, data );\n\t\t\t}\n\n\t\t\t// Native handler\n\t\t\thandle = ontype && cur[ ontype ];\n\t\t\tif ( handle && handle.apply && acceptData( cur ) ) {\n\t\t\t\tevent.result = handle.apply( cur, data );\n\t\t\t\tif ( event.result === false ) {\n\t\t\t\t\tevent.preventDefault();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tevent.type = type;\n\n\t\t// If nobody prevented the default action, do it now\n\t\tif ( !onlyHandlers && !event.isDefaultPrevented() ) {\n\n\t\t\tif ( ( !special._default ||\n\t\t\t\tspecial._default.apply( eventPath.pop(), data ) === false ) &&\n\t\t\t\tacceptData( elem ) ) {\n\n\t\t\t\t// Call a native DOM method on the target with the same name as the event.\n\t\t\t\t// Don't do default actions on window, that's where global variables be (#6170)\n\t\t\t\tif ( ontype && jQuery.isFunction( elem[ type ] ) && !jQuery.isWindow( elem ) ) {\n\n\t\t\t\t\t// Don't re-trigger an onFOO event when we call its FOO() method\n\t\t\t\t\ttmp = elem[ ontype ];\n\n\t\t\t\t\tif ( tmp ) {\n\t\t\t\t\t\telem[ ontype ] = null;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Prevent re-triggering of the same event, since we already bubbled it above\n\t\t\t\t\tjQuery.event.triggered = type;\n\t\t\t\t\telem[ type ]();\n\t\t\t\t\tjQuery.event.triggered = undefined;\n\n\t\t\t\t\tif ( tmp ) {\n\t\t\t\t\t\telem[ ontype ] = tmp;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn event.result;\n\t},\n\n\t// Piggyback on a donor event to simulate a different one\n\t// Used only for `focus(in | out)` events\n\tsimulate: function( type, elem, event ) {\n\t\tvar e = jQuery.extend(\n\t\t\tnew jQuery.Event(),\n\t\t\tevent,\n\t\t\t{\n\t\t\t\ttype: type,\n\t\t\t\tisSimulated: true\n\t\t\t}\n\t\t);\n\n\t\tjQuery.event.trigger( e, null, elem );\n\t}\n\n} );\n\njQuery.fn.extend( {\n\n\ttrigger: function( type, data ) {\n\t\treturn this.each( function() {\n\t\t\tjQuery.event.trigger( type, data, this );\n\t\t} );\n\t},\n\ttriggerHandler: function( type, data ) {\n\t\tvar elem = this[ 0 ];\n\t\tif ( elem ) {\n\t\t\treturn jQuery.event.trigger( type, data, elem, true );\n\t\t}\n\t}\n} );\n\n\njQuery.each( ( \"blur focus focusin focusout resize scroll click dblclick \" +\n\t\"mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave \" +\n\t\"change select submit keydown keypress keyup contextmenu\" ).split( \" \" ),\n\tfunction( i, name ) {\n\n\t// Handle event binding\n\tjQuery.fn[ name ] = function( data, fn ) {\n\t\treturn arguments.length > 0 ?\n\t\t\tthis.on( name, null, data, fn ) :\n\t\t\tthis.trigger( name );\n\t};\n} );\n\njQuery.fn.extend( {\n\thover: function( fnOver, fnOut ) {\n\t\treturn this.mouseenter( fnOver ).mouseleave( fnOut || fnOver );\n\t}\n} );\n\n\n\n\nsupport.focusin = \"onfocusin\" in window;\n\n\n// Support: Firefox <=44\n// Firefox doesn't have focus(in | out) events\n// Related ticket - https://bugzilla.mozilla.org/show_bug.cgi?id=687787\n//\n// Support: Chrome <=48 - 49, Safari <=9.0 - 9.1\n// focus(in | out) events fire after focus & blur events,\n// which is spec violation - http://www.w3.org/TR/DOM-Level-3-Events/#events-focusevent-event-order\n// Related ticket - https://bugs.chromium.org/p/chromium/issues/detail?id=449857\nif ( !support.focusin ) {\n\tjQuery.each( { focus: \"focusin\", blur: \"focusout\" }, function( orig, fix ) {\n\n\t\t// Attach a single capturing handler on the document while someone wants focusin/focusout\n\t\tvar handler = function( event ) {\n\t\t\tjQuery.event.simulate( fix, event.target, jQuery.event.fix( event ) );\n\t\t};\n\n\t\tjQuery.event.special[ fix ] = {\n\t\t\tsetup: function() {\n\t\t\t\tvar doc = this.ownerDocument || this,\n\t\t\t\t\tattaches = dataPriv.access( doc, fix );\n\n\t\t\t\tif ( !attaches ) {\n\t\t\t\t\tdoc.addEventListener( orig, handler, true );\n\t\t\t\t}\n\t\t\t\tdataPriv.access( doc, fix, ( attaches || 0 ) + 1 );\n\t\t\t},\n\t\t\tteardown: function() {\n\t\t\t\tvar doc = this.ownerDocument || this,\n\t\t\t\t\tattaches = dataPriv.access( doc, fix ) - 1;\n\n\t\t\t\tif ( !attaches ) {\n\t\t\t\t\tdoc.removeEventListener( orig, handler, true );\n\t\t\t\t\tdataPriv.remove( doc, fix );\n\n\t\t\t\t} else {\n\t\t\t\t\tdataPriv.access( doc, fix, attaches );\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t} );\n}\nvar location = window.location;\n\nvar nonce = jQuery.now();\n\nvar rquery = ( /\\?/ );\n\n\n\n// Cross-browser xml parsing\njQuery.parseXML = function( data ) {\n\tvar xml;\n\tif ( !data || typeof data !== \"string\" ) {\n\t\treturn null;\n\t}\n\n\t// Support: IE 9 - 11 only\n\t// IE throws on parseFromString with invalid input.\n\ttry {\n\t\txml = ( new window.DOMParser() ).parseFromString( data, \"text/xml\" );\n\t} catch ( e ) {\n\t\txml = undefined;\n\t}\n\n\tif ( !xml || xml.getElementsByTagName( \"parsererror\" ).length ) {\n\t\tjQuery.error( \"Invalid XML: \" + data );\n\t}\n\treturn xml;\n};\n\n\nvar\n\trbracket = /\\[\\]$/,\n\trCRLF = /\\r?\\n/g,\n\trsubmitterTypes = /^(?:submit|button|image|reset|file)$/i,\n\trsubmittable = /^(?:input|select|textarea|keygen)/i;\n\nfunction buildParams( prefix, obj, traditional, add ) {\n\tvar name;\n\n\tif ( jQuery.isArray( obj ) ) {\n\n\t\t// Serialize array item.\n\t\tjQuery.each( obj, function( i, v ) {\n\t\t\tif ( traditional || rbracket.test( prefix ) ) {\n\n\t\t\t\t// Treat each array item as a scalar.\n\t\t\t\tadd( prefix, v );\n\n\t\t\t} else {\n\n\t\t\t\t// Item is non-scalar (array or object), encode its numeric index.\n\t\t\t\tbuildParams(\n\t\t\t\t\tprefix + \"[\" + ( typeof v === \"object\" && v != null ? i : \"\" ) + \"]\",\n\t\t\t\t\tv,\n\t\t\t\t\ttraditional,\n\t\t\t\t\tadd\n\t\t\t\t);\n\t\t\t}\n\t\t} );\n\n\t} else if ( !traditional && jQuery.type( obj ) === \"object\" ) {\n\n\t\t// Serialize object item.\n\t\tfor ( name in obj ) {\n\t\t\tbuildParams( prefix + \"[\" + name + \"]\", obj[ name ], traditional, add );\n\t\t}\n\n\t} else {\n\n\t\t// Serialize scalar item.\n\t\tadd( prefix, obj );\n\t}\n}\n\n// Serialize an array of form elements or a set of\n// key/values into a query string\njQuery.param = function( a, traditional ) {\n\tvar prefix,\n\t\ts = [],\n\t\tadd = function( key, valueOrFunction ) {\n\n\t\t\t// If value is a function, invoke it and use its return value\n\t\t\tvar value = jQuery.isFunction( valueOrFunction ) ?\n\t\t\t\tvalueOrFunction() :\n\t\t\t\tvalueOrFunction;\n\n\t\t\ts[ s.length ] = encodeURIComponent( key ) + \"=\" +\n\t\t\t\tencodeURIComponent( value == null ? \"\" : value );\n\t\t};\n\n\t// If an array was passed in, assume that it is an array of form elements.\n\tif ( jQuery.isArray( a ) || ( a.jquery && !jQuery.isPlainObject( a ) ) ) {\n\n\t\t// Serialize the form elements\n\t\tjQuery.each( a, function() {\n\t\t\tadd( this.name, this.value );\n\t\t} );\n\n\t} else {\n\n\t\t// If traditional, encode the \"old\" way (the way 1.3.2 or older\n\t\t// did it), otherwise encode params recursively.\n\t\tfor ( prefix in a ) {\n\t\t\tbuildParams( prefix, a[ prefix ], traditional, add );\n\t\t}\n\t}\n\n\t// Return the resulting serialization\n\treturn s.join( \"&\" );\n};\n\njQuery.fn.extend( {\n\tserialize: function() {\n\t\treturn jQuery.param( this.serializeArray() );\n\t},\n\tserializeArray: function() {\n\t\treturn this.map( function() {\n\n\t\t\t// Can add propHook for \"elements\" to filter or add form elements\n\t\t\tvar elements = jQuery.prop( this, \"elements\" );\n\t\t\treturn elements ? jQuery.makeArray( elements ) : this;\n\t\t} )\n\t\t.filter( function() {\n\t\t\tvar type = this.type;\n\n\t\t\t// Use .is( \":disabled\" ) so that fieldset[disabled] works\n\t\t\treturn this.name && !jQuery( this ).is( \":disabled\" ) &&\n\t\t\t\trsubmittable.test( this.nodeName ) && !rsubmitterTypes.test( type ) &&\n\t\t\t\t( this.checked || !rcheckableType.test( type ) );\n\t\t} )\n\t\t.map( function( i, elem ) {\n\t\t\tvar val = jQuery( this ).val();\n\n\t\t\tif ( val == null ) {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\tif ( jQuery.isArray( val ) ) {\n\t\t\t\treturn jQuery.map( val, function( val ) {\n\t\t\t\t\treturn { name: elem.name, value: val.replace( rCRLF, \"\\r\\n\" ) };\n\t\t\t\t} );\n\t\t\t}\n\n\t\t\treturn { name: elem.name, value: val.replace( rCRLF, \"\\r\\n\" ) };\n\t\t} ).get();\n\t}\n} );\n\n\nvar\n\tr20 = /%20/g,\n\trhash = /#.*$/,\n\trantiCache = /([?&])_=[^&]*/,\n\trheaders = /^(.*?):[ \\t]*([^\\r\\n]*)$/mg,\n\n\t// #7653, #8125, #8152: local protocol detection\n\trlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,\n\trnoContent = /^(?:GET|HEAD)$/,\n\trprotocol = /^\\/\\//,\n\n\t/* Prefilters\n\t * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)\n\t * 2) These are called:\n\t *    - BEFORE asking for a transport\n\t *    - AFTER param serialization (s.data is a string if s.processData is true)\n\t * 3) key is the dataType\n\t * 4) the catchall symbol \"*\" can be used\n\t * 5) execution will start with transport dataType and THEN continue down to \"*\" if needed\n\t */\n\tprefilters = {},\n\n\t/* Transports bindings\n\t * 1) key is the dataType\n\t * 2) the catchall symbol \"*\" can be used\n\t * 3) selection will start with transport dataType and THEN go to \"*\" if needed\n\t */\n\ttransports = {},\n\n\t// Avoid comment-prolog char sequence (#10098); must appease lint and evade compression\n\tallTypes = \"*/\".concat( \"*\" ),\n\n\t// Anchor tag for parsing the document origin\n\toriginAnchor = document.createElement( \"a\" );\n\toriginAnchor.href = location.href;\n\n// Base \"constructor\" for jQuery.ajaxPrefilter and jQuery.ajaxTransport\nfunction addToPrefiltersOrTransports( structure ) {\n\n\t// dataTypeExpression is optional and defaults to \"*\"\n\treturn function( dataTypeExpression, func ) {\n\n\t\tif ( typeof dataTypeExpression !== \"string\" ) {\n\t\t\tfunc = dataTypeExpression;\n\t\t\tdataTypeExpression = \"*\";\n\t\t}\n\n\t\tvar dataType,\n\t\t\ti = 0,\n\t\t\tdataTypes = dataTypeExpression.toLowerCase().match( rnothtmlwhite ) || [];\n\n\t\tif ( jQuery.isFunction( func ) ) {\n\n\t\t\t// For each dataType in the dataTypeExpression\n\t\t\twhile ( ( dataType = dataTypes[ i++ ] ) ) {\n\n\t\t\t\t// Prepend if requested\n\t\t\t\tif ( dataType[ 0 ] === \"+\" ) {\n\t\t\t\t\tdataType = dataType.slice( 1 ) || \"*\";\n\t\t\t\t\t( structure[ dataType ] = structure[ dataType ] || [] ).unshift( func );\n\n\t\t\t\t// Otherwise append\n\t\t\t\t} else {\n\t\t\t\t\t( structure[ dataType ] = structure[ dataType ] || [] ).push( func );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n}\n\n// Base inspection function for prefilters and transports\nfunction inspectPrefiltersOrTransports( structure, options, originalOptions, jqXHR ) {\n\n\tvar inspected = {},\n\t\tseekingTransport = ( structure === transports );\n\n\tfunction inspect( dataType ) {\n\t\tvar selected;\n\t\tinspected[ dataType ] = true;\n\t\tjQuery.each( structure[ dataType ] || [], function( _, prefilterOrFactory ) {\n\t\t\tvar dataTypeOrTransport = prefilterOrFactory( options, originalOptions, jqXHR );\n\t\t\tif ( typeof dataTypeOrTransport === \"string\" &&\n\t\t\t\t!seekingTransport && !inspected[ dataTypeOrTransport ] ) {\n\n\t\t\t\toptions.dataTypes.unshift( dataTypeOrTransport );\n\t\t\t\tinspect( dataTypeOrTransport );\n\t\t\t\treturn false;\n\t\t\t} else if ( seekingTransport ) {\n\t\t\t\treturn !( selected = dataTypeOrTransport );\n\t\t\t}\n\t\t} );\n\t\treturn selected;\n\t}\n\n\treturn inspect( options.dataTypes[ 0 ] ) || !inspected[ \"*\" ] && inspect( \"*\" );\n}\n\n// A special extend for ajax options\n// that takes \"flat\" options (not to be deep extended)\n// Fixes #9887\nfunction ajaxExtend( target, src ) {\n\tvar key, deep,\n\t\tflatOptions = jQuery.ajaxSettings.flatOptions || {};\n\n\tfor ( key in src ) {\n\t\tif ( src[ key ] !== undefined ) {\n\t\t\t( flatOptions[ key ] ? target : ( deep || ( deep = {} ) ) )[ key ] = src[ key ];\n\t\t}\n\t}\n\tif ( deep ) {\n\t\tjQuery.extend( true, target, deep );\n\t}\n\n\treturn target;\n}\n\n/* Handles responses to an ajax request:\n * - finds the right dataType (mediates between content-type and expected dataType)\n * - returns the corresponding response\n */\nfunction ajaxHandleResponses( s, jqXHR, responses ) {\n\n\tvar ct, type, finalDataType, firstDataType,\n\t\tcontents = s.contents,\n\t\tdataTypes = s.dataTypes;\n\n\t// Remove auto dataType and get content-type in the process\n\twhile ( dataTypes[ 0 ] === \"*\" ) {\n\t\tdataTypes.shift();\n\t\tif ( ct === undefined ) {\n\t\t\tct = s.mimeType || jqXHR.getResponseHeader( \"Content-Type\" );\n\t\t}\n\t}\n\n\t// Check if we're dealing with a known content-type\n\tif ( ct ) {\n\t\tfor ( type in contents ) {\n\t\t\tif ( contents[ type ] && contents[ type ].test( ct ) ) {\n\t\t\t\tdataTypes.unshift( type );\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\n\t// Check to see if we have a response for the expected dataType\n\tif ( dataTypes[ 0 ] in responses ) {\n\t\tfinalDataType = dataTypes[ 0 ];\n\t} else {\n\n\t\t// Try convertible dataTypes\n\t\tfor ( type in responses ) {\n\t\t\tif ( !dataTypes[ 0 ] || s.converters[ type + \" \" + dataTypes[ 0 ] ] ) {\n\t\t\t\tfinalDataType = type;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif ( !firstDataType ) {\n\t\t\t\tfirstDataType = type;\n\t\t\t}\n\t\t}\n\n\t\t// Or just use first one\n\t\tfinalDataType = finalDataType || firstDataType;\n\t}\n\n\t// If we found a dataType\n\t// We add the dataType to the list if needed\n\t// and return the corresponding response\n\tif ( finalDataType ) {\n\t\tif ( finalDataType !== dataTypes[ 0 ] ) {\n\t\t\tdataTypes.unshift( finalDataType );\n\t\t}\n\t\treturn responses[ finalDataType ];\n\t}\n}\n\n/* Chain conversions given the request and the original response\n * Also sets the responseXXX fields on the jqXHR instance\n */\nfunction ajaxConvert( s, response, jqXHR, isSuccess ) {\n\tvar conv2, current, conv, tmp, prev,\n\t\tconverters = {},\n\n\t\t// Work with a copy of dataTypes in case we need to modify it for conversion\n\t\tdataTypes = s.dataTypes.slice();\n\n\t// Create converters map with lowercased keys\n\tif ( dataTypes[ 1 ] ) {\n\t\tfor ( conv in s.converters ) {\n\t\t\tconverters[ conv.toLowerCase() ] = s.converters[ conv ];\n\t\t}\n\t}\n\n\tcurrent = dataTypes.shift();\n\n\t// Convert to each sequential dataType\n\twhile ( current ) {\n\n\t\tif ( s.responseFields[ current ] ) {\n\t\t\tjqXHR[ s.responseFields[ current ] ] = response;\n\t\t}\n\n\t\t// Apply the dataFilter if provided\n\t\tif ( !prev && isSuccess && s.dataFilter ) {\n\t\t\tresponse = s.dataFilter( response, s.dataType );\n\t\t}\n\n\t\tprev = current;\n\t\tcurrent = dataTypes.shift();\n\n\t\tif ( current ) {\n\n\t\t\t// There's only work to do if current dataType is non-auto\n\t\t\tif ( current === \"*\" ) {\n\n\t\t\t\tcurrent = prev;\n\n\t\t\t// Convert response if prev dataType is non-auto and differs from current\n\t\t\t} else if ( prev !== \"*\" && prev !== current ) {\n\n\t\t\t\t// Seek a direct converter\n\t\t\t\tconv = converters[ prev + \" \" + current ] || converters[ \"* \" + current ];\n\n\t\t\t\t// If none found, seek a pair\n\t\t\t\tif ( !conv ) {\n\t\t\t\t\tfor ( conv2 in converters ) {\n\n\t\t\t\t\t\t// If conv2 outputs current\n\t\t\t\t\t\ttmp = conv2.split( \" \" );\n\t\t\t\t\t\tif ( tmp[ 1 ] === current ) {\n\n\t\t\t\t\t\t\t// If prev can be converted to accepted input\n\t\t\t\t\t\t\tconv = converters[ prev + \" \" + tmp[ 0 ] ] ||\n\t\t\t\t\t\t\t\tconverters[ \"* \" + tmp[ 0 ] ];\n\t\t\t\t\t\t\tif ( conv ) {\n\n\t\t\t\t\t\t\t\t// Condense equivalence converters\n\t\t\t\t\t\t\t\tif ( conv === true ) {\n\t\t\t\t\t\t\t\t\tconv = converters[ conv2 ];\n\n\t\t\t\t\t\t\t\t// Otherwise, insert the intermediate dataType\n\t\t\t\t\t\t\t\t} else if ( converters[ conv2 ] !== true ) {\n\t\t\t\t\t\t\t\t\tcurrent = tmp[ 0 ];\n\t\t\t\t\t\t\t\t\tdataTypes.unshift( tmp[ 1 ] );\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Apply converter (if not an equivalence)\n\t\t\t\tif ( conv !== true ) {\n\n\t\t\t\t\t// Unless errors are allowed to bubble, catch and return them\n\t\t\t\t\tif ( conv && s.throws ) {\n\t\t\t\t\t\tresponse = conv( response );\n\t\t\t\t\t} else {\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tresponse = conv( response );\n\t\t\t\t\t\t} catch ( e ) {\n\t\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\tstate: \"parsererror\",\n\t\t\t\t\t\t\t\terror: conv ? e : \"No conversion from \" + prev + \" to \" + current\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn { state: \"success\", data: response };\n}\n\njQuery.extend( {\n\n\t// Counter for holding the number of active queries\n\tactive: 0,\n\n\t// Last-Modified header cache for next request\n\tlastModified: {},\n\tetag: {},\n\n\tajaxSettings: {\n\t\turl: location.href,\n\t\ttype: \"GET\",\n\t\tisLocal: rlocalProtocol.test( location.protocol ),\n\t\tglobal: true,\n\t\tprocessData: true,\n\t\tasync: true,\n\t\tcontentType: \"application/x-www-form-urlencoded; charset=UTF-8\",\n\n\t\t/*\n\t\ttimeout: 0,\n\t\tdata: null,\n\t\tdataType: null,\n\t\tusername: null,\n\t\tpassword: null,\n\t\tcache: null,\n\t\tthrows: false,\n\t\ttraditional: false,\n\t\theaders: {},\n\t\t*/\n\n\t\taccepts: {\n\t\t\t\"*\": allTypes,\n\t\t\ttext: \"text/plain\",\n\t\t\thtml: \"text/html\",\n\t\t\txml: \"application/xml, text/xml\",\n\t\t\tjson: \"application/json, text/javascript\"\n\t\t},\n\n\t\tcontents: {\n\t\t\txml: /\\bxml\\b/,\n\t\t\thtml: /\\bhtml/,\n\t\t\tjson: /\\bjson\\b/\n\t\t},\n\n\t\tresponseFields: {\n\t\t\txml: \"responseXML\",\n\t\t\ttext: \"responseText\",\n\t\t\tjson: \"responseJSON\"\n\t\t},\n\n\t\t// Data converters\n\t\t// Keys separate source (or catchall \"*\") and destination types with a single space\n\t\tconverters: {\n\n\t\t\t// Convert anything to text\n\t\t\t\"* text\": String,\n\n\t\t\t// Text to html (true = no transformation)\n\t\t\t\"text html\": true,\n\n\t\t\t// Evaluate text as a json expression\n\t\t\t\"text json\": JSON.parse,\n\n\t\t\t// Parse text as xml\n\t\t\t\"text xml\": jQuery.parseXML\n\t\t},\n\n\t\t// For options that shouldn't be deep extended:\n\t\t// you can add your own custom options here if\n\t\t// and when you create one that shouldn't be\n\t\t// deep extended (see ajaxExtend)\n\t\tflatOptions: {\n\t\t\turl: true,\n\t\t\tcontext: true\n\t\t}\n\t},\n\n\t// Creates a full fledged settings object into target\n\t// with both ajaxSettings and settings fields.\n\t// If target is omitted, writes into ajaxSettings.\n\tajaxSetup: function( target, settings ) {\n\t\treturn settings ?\n\n\t\t\t// Building a settings object\n\t\t\tajaxExtend( ajaxExtend( target, jQuery.ajaxSettings ), settings ) :\n\n\t\t\t// Extending ajaxSettings\n\t\t\tajaxExtend( jQuery.ajaxSettings, target );\n\t},\n\n\tajaxPrefilter: addToPrefiltersOrTransports( prefilters ),\n\tajaxTransport: addToPrefiltersOrTransports( transports ),\n\n\t// Main method\n\tajax: function( url, options ) {\n\n\t\t// If url is an object, simulate pre-1.5 signature\n\t\tif ( typeof url === \"object\" ) {\n\t\t\toptions = url;\n\t\t\turl = undefined;\n\t\t}\n\n\t\t// Force options to be an object\n\t\toptions = options || {};\n\n\t\tvar transport,\n\n\t\t\t// URL without anti-cache param\n\t\t\tcacheURL,\n\n\t\t\t// Response headers\n\t\t\tresponseHeadersString,\n\t\t\tresponseHeaders,\n\n\t\t\t// timeout handle\n\t\t\ttimeoutTimer,\n\n\t\t\t// Url cleanup var\n\t\t\turlAnchor,\n\n\t\t\t// Request state (becomes false upon send and true upon completion)\n\t\t\tcompleted,\n\n\t\t\t// To know if global events are to be dispatched\n\t\t\tfireGlobals,\n\n\t\t\t// Loop variable\n\t\t\ti,\n\n\t\t\t// uncached part of the url\n\t\t\tuncached,\n\n\t\t\t// Create the final options object\n\t\t\ts = jQuery.ajaxSetup( {}, options ),\n\n\t\t\t// Callbacks context\n\t\t\tcallbackContext = s.context || s,\n\n\t\t\t// Context for global events is callbackContext if it is a DOM node or jQuery collection\n\t\t\tglobalEventContext = s.context &&\n\t\t\t\t( callbackContext.nodeType || callbackContext.jquery ) ?\n\t\t\t\t\tjQuery( callbackContext ) :\n\t\t\t\t\tjQuery.event,\n\n\t\t\t// Deferreds\n\t\t\tdeferred = jQuery.Deferred(),\n\t\t\tcompleteDeferred = jQuery.Callbacks( \"once memory\" ),\n\n\t\t\t// Status-dependent callbacks\n\t\t\tstatusCode = s.statusCode || {},\n\n\t\t\t// Headers (they are sent all at once)\n\t\t\trequestHeaders = {},\n\t\t\trequestHeadersNames = {},\n\n\t\t\t// Default abort message\n\t\t\tstrAbort = \"canceled\",\n\n\t\t\t// Fake xhr\n\t\t\tjqXHR = {\n\t\t\t\treadyState: 0,\n\n\t\t\t\t// Builds headers hashtable if needed\n\t\t\t\tgetResponseHeader: function( key ) {\n\t\t\t\t\tvar match;\n\t\t\t\t\tif ( completed ) {\n\t\t\t\t\t\tif ( !responseHeaders ) {\n\t\t\t\t\t\t\tresponseHeaders = {};\n\t\t\t\t\t\t\twhile ( ( match = rheaders.exec( responseHeadersString ) ) ) {\n\t\t\t\t\t\t\t\tresponseHeaders[ match[ 1 ].toLowerCase() ] = match[ 2 ];\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tmatch = responseHeaders[ key.toLowerCase() ];\n\t\t\t\t\t}\n\t\t\t\t\treturn match == null ? null : match;\n\t\t\t\t},\n\n\t\t\t\t// Raw string\n\t\t\t\tgetAllResponseHeaders: function() {\n\t\t\t\t\treturn completed ? responseHeadersString : null;\n\t\t\t\t},\n\n\t\t\t\t// Caches the header\n\t\t\t\tsetRequestHeader: function( name, value ) {\n\t\t\t\t\tif ( completed == null ) {\n\t\t\t\t\t\tname = requestHeadersNames[ name.toLowerCase() ] =\n\t\t\t\t\t\t\trequestHeadersNames[ name.toLowerCase() ] || name;\n\t\t\t\t\t\trequestHeaders[ name ] = value;\n\t\t\t\t\t}\n\t\t\t\t\treturn this;\n\t\t\t\t},\n\n\t\t\t\t// Overrides response content-type header\n\t\t\t\toverrideMimeType: function( type ) {\n\t\t\t\t\tif ( completed == null ) {\n\t\t\t\t\t\ts.mimeType = type;\n\t\t\t\t\t}\n\t\t\t\t\treturn this;\n\t\t\t\t},\n\n\t\t\t\t// Status-dependent callbacks\n\t\t\t\tstatusCode: function( map ) {\n\t\t\t\t\tvar code;\n\t\t\t\t\tif ( map ) {\n\t\t\t\t\t\tif ( completed ) {\n\n\t\t\t\t\t\t\t// Execute the appropriate callbacks\n\t\t\t\t\t\t\tjqXHR.always( map[ jqXHR.status ] );\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t// Lazy-add the new callbacks in a way that preserves old ones\n\t\t\t\t\t\t\tfor ( code in map ) {\n\t\t\t\t\t\t\t\tstatusCode[ code ] = [ statusCode[ code ], map[ code ] ];\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\treturn this;\n\t\t\t\t},\n\n\t\t\t\t// Cancel the request\n\t\t\t\tabort: function( statusText ) {\n\t\t\t\t\tvar finalText = statusText || strAbort;\n\t\t\t\t\tif ( transport ) {\n\t\t\t\t\t\ttransport.abort( finalText );\n\t\t\t\t\t}\n\t\t\t\t\tdone( 0, finalText );\n\t\t\t\t\treturn this;\n\t\t\t\t}\n\t\t\t};\n\n\t\t// Attach deferreds\n\t\tdeferred.promise( jqXHR );\n\n\t\t// Add protocol if not provided (prefilters might expect it)\n\t\t// Handle falsy url in the settings object (#10093: consistency with old signature)\n\t\t// We also use the url parameter if available\n\t\ts.url = ( ( url || s.url || location.href ) + \"\" )\n\t\t\t.replace( rprotocol, location.protocol + \"//\" );\n\n\t\t// Alias method option to type as per ticket #12004\n\t\ts.type = options.method || options.type || s.method || s.type;\n\n\t\t// Extract dataTypes list\n\t\ts.dataTypes = ( s.dataType || \"*\" ).toLowerCase().match( rnothtmlwhite ) || [ \"\" ];\n\n\t\t// A cross-domain request is in order when the origin doesn't match the current origin.\n\t\tif ( s.crossDomain == null ) {\n\t\t\turlAnchor = document.createElement( \"a\" );\n\n\t\t\t// Support: IE <=8 - 11, Edge 12 - 13\n\t\t\t// IE throws exception on accessing the href property if url is malformed,\n\t\t\t// e.g. http://example.com:80x/\n\t\t\ttry {\n\t\t\t\turlAnchor.href = s.url;\n\n\t\t\t\t// Support: IE <=8 - 11 only\n\t\t\t\t// Anchor's host property isn't correctly set when s.url is relative\n\t\t\t\turlAnchor.href = urlAnchor.href;\n\t\t\t\ts.crossDomain = originAnchor.protocol + \"//\" + originAnchor.host !==\n\t\t\t\t\turlAnchor.protocol + \"//\" + urlAnchor.host;\n\t\t\t} catch ( e ) {\n\n\t\t\t\t// If there is an error parsing the URL, assume it is crossDomain,\n\t\t\t\t// it can be rejected by the transport if it is invalid\n\t\t\t\ts.crossDomain = true;\n\t\t\t}\n\t\t}\n\n\t\t// Convert data if not already a string\n\t\tif ( s.data && s.processData && typeof s.data !== \"string\" ) {\n\t\t\ts.data = jQuery.param( s.data, s.traditional );\n\t\t}\n\n\t\t// Apply prefilters\n\t\tinspectPrefiltersOrTransports( prefilters, s, options, jqXHR );\n\n\t\t// If request was aborted inside a prefilter, stop there\n\t\tif ( completed ) {\n\t\t\treturn jqXHR;\n\t\t}\n\n\t\t// We can fire global events as of now if asked to\n\t\t// Don't fire events if jQuery.event is undefined in an AMD-usage scenario (#15118)\n\t\tfireGlobals = jQuery.event && s.global;\n\n\t\t// Watch for a new set of requests\n\t\tif ( fireGlobals && jQuery.active++ === 0 ) {\n\t\t\tjQuery.event.trigger( \"ajaxStart\" );\n\t\t}\n\n\t\t// Uppercase the type\n\t\ts.type = s.type.toUpperCase();\n\n\t\t// Determine if request has content\n\t\ts.hasContent = !rnoContent.test( s.type );\n\n\t\t// Save the URL in case we're toying with the If-Modified-Since\n\t\t// and/or If-None-Match header later on\n\t\t// Remove hash to simplify url manipulation\n\t\tcacheURL = s.url.replace( rhash, \"\" );\n\n\t\t// More options handling for requests with no content\n\t\tif ( !s.hasContent ) {\n\n\t\t\t// Remember the hash so we can put it back\n\t\t\tuncached = s.url.slice( cacheURL.length );\n\n\t\t\t// If data is available, append data to url\n\t\t\tif ( s.data ) {\n\t\t\t\tcacheURL += ( rquery.test( cacheURL ) ? \"&\" : \"?\" ) + s.data;\n\n\t\t\t\t// #9682: remove data so that it's not used in an eventual retry\n\t\t\t\tdelete s.data;\n\t\t\t}\n\n\t\t\t// Add or update anti-cache param if needed\n\t\t\tif ( s.cache === false ) {\n\t\t\t\tcacheURL = cacheURL.replace( rantiCache, \"$1\" );\n\t\t\t\tuncached = ( rquery.test( cacheURL ) ? \"&\" : \"?\" ) + \"_=\" + ( nonce++ ) + uncached;\n\t\t\t}\n\n\t\t\t// Put hash and anti-cache on the URL that will be requested (gh-1732)\n\t\t\ts.url = cacheURL + uncached;\n\n\t\t// Change '%20' to '+' if this is encoded form body content (gh-2658)\n\t\t} else if ( s.data && s.processData &&\n\t\t\t( s.contentType || \"\" ).indexOf( \"application/x-www-form-urlencoded\" ) === 0 ) {\n\t\t\ts.data = s.data.replace( r20, \"+\" );\n\t\t}\n\n\t\t// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.\n\t\tif ( s.ifModified ) {\n\t\t\tif ( jQuery.lastModified[ cacheURL ] ) {\n\t\t\t\tjqXHR.setRequestHeader( \"If-Modified-Since\", jQuery.lastModified[ cacheURL ] );\n\t\t\t}\n\t\t\tif ( jQuery.etag[ cacheURL ] ) {\n\t\t\t\tjqXHR.setRequestHeader( \"If-None-Match\", jQuery.etag[ cacheURL ] );\n\t\t\t}\n\t\t}\n\n\t\t// Set the correct header, if data is being sent\n\t\tif ( s.data && s.hasContent && s.contentType !== false || options.contentType ) {\n\t\t\tjqXHR.setRequestHeader( \"Content-Type\", s.contentType );\n\t\t}\n\n\t\t// Set the Accepts header for the server, depending on the dataType\n\t\tjqXHR.setRequestHeader(\n\t\t\t\"Accept\",\n\t\t\ts.dataTypes[ 0 ] && s.accepts[ s.dataTypes[ 0 ] ] ?\n\t\t\t\ts.accepts[ s.dataTypes[ 0 ] ] +\n\t\t\t\t\t( s.dataTypes[ 0 ] !== \"*\" ? \", \" + allTypes + \"; q=0.01\" : \"\" ) :\n\t\t\t\ts.accepts[ \"*\" ]\n\t\t);\n\n\t\t// Check for headers option\n\t\tfor ( i in s.headers ) {\n\t\t\tjqXHR.setRequestHeader( i, s.headers[ i ] );\n\t\t}\n\n\t\t// Allow custom headers/mimetypes and early abort\n\t\tif ( s.beforeSend &&\n\t\t\t( s.beforeSend.call( callbackContext, jqXHR, s ) === false || completed ) ) {\n\n\t\t\t// Abort if not done already and return\n\t\t\treturn jqXHR.abort();\n\t\t}\n\n\t\t// Aborting is no longer a cancellation\n\t\tstrAbort = \"abort\";\n\n\t\t// Install callbacks on deferreds\n\t\tcompleteDeferred.add( s.complete );\n\t\tjqXHR.done( s.success );\n\t\tjqXHR.fail( s.error );\n\n\t\t// Get transport\n\t\ttransport = inspectPrefiltersOrTransports( transports, s, options, jqXHR );\n\n\t\t// If no transport, we auto-abort\n\t\tif ( !transport ) {\n\t\t\tdone( -1, \"No Transport\" );\n\t\t} else {\n\t\t\tjqXHR.readyState = 1;\n\n\t\t\t// Send global event\n\t\t\tif ( fireGlobals ) {\n\t\t\t\tglobalEventContext.trigger( \"ajaxSend\", [ jqXHR, s ] );\n\t\t\t}\n\n\t\t\t// If request was aborted inside ajaxSend, stop there\n\t\t\tif ( completed ) {\n\t\t\t\treturn jqXHR;\n\t\t\t}\n\n\t\t\t// Timeout\n\t\t\tif ( s.async && s.timeout > 0 ) {\n\t\t\t\ttimeoutTimer = window.setTimeout( function() {\n\t\t\t\t\tjqXHR.abort( \"timeout\" );\n\t\t\t\t}, s.timeout );\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tcompleted = false;\n\t\t\t\ttransport.send( requestHeaders, done );\n\t\t\t} catch ( e ) {\n\n\t\t\t\t// Rethrow post-completion exceptions\n\t\t\t\tif ( completed ) {\n\t\t\t\t\tthrow e;\n\t\t\t\t}\n\n\t\t\t\t// Propagate others as results\n\t\t\t\tdone( -1, e );\n\t\t\t}\n\t\t}\n\n\t\t// Callback for when everything is done\n\t\tfunction done( status, nativeStatusText, responses, headers ) {\n\t\t\tvar isSuccess, success, error, response, modified,\n\t\t\t\tstatusText = nativeStatusText;\n\n\t\t\t// Ignore repeat invocations\n\t\t\tif ( completed ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tcompleted = true;\n\n\t\t\t// Clear timeout if it exists\n\t\t\tif ( timeoutTimer ) {\n\t\t\t\twindow.clearTimeout( timeoutTimer );\n\t\t\t}\n\n\t\t\t// Dereference transport for early garbage collection\n\t\t\t// (no matter how long the jqXHR object will be used)\n\t\t\ttransport = undefined;\n\n\t\t\t// Cache response headers\n\t\t\tresponseHeadersString = headers || \"\";\n\n\t\t\t// Set readyState\n\t\t\tjqXHR.readyState = status > 0 ? 4 : 0;\n\n\t\t\t// Determine if successful\n\t\t\tisSuccess = status >= 200 && status < 300 || status === 304;\n\n\t\t\t// Get response data\n\t\t\tif ( responses ) {\n\t\t\t\tresponse = ajaxHandleResponses( s, jqXHR, responses );\n\t\t\t}\n\n\t\t\t// Convert no matter what (that way responseXXX fields are always set)\n\t\t\tresponse = ajaxConvert( s, response, jqXHR, isSuccess );\n\n\t\t\t// If successful, handle type chaining\n\t\t\tif ( isSuccess ) {\n\n\t\t\t\t// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.\n\t\t\t\tif ( s.ifModified ) {\n\t\t\t\t\tmodified = jqXHR.getResponseHeader( \"Last-Modified\" );\n\t\t\t\t\tif ( modified ) {\n\t\t\t\t\t\tjQuery.lastModified[ cacheURL ] = modified;\n\t\t\t\t\t}\n\t\t\t\t\tmodified = jqXHR.getResponseHeader( \"etag\" );\n\t\t\t\t\tif ( modified ) {\n\t\t\t\t\t\tjQuery.etag[ cacheURL ] = modified;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// if no content\n\t\t\t\tif ( status === 204 || s.type === \"HEAD\" ) {\n\t\t\t\t\tstatusText = \"nocontent\";\n\n\t\t\t\t// if not modified\n\t\t\t\t} else if ( status === 304 ) {\n\t\t\t\t\tstatusText = \"notmodified\";\n\n\t\t\t\t// If we have data, let's convert it\n\t\t\t\t} else {\n\t\t\t\t\tstatusText = response.state;\n\t\t\t\t\tsuccess = response.data;\n\t\t\t\t\terror = response.error;\n\t\t\t\t\tisSuccess = !error;\n\t\t\t\t}\n\t\t\t} else {\n\n\t\t\t\t// Extract error from statusText and normalize for non-aborts\n\t\t\t\terror = statusText;\n\t\t\t\tif ( status || !statusText ) {\n\t\t\t\t\tstatusText = \"error\";\n\t\t\t\t\tif ( status < 0 ) {\n\t\t\t\t\t\tstatus = 0;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Set data for the fake xhr object\n\t\t\tjqXHR.status = status;\n\t\t\tjqXHR.statusText = ( nativeStatusText || statusText ) + \"\";\n\n\t\t\t// Success/Error\n\t\t\tif ( isSuccess ) {\n\t\t\t\tdeferred.resolveWith( callbackContext, [ success, statusText, jqXHR ] );\n\t\t\t} else {\n\t\t\t\tdeferred.rejectWith( callbackContext, [ jqXHR, statusText, error ] );\n\t\t\t}\n\n\t\t\t// Status-dependent callbacks\n\t\t\tjqXHR.statusCode( statusCode );\n\t\t\tstatusCode = undefined;\n\n\t\t\tif ( fireGlobals ) {\n\t\t\t\tglobalEventContext.trigger( isSuccess ? \"ajaxSuccess\" : \"ajaxError\",\n\t\t\t\t\t[ jqXHR, s, isSuccess ? success : error ] );\n\t\t\t}\n\n\t\t\t// Complete\n\t\t\tcompleteDeferred.fireWith( callbackContext, [ jqXHR, statusText ] );\n\n\t\t\tif ( fireGlobals ) {\n\t\t\t\tglobalEventContext.trigger( \"ajaxComplete\", [ jqXHR, s ] );\n\n\t\t\t\t// Handle the global AJAX counter\n\t\t\t\tif ( !( --jQuery.active ) ) {\n\t\t\t\t\tjQuery.event.trigger( \"ajaxStop\" );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn jqXHR;\n\t},\n\n\tgetJSON: function( url, data, callback ) {\n\t\treturn jQuery.get( url, data, callback, \"json\" );\n\t},\n\n\tgetScript: function( url, callback ) {\n\t\treturn jQuery.get( url, undefined, callback, \"script\" );\n\t}\n} );\n\njQuery.each( [ \"get\", \"post\" ], function( i, method ) {\n\tjQuery[ method ] = function( url, data, callback, type ) {\n\n\t\t// Shift arguments if data argument was omitted\n\t\tif ( jQuery.isFunction( data ) ) {\n\t\t\ttype = type || callback;\n\t\t\tcallback = data;\n\t\t\tdata = undefined;\n\t\t}\n\n\t\t// The url can be an options object (which then must have .url)\n\t\treturn jQuery.ajax( jQuery.extend( {\n\t\t\turl: url,\n\t\t\ttype: method,\n\t\t\tdataType: type,\n\t\t\tdata: data,\n\t\t\tsuccess: callback\n\t\t}, jQuery.isPlainObject( url ) && url ) );\n\t};\n} );\n\n\njQuery._evalUrl = function( url ) {\n\treturn jQuery.ajax( {\n\t\turl: url,\n\n\t\t// Make this explicit, since user can override this through ajaxSetup (#11264)\n\t\ttype: \"GET\",\n\t\tdataType: \"script\",\n\t\tcache: true,\n\t\tasync: false,\n\t\tglobal: false,\n\t\t\"throws\": true\n\t} );\n};\n\n\njQuery.fn.extend( {\n\twrapAll: function( html ) {\n\t\tvar wrap;\n\n\t\tif ( this[ 0 ] ) {\n\t\t\tif ( jQuery.isFunction( html ) ) {\n\t\t\t\thtml = html.call( this[ 0 ] );\n\t\t\t}\n\n\t\t\t// The elements to wrap the target around\n\t\t\twrap = jQuery( html, this[ 0 ].ownerDocument ).eq( 0 ).clone( true );\n\n\t\t\tif ( this[ 0 ].parentNode ) {\n\t\t\t\twrap.insertBefore( this[ 0 ] );\n\t\t\t}\n\n\t\t\twrap.map( function() {\n\t\t\t\tvar elem = this;\n\n\t\t\t\twhile ( elem.firstElementChild ) {\n\t\t\t\t\telem = elem.firstElementChild;\n\t\t\t\t}\n\n\t\t\t\treturn elem;\n\t\t\t} ).append( this );\n\t\t}\n\n\t\treturn this;\n\t},\n\n\twrapInner: function( html ) {\n\t\tif ( jQuery.isFunction( html ) ) {\n\t\t\treturn this.each( function( i ) {\n\t\t\t\tjQuery( this ).wrapInner( html.call( this, i ) );\n\t\t\t} );\n\t\t}\n\n\t\treturn this.each( function() {\n\t\t\tvar self = jQuery( this ),\n\t\t\t\tcontents = self.contents();\n\n\t\t\tif ( contents.length ) {\n\t\t\t\tcontents.wrapAll( html );\n\n\t\t\t} else {\n\t\t\t\tself.append( html );\n\t\t\t}\n\t\t} );\n\t},\n\n\twrap: function( html ) {\n\t\tvar isFunction = jQuery.isFunction( html );\n\n\t\treturn this.each( function( i ) {\n\t\t\tjQuery( this ).wrapAll( isFunction ? html.call( this, i ) : html );\n\t\t} );\n\t},\n\n\tunwrap: function( selector ) {\n\t\tthis.parent( selector ).not( \"body\" ).each( function() {\n\t\t\tjQuery( this ).replaceWith( this.childNodes );\n\t\t} );\n\t\treturn this;\n\t}\n} );\n\n\njQuery.expr.pseudos.hidden = function( elem ) {\n\treturn !jQuery.expr.pseudos.visible( elem );\n};\njQuery.expr.pseudos.visible = function( elem ) {\n\treturn !!( elem.offsetWidth || elem.offsetHeight || elem.getClientRects().length );\n};\n\n\n\n\njQuery.ajaxSettings.xhr = function() {\n\ttry {\n\t\treturn new window.XMLHttpRequest();\n\t} catch ( e ) {}\n};\n\nvar xhrSuccessStatus = {\n\n\t\t// File protocol always yields status code 0, assume 200\n\t\t0: 200,\n\n\t\t// Support: IE <=9 only\n\t\t// #1450: sometimes IE returns 1223 when it should be 204\n\t\t1223: 204\n\t},\n\txhrSupported = jQuery.ajaxSettings.xhr();\n\nsupport.cors = !!xhrSupported && ( \"withCredentials\" in xhrSupported );\nsupport.ajax = xhrSupported = !!xhrSupported;\n\njQuery.ajaxTransport( function( options ) {\n\tvar callback, errorCallback;\n\n\t// Cross domain only allowed if supported through XMLHttpRequest\n\tif ( support.cors || xhrSupported && !options.crossDomain ) {\n\t\treturn {\n\t\t\tsend: function( headers, complete ) {\n\t\t\t\tvar i,\n\t\t\t\t\txhr = options.xhr();\n\n\t\t\t\txhr.open(\n\t\t\t\t\toptions.type,\n\t\t\t\t\toptions.url,\n\t\t\t\t\toptions.async,\n\t\t\t\t\toptions.username,\n\t\t\t\t\toptions.password\n\t\t\t\t);\n\n\t\t\t\t// Apply custom fields if provided\n\t\t\t\tif ( options.xhrFields ) {\n\t\t\t\t\tfor ( i in options.xhrFields ) {\n\t\t\t\t\t\txhr[ i ] = options.xhrFields[ i ];\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Override mime type if needed\n\t\t\t\tif ( options.mimeType && xhr.overrideMimeType ) {\n\t\t\t\t\txhr.overrideMimeType( options.mimeType );\n\t\t\t\t}\n\n\t\t\t\t// X-Requested-With header\n\t\t\t\t// For cross-domain requests, seeing as conditions for a preflight are\n\t\t\t\t// akin to a jigsaw puzzle, we simply never set it to be sure.\n\t\t\t\t// (it can always be set on a per-request basis or even using ajaxSetup)\n\t\t\t\t// For same-domain requests, won't change header if already provided.\n\t\t\t\tif ( !options.crossDomain && !headers[ \"X-Requested-With\" ] ) {\n\t\t\t\t\theaders[ \"X-Requested-With\" ] = \"XMLHttpRequest\";\n\t\t\t\t}\n\n\t\t\t\t// Set headers\n\t\t\t\tfor ( i in headers ) {\n\t\t\t\t\txhr.setRequestHeader( i, headers[ i ] );\n\t\t\t\t}\n\n\t\t\t\t// Callback\n\t\t\t\tcallback = function( type ) {\n\t\t\t\t\treturn function() {\n\t\t\t\t\t\tif ( callback ) {\n\t\t\t\t\t\t\tcallback = errorCallback = xhr.onload =\n\t\t\t\t\t\t\t\txhr.onerror = xhr.onabort = xhr.onreadystatechange = null;\n\n\t\t\t\t\t\t\tif ( type === \"abort\" ) {\n\t\t\t\t\t\t\t\txhr.abort();\n\t\t\t\t\t\t\t} else if ( type === \"error\" ) {\n\n\t\t\t\t\t\t\t\t// Support: IE <=9 only\n\t\t\t\t\t\t\t\t// On a manual native abort, IE9 throws\n\t\t\t\t\t\t\t\t// errors on any property access that is not readyState\n\t\t\t\t\t\t\t\tif ( typeof xhr.status !== \"number\" ) {\n\t\t\t\t\t\t\t\t\tcomplete( 0, \"error\" );\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tcomplete(\n\n\t\t\t\t\t\t\t\t\t\t// File: protocol always yields status 0; see #8605, #14207\n\t\t\t\t\t\t\t\t\t\txhr.status,\n\t\t\t\t\t\t\t\t\t\txhr.statusText\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tcomplete(\n\t\t\t\t\t\t\t\t\txhrSuccessStatus[ xhr.status ] || xhr.status,\n\t\t\t\t\t\t\t\t\txhr.statusText,\n\n\t\t\t\t\t\t\t\t\t// Support: IE <=9 only\n\t\t\t\t\t\t\t\t\t// IE9 has no XHR2 but throws on binary (trac-11426)\n\t\t\t\t\t\t\t\t\t// For XHR2 non-text, let the caller handle it (gh-2498)\n\t\t\t\t\t\t\t\t\t( xhr.responseType || \"text\" ) !== \"text\"  ||\n\t\t\t\t\t\t\t\t\ttypeof xhr.responseText !== \"string\" ?\n\t\t\t\t\t\t\t\t\t\t{ binary: xhr.response } :\n\t\t\t\t\t\t\t\t\t\t{ text: xhr.responseText },\n\t\t\t\t\t\t\t\t\txhr.getAllResponseHeaders()\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t};\n\n\t\t\t\t// Listen to events\n\t\t\t\txhr.onload = callback();\n\t\t\t\terrorCallback = xhr.onerror = callback( \"error\" );\n\n\t\t\t\t// Support: IE 9 only\n\t\t\t\t// Use onreadystatechange to replace onabort\n\t\t\t\t// to handle uncaught aborts\n\t\t\t\tif ( xhr.onabort !== undefined ) {\n\t\t\t\t\txhr.onabort = errorCallback;\n\t\t\t\t} else {\n\t\t\t\t\txhr.onreadystatechange = function() {\n\n\t\t\t\t\t\t// Check readyState before timeout as it changes\n\t\t\t\t\t\tif ( xhr.readyState === 4 ) {\n\n\t\t\t\t\t\t\t// Allow onerror to be called first,\n\t\t\t\t\t\t\t// but that will not handle a native abort\n\t\t\t\t\t\t\t// Also, save errorCallback to a variable\n\t\t\t\t\t\t\t// as xhr.onerror cannot be accessed\n\t\t\t\t\t\t\twindow.setTimeout( function() {\n\t\t\t\t\t\t\t\tif ( callback ) {\n\t\t\t\t\t\t\t\t\terrorCallback();\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} );\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t}\n\n\t\t\t\t// Create the abort callback\n\t\t\t\tcallback = callback( \"abort\" );\n\n\t\t\t\ttry {\n\n\t\t\t\t\t// Do send the request (this may raise an exception)\n\t\t\t\t\txhr.send( options.hasContent && options.data || null );\n\t\t\t\t} catch ( e ) {\n\n\t\t\t\t\t// #14683: Only rethrow if this hasn't been notified as an error yet\n\t\t\t\t\tif ( callback ) {\n\t\t\t\t\t\tthrow e;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\n\t\t\tabort: function() {\n\t\t\t\tif ( callback ) {\n\t\t\t\t\tcallback();\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t}\n} );\n\n\n\n\n// Prevent auto-execution of scripts when no explicit dataType was provided (See gh-2432)\njQuery.ajaxPrefilter( function( s ) {\n\tif ( s.crossDomain ) {\n\t\ts.contents.script = false;\n\t}\n} );\n\n// Install script dataType\njQuery.ajaxSetup( {\n\taccepts: {\n\t\tscript: \"text/javascript, application/javascript, \" +\n\t\t\t\"application/ecmascript, application/x-ecmascript\"\n\t},\n\tcontents: {\n\t\tscript: /\\b(?:java|ecma)script\\b/\n\t},\n\tconverters: {\n\t\t\"text script\": function( text ) {\n\t\t\tjQuery.globalEval( text );\n\t\t\treturn text;\n\t\t}\n\t}\n} );\n\n// Handle cache's special case and crossDomain\njQuery.ajaxPrefilter( \"script\", function( s ) {\n\tif ( s.cache === undefined ) {\n\t\ts.cache = false;\n\t}\n\tif ( s.crossDomain ) {\n\t\ts.type = \"GET\";\n\t}\n} );\n\n// Bind script tag hack transport\njQuery.ajaxTransport( \"script\", function( s ) {\n\n\t// This transport only deals with cross domain requests\n\tif ( s.crossDomain ) {\n\t\tvar script, callback;\n\t\treturn {\n\t\t\tsend: function( _, complete ) {\n\t\t\t\tscript = jQuery( \"<script>\" ).prop( {\n\t\t\t\t\tcharset: s.scriptCharset,\n\t\t\t\t\tsrc: s.url\n\t\t\t\t} ).on(\n\t\t\t\t\t\"load error\",\n\t\t\t\t\tcallback = function( evt ) {\n\t\t\t\t\t\tscript.remove();\n\t\t\t\t\t\tcallback = null;\n\t\t\t\t\t\tif ( evt ) {\n\t\t\t\t\t\t\tcomplete( evt.type === \"error\" ? 404 : 200, evt.type );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t);\n\n\t\t\t\t// Use native DOM manipulation to avoid our domManip AJAX trickery\n\t\t\t\tdocument.head.appendChild( script[ 0 ] );\n\t\t\t},\n\t\t\tabort: function() {\n\t\t\t\tif ( callback ) {\n\t\t\t\t\tcallback();\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t}\n} );\n\n\n\n\nvar oldCallbacks = [],\n\trjsonp = /(=)\\?(?=&|$)|\\?\\?/;\n\n// Default jsonp settings\njQuery.ajaxSetup( {\n\tjsonp: \"callback\",\n\tjsonpCallback: function() {\n\t\tvar callback = oldCallbacks.pop() || ( jQuery.expando + \"_\" + ( nonce++ ) );\n\t\tthis[ callback ] = true;\n\t\treturn callback;\n\t}\n} );\n\n// Detect, normalize options and install callbacks for jsonp requests\njQuery.ajaxPrefilter( \"json jsonp\", function( s, originalSettings, jqXHR ) {\n\n\tvar callbackName, overwritten, responseContainer,\n\t\tjsonProp = s.jsonp !== false && ( rjsonp.test( s.url ) ?\n\t\t\t\"url\" :\n\t\t\ttypeof s.data === \"string\" &&\n\t\t\t\t( s.contentType || \"\" )\n\t\t\t\t\t.indexOf( \"application/x-www-form-urlencoded\" ) === 0 &&\n\t\t\t\trjsonp.test( s.data ) && \"data\"\n\t\t);\n\n\t// Handle iff the expected data type is \"jsonp\" or we have a parameter to set\n\tif ( jsonProp || s.dataTypes[ 0 ] === \"jsonp\" ) {\n\n\t\t// Get callback name, remembering preexisting value associated with it\n\t\tcallbackName = s.jsonpCallback = jQuery.isFunction( s.jsonpCallback ) ?\n\t\t\ts.jsonpCallback() :\n\t\t\ts.jsonpCallback;\n\n\t\t// Insert callback into url or form data\n\t\tif ( jsonProp ) {\n\t\t\ts[ jsonProp ] = s[ jsonProp ].replace( rjsonp, \"$1\" + callbackName );\n\t\t} else if ( s.jsonp !== false ) {\n\t\t\ts.url += ( rquery.test( s.url ) ? \"&\" : \"?\" ) + s.jsonp + \"=\" + callbackName;\n\t\t}\n\n\t\t// Use data converter to retrieve json after script execution\n\t\ts.converters[ \"script json\" ] = function() {\n\t\t\tif ( !responseContainer ) {\n\t\t\t\tjQuery.error( callbackName + \" was not called\" );\n\t\t\t}\n\t\t\treturn responseContainer[ 0 ];\n\t\t};\n\n\t\t// Force json dataType\n\t\ts.dataTypes[ 0 ] = \"json\";\n\n\t\t// Install callback\n\t\toverwritten = window[ callbackName ];\n\t\twindow[ callbackName ] = function() {\n\t\t\tresponseContainer = arguments;\n\t\t};\n\n\t\t// Clean-up function (fires after converters)\n\t\tjqXHR.always( function() {\n\n\t\t\t// If previous value didn't exist - remove it\n\t\t\tif ( overwritten === undefined ) {\n\t\t\t\tjQuery( window ).removeProp( callbackName );\n\n\t\t\t// Otherwise restore preexisting value\n\t\t\t} else {\n\t\t\t\twindow[ callbackName ] = overwritten;\n\t\t\t}\n\n\t\t\t// Save back as free\n\t\t\tif ( s[ callbackName ] ) {\n\n\t\t\t\t// Make sure that re-using the options doesn't screw things around\n\t\t\t\ts.jsonpCallback = originalSettings.jsonpCallback;\n\n\t\t\t\t// Save the callback name for future use\n\t\t\t\toldCallbacks.push( callbackName );\n\t\t\t}\n\n\t\t\t// Call if it was a function and we have a response\n\t\t\tif ( responseContainer && jQuery.isFunction( overwritten ) ) {\n\t\t\t\toverwritten( responseContainer[ 0 ] );\n\t\t\t}\n\n\t\t\tresponseContainer = overwritten = undefined;\n\t\t} );\n\n\t\t// Delegate to script\n\t\treturn \"script\";\n\t}\n} );\n\n\n\n\n// Support: Safari 8 only\n// In Safari 8 documents created via document.implementation.createHTMLDocument\n// collapse sibling forms: the second one becomes a child of the first one.\n// Because of that, this security measure has to be disabled in Safari 8.\n// https://bugs.webkit.org/show_bug.cgi?id=137337\nsupport.createHTMLDocument = ( function() {\n\tvar body = document.implementation.createHTMLDocument( \"\" ).body;\n\tbody.innerHTML = \"<form></form><form></form>\";\n\treturn body.childNodes.length === 2;\n} )();\n\n\n// Argument \"data\" should be string of html\n// context (optional): If specified, the fragment will be created in this context,\n// defaults to document\n// keepScripts (optional): If true, will include scripts passed in the html string\njQuery.parseHTML = function( data, context, keepScripts ) {\n\tif ( typeof data !== \"string\" ) {\n\t\treturn [];\n\t}\n\tif ( typeof context === \"boolean\" ) {\n\t\tkeepScripts = context;\n\t\tcontext = false;\n\t}\n\n\tvar base, parsed, scripts;\n\n\tif ( !context ) {\n\n\t\t// Stop scripts or inline event handlers from being executed immediately\n\t\t// by using document.implementation\n\t\tif ( support.createHTMLDocument ) {\n\t\t\tcontext = document.implementation.createHTMLDocument( \"\" );\n\n\t\t\t// Set the base href for the created document\n\t\t\t// so any parsed elements with URLs\n\t\t\t// are based on the document's URL (gh-2965)\n\t\t\tbase = context.createElement( \"base\" );\n\t\t\tbase.href = document.location.href;\n\t\t\tcontext.head.appendChild( base );\n\t\t} else {\n\t\t\tcontext = document;\n\t\t}\n\t}\n\n\tparsed = rsingleTag.exec( data );\n\tscripts = !keepScripts && [];\n\n\t// Single tag\n\tif ( parsed ) {\n\t\treturn [ context.createElement( parsed[ 1 ] ) ];\n\t}\n\n\tparsed = buildFragment( [ data ], context, scripts );\n\n\tif ( scripts && scripts.length ) {\n\t\tjQuery( scripts ).remove();\n\t}\n\n\treturn jQuery.merge( [], parsed.childNodes );\n};\n\n\n/**\n * Load a url into a page\n */\njQuery.fn.load = function( url, params, callback ) {\n\tvar selector, type, response,\n\t\tself = this,\n\t\toff = url.indexOf( \" \" );\n\n\tif ( off > -1 ) {\n\t\tselector = stripAndCollapse( url.slice( off ) );\n\t\turl = url.slice( 0, off );\n\t}\n\n\t// If it's a function\n\tif ( jQuery.isFunction( params ) ) {\n\n\t\t// We assume that it's the callback\n\t\tcallback = params;\n\t\tparams = undefined;\n\n\t// Otherwise, build a param string\n\t} else if ( params && typeof params === \"object\" ) {\n\t\ttype = \"POST\";\n\t}\n\n\t// If we have elements to modify, make the request\n\tif ( self.length > 0 ) {\n\t\tjQuery.ajax( {\n\t\t\turl: url,\n\n\t\t\t// If \"type\" variable is undefined, then \"GET\" method will be used.\n\t\t\t// Make value of this field explicit since\n\t\t\t// user can override it through ajaxSetup method\n\t\t\ttype: type || \"GET\",\n\t\t\tdataType: \"html\",\n\t\t\tdata: params\n\t\t} ).done( function( responseText ) {\n\n\t\t\t// Save response for use in complete callback\n\t\t\tresponse = arguments;\n\n\t\t\tself.html( selector ?\n\n\t\t\t\t// If a selector was specified, locate the right elements in a dummy div\n\t\t\t\t// Exclude scripts to avoid IE 'Permission Denied' errors\n\t\t\t\tjQuery( \"<div>\" ).append( jQuery.parseHTML( responseText ) ).find( selector ) :\n\n\t\t\t\t// Otherwise use the full result\n\t\t\t\tresponseText );\n\n\t\t// If the request succeeds, this function gets \"data\", \"status\", \"jqXHR\"\n\t\t// but they are ignored because response was set above.\n\t\t// If it fails, this function gets \"jqXHR\", \"status\", \"error\"\n\t\t} ).always( callback && function( jqXHR, status ) {\n\t\t\tself.each( function() {\n\t\t\t\tcallback.apply( this, response || [ jqXHR.responseText, status, jqXHR ] );\n\t\t\t} );\n\t\t} );\n\t}\n\n\treturn this;\n};\n\n\n\n\n// Attach a bunch of functions for handling common AJAX events\njQuery.each( [\n\t\"ajaxStart\",\n\t\"ajaxStop\",\n\t\"ajaxComplete\",\n\t\"ajaxError\",\n\t\"ajaxSuccess\",\n\t\"ajaxSend\"\n], function( i, type ) {\n\tjQuery.fn[ type ] = function( fn ) {\n\t\treturn this.on( type, fn );\n\t};\n} );\n\n\n\n\njQuery.expr.pseudos.animated = function( elem ) {\n\treturn jQuery.grep( jQuery.timers, function( fn ) {\n\t\treturn elem === fn.elem;\n\t} ).length;\n};\n\n\n\n\n/**\n * Gets a window from an element\n */\nfunction getWindow( elem ) {\n\treturn jQuery.isWindow( elem ) ? elem : elem.nodeType === 9 && elem.defaultView;\n}\n\njQuery.offset = {\n\tsetOffset: function( elem, options, i ) {\n\t\tvar curPosition, curLeft, curCSSTop, curTop, curOffset, curCSSLeft, calculatePosition,\n\t\t\tposition = jQuery.css( elem, \"position\" ),\n\t\t\tcurElem = jQuery( elem ),\n\t\t\tprops = {};\n\n\t\t// Set position first, in-case top/left are set even on static elem\n\t\tif ( position === \"static\" ) {\n\t\t\telem.style.position = \"relative\";\n\t\t}\n\n\t\tcurOffset = curElem.offset();\n\t\tcurCSSTop = jQuery.css( elem, \"top\" );\n\t\tcurCSSLeft = jQuery.css( elem, \"left\" );\n\t\tcalculatePosition = ( position === \"absolute\" || position === \"fixed\" ) &&\n\t\t\t( curCSSTop + curCSSLeft ).indexOf( \"auto\" ) > -1;\n\n\t\t// Need to be able to calculate position if either\n\t\t// top or left is auto and position is either absolute or fixed\n\t\tif ( calculatePosition ) {\n\t\t\tcurPosition = curElem.position();\n\t\t\tcurTop = curPosition.top;\n\t\t\tcurLeft = curPosition.left;\n\n\t\t} else {\n\t\t\tcurTop = parseFloat( curCSSTop ) || 0;\n\t\t\tcurLeft = parseFloat( curCSSLeft ) || 0;\n\t\t}\n\n\t\tif ( jQuery.isFunction( options ) ) {\n\n\t\t\t// Use jQuery.extend here to allow modification of coordinates argument (gh-1848)\n\t\t\toptions = options.call( elem, i, jQuery.extend( {}, curOffset ) );\n\t\t}\n\n\t\tif ( options.top != null ) {\n\t\t\tprops.top = ( options.top - curOffset.top ) + curTop;\n\t\t}\n\t\tif ( options.left != null ) {\n\t\t\tprops.left = ( options.left - curOffset.left ) + curLeft;\n\t\t}\n\n\t\tif ( \"using\" in options ) {\n\t\t\toptions.using.call( elem, props );\n\n\t\t} else {\n\t\t\tcurElem.css( props );\n\t\t}\n\t}\n};\n\njQuery.fn.extend( {\n\toffset: function( options ) {\n\n\t\t// Preserve chaining for setter\n\t\tif ( arguments.length ) {\n\t\t\treturn options === undefined ?\n\t\t\t\tthis :\n\t\t\t\tthis.each( function( i ) {\n\t\t\t\t\tjQuery.offset.setOffset( this, options, i );\n\t\t\t\t} );\n\t\t}\n\n\t\tvar docElem, win, rect, doc,\n\t\t\telem = this[ 0 ];\n\n\t\tif ( !elem ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Support: IE <=11 only\n\t\t// Running getBoundingClientRect on a\n\t\t// disconnected node in IE throws an error\n\t\tif ( !elem.getClientRects().length ) {\n\t\t\treturn { top: 0, left: 0 };\n\t\t}\n\n\t\trect = elem.getBoundingClientRect();\n\n\t\t// Make sure element is not hidden (display: none)\n\t\tif ( rect.width || rect.height ) {\n\t\t\tdoc = elem.ownerDocument;\n\t\t\twin = getWindow( doc );\n\t\t\tdocElem = doc.documentElement;\n\n\t\t\treturn {\n\t\t\t\ttop: rect.top + win.pageYOffset - docElem.clientTop,\n\t\t\t\tleft: rect.left + win.pageXOffset - docElem.clientLeft\n\t\t\t};\n\t\t}\n\n\t\t// Return zeros for disconnected and hidden elements (gh-2310)\n\t\treturn rect;\n\t},\n\n\tposition: function() {\n\t\tif ( !this[ 0 ] ) {\n\t\t\treturn;\n\t\t}\n\n\t\tvar offsetParent, offset,\n\t\t\telem = this[ 0 ],\n\t\t\tparentOffset = { top: 0, left: 0 };\n\n\t\t// Fixed elements are offset from window (parentOffset = {top:0, left: 0},\n\t\t// because it is its only offset parent\n\t\tif ( jQuery.css( elem, \"position\" ) === \"fixed\" ) {\n\n\t\t\t// Assume getBoundingClientRect is there when computed position is fixed\n\t\t\toffset = elem.getBoundingClientRect();\n\n\t\t} else {\n\n\t\t\t// Get *real* offsetParent\n\t\t\toffsetParent = this.offsetParent();\n\n\t\t\t// Get correct offsets\n\t\t\toffset = this.offset();\n\t\t\tif ( !jQuery.nodeName( offsetParent[ 0 ], \"html\" ) ) {\n\t\t\t\tparentOffset = offsetParent.offset();\n\t\t\t}\n\n\t\t\t// Add offsetParent borders\n\t\t\tparentOffset = {\n\t\t\t\ttop: parentOffset.top + jQuery.css( offsetParent[ 0 ], \"borderTopWidth\", true ),\n\t\t\t\tleft: parentOffset.left + jQuery.css( offsetParent[ 0 ], \"borderLeftWidth\", true )\n\t\t\t};\n\t\t}\n\n\t\t// Subtract parent offsets and element margins\n\t\treturn {\n\t\t\ttop: offset.top - parentOffset.top - jQuery.css( elem, \"marginTop\", true ),\n\t\t\tleft: offset.left - parentOffset.left - jQuery.css( elem, \"marginLeft\", true )\n\t\t};\n\t},\n\n\t// This method will return documentElement in the following cases:\n\t// 1) For the element inside the iframe without offsetParent, this method will return\n\t//    documentElement of the parent window\n\t// 2) For the hidden or detached element\n\t// 3) For body or html element, i.e. in case of the html node - it will return itself\n\t//\n\t// but those exceptions were never presented as a real life use-cases\n\t// and might be considered as more preferable results.\n\t//\n\t// This logic, however, is not guaranteed and can change at any point in the future\n\toffsetParent: function() {\n\t\treturn this.map( function() {\n\t\t\tvar offsetParent = this.offsetParent;\n\n\t\t\twhile ( offsetParent && jQuery.css( offsetParent, \"position\" ) === \"static\" ) {\n\t\t\t\toffsetParent = offsetParent.offsetParent;\n\t\t\t}\n\n\t\t\treturn offsetParent || documentElement;\n\t\t} );\n\t}\n} );\n\n// Create scrollLeft and scrollTop methods\njQuery.each( { scrollLeft: \"pageXOffset\", scrollTop: \"pageYOffset\" }, function( method, prop ) {\n\tvar top = \"pageYOffset\" === prop;\n\n\tjQuery.fn[ method ] = function( val ) {\n\t\treturn access( this, function( elem, method, val ) {\n\t\t\tvar win = getWindow( elem );\n\n\t\t\tif ( val === undefined ) {\n\t\t\t\treturn win ? win[ prop ] : elem[ method ];\n\t\t\t}\n\n\t\t\tif ( win ) {\n\t\t\t\twin.scrollTo(\n\t\t\t\t\t!top ? val : win.pageXOffset,\n\t\t\t\t\ttop ? val : win.pageYOffset\n\t\t\t\t);\n\n\t\t\t} else {\n\t\t\t\telem[ method ] = val;\n\t\t\t}\n\t\t}, method, val, arguments.length );\n\t};\n} );\n\n// Support: Safari <=7 - 9.1, Chrome <=37 - 49\n// Add the top/left cssHooks using jQuery.fn.position\n// Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084\n// Blink bug: https://bugs.chromium.org/p/chromium/issues/detail?id=589347\n// getComputedStyle returns percent when specified for top/left/bottom/right;\n// rather than make the css module depend on the offset module, just check for it here\njQuery.each( [ \"top\", \"left\" ], function( i, prop ) {\n\tjQuery.cssHooks[ prop ] = addGetHookIf( support.pixelPosition,\n\t\tfunction( elem, computed ) {\n\t\t\tif ( computed ) {\n\t\t\t\tcomputed = curCSS( elem, prop );\n\n\t\t\t\t// If curCSS returns percentage, fallback to offset\n\t\t\t\treturn rnumnonpx.test( computed ) ?\n\t\t\t\t\tjQuery( elem ).position()[ prop ] + \"px\" :\n\t\t\t\t\tcomputed;\n\t\t\t}\n\t\t}\n\t);\n} );\n\n\n// Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods\njQuery.each( { Height: \"height\", Width: \"width\" }, function( name, type ) {\n\tjQuery.each( { padding: \"inner\" + name, content: type, \"\": \"outer\" + name },\n\t\tfunction( defaultExtra, funcName ) {\n\n\t\t// Margin is only for outerHeight, outerWidth\n\t\tjQuery.fn[ funcName ] = function( margin, value ) {\n\t\t\tvar chainable = arguments.length && ( defaultExtra || typeof margin !== \"boolean\" ),\n\t\t\t\textra = defaultExtra || ( margin === true || value === true ? \"margin\" : \"border\" );\n\n\t\t\treturn access( this, function( elem, type, value ) {\n\t\t\t\tvar doc;\n\n\t\t\t\tif ( jQuery.isWindow( elem ) ) {\n\n\t\t\t\t\t// $( window ).outerWidth/Height return w/h including scrollbars (gh-1729)\n\t\t\t\t\treturn funcName.indexOf( \"outer\" ) === 0 ?\n\t\t\t\t\t\telem[ \"inner\" + name ] :\n\t\t\t\t\t\telem.document.documentElement[ \"client\" + name ];\n\t\t\t\t}\n\n\t\t\t\t// Get document width or height\n\t\t\t\tif ( elem.nodeType === 9 ) {\n\t\t\t\t\tdoc = elem.documentElement;\n\n\t\t\t\t\t// Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height],\n\t\t\t\t\t// whichever is greatest\n\t\t\t\t\treturn Math.max(\n\t\t\t\t\t\telem.body[ \"scroll\" + name ], doc[ \"scroll\" + name ],\n\t\t\t\t\t\telem.body[ \"offset\" + name ], doc[ \"offset\" + name ],\n\t\t\t\t\t\tdoc[ \"client\" + name ]\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\treturn value === undefined ?\n\n\t\t\t\t\t// Get width or height on the element, requesting but not forcing parseFloat\n\t\t\t\t\tjQuery.css( elem, type, extra ) :\n\n\t\t\t\t\t// Set width or height on the element\n\t\t\t\t\tjQuery.style( elem, type, value, extra );\n\t\t\t}, type, chainable ? margin : undefined, chainable );\n\t\t};\n\t} );\n} );\n\n\njQuery.fn.extend( {\n\n\tbind: function( types, data, fn ) {\n\t\treturn this.on( types, null, data, fn );\n\t},\n\tunbind: function( types, fn ) {\n\t\treturn this.off( types, null, fn );\n\t},\n\n\tdelegate: function( selector, types, data, fn ) {\n\t\treturn this.on( types, selector, data, fn );\n\t},\n\tundelegate: function( selector, types, fn ) {\n\n\t\t// ( namespace ) or ( selector, types [, fn] )\n\t\treturn arguments.length === 1 ?\n\t\t\tthis.off( selector, \"**\" ) :\n\t\t\tthis.off( types, selector || \"**\", fn );\n\t}\n} );\n\njQuery.parseJSON = JSON.parse;\n\n\n\n\n// Register as a named AMD module, since jQuery can be concatenated with other\n// files that may use define, but not via a proper concatenation script that\n// understands anonymous AMD modules. A named AMD is safest and most robust\n// way to register. Lowercase jquery is used because AMD module names are\n// derived from file names, and jQuery is normally delivered in a lowercase\n// file name. Do this after creating the global so that if an AMD module wants\n// to call noConflict to hide this version of jQuery, it will work.\n\n// Note that for maximum portability, libraries that are not jQuery should\n// declare themselves as anonymous modules, and avoid setting a global if an\n// AMD loader is present. jQuery is a special case. For more information, see\n// https://github.com/jrburke/requirejs/wiki/Updating-existing-libraries#wiki-anon\n\nif ( typeof define === \"function\" && define.amd ) {\n\tdefine( \"jquery\", [], function() {\n\t\treturn jQuery;\n\t} );\n}\n\n\n\n\nvar\n\n\t// Map over jQuery in case of overwrite\n\t_jQuery = window.jQuery,\n\n\t// Map over the $ in case of overwrite\n\t_$ = window.$;\n\njQuery.noConflict = function( deep ) {\n\tif ( window.$ === jQuery ) {\n\t\twindow.$ = _$;\n\t}\n\n\tif ( deep && window.jQuery === jQuery ) {\n\t\twindow.jQuery = _jQuery;\n\t}\n\n\treturn jQuery;\n};\n\n// Expose jQuery and $ identifiers, even in AMD\n// (#7102#comment:10, https://github.com/jquery/jquery/pull/557)\n// and CommonJS for browser emulators (#13566)\nif ( !noGlobal ) {\n\twindow.jQuery = window.$ = jQuery;\n}\n\n\n\n\n\nreturn jQuery;\n} );\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/jquery/dist/jquery.js\n// module id = 2\n// module chunks = 0","module.exports = __webpack_public_path__ + \"ea07932c5245dd421e3d05f579098bc2.eot\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/npm-font-open-sans/fonts/BoldItalic/OpenSans-BoldItalic.eot\n// module id = 3\n// module chunks = 0","module.exports = __webpack_public_path__ + \"7ae9b8ba7886341831bf7c85a0da40d0.eot\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/npm-font-open-sans/fonts/Bold/OpenSans-Bold.eot\n// module id = 4\n// module chunks = 0","module.exports = __webpack_public_path__ + \"5f467e780ed0aead6614d85dcca181e1.eot\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/npm-font-open-sans/fonts/ExtraBoldItalic/OpenSans-ExtraBoldItalic.eot\n// module id = 5\n// module chunks = 0","module.exports = __webpack_public_path__ + \"561e4b63e9119235465ec88c8c91f2c8.eot\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/npm-font-open-sans/fonts/ExtraBold/OpenSans-ExtraBold.eot\n// module id = 6\n// module chunks = 0","module.exports = __webpack_public_path__ + \"e487b7cb072550896dde6821d24de2be.eot\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/npm-font-open-sans/fonts/Italic/OpenSans-Italic.eot\n// module id = 7\n// module chunks = 0","module.exports = __webpack_public_path__ + \"6725fc490942895a65f559882a17d524.eot\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/npm-font-open-sans/fonts/LightItalic/OpenSans-LightItalic.eot\n// module id = 8\n// module chunks = 0","module.exports = __webpack_public_path__ + \"804037562eabaa5dbefa4a435206d017.eot\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/npm-font-open-sans/fonts/Light/OpenSans-Light.eot\n// module id = 9\n// module chunks = 0","module.exports = __webpack_public_path__ + \"a35546eef3ea0de0d4735f23b0a0873b.eot\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/npm-font-open-sans/fonts/Regular/OpenSans-Regular.eot\n// module id = 10\n// module chunks = 0","module.exports = __webpack_public_path__ + \"da061416028fc9a66fbc0b80d33d6e6f.eot\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/npm-font-open-sans/fonts/SemiboldItalic/OpenSans-SemiboldItalic.eot\n// module id = 11\n// module chunks = 0","module.exports = __webpack_public_path__ + \"0ea04502930623aa3de110aac9f9e4fd.eot\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/npm-font-open-sans/fonts/Semibold/OpenSans-Semibold.eot\n// module id = 12\n// module chunks = 0","/*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>\n * @license  MIT\n */\n/* eslint-disable no-proto */\n\n'use strict'\n\nvar base64 = require('base64-js')\nvar ieee754 = require('ieee754')\nvar isArray = require('isarray')\n\nexports.Buffer = Buffer\nexports.SlowBuffer = SlowBuffer\nexports.INSPECT_MAX_BYTES = 50\n\n/**\n * If `Buffer.TYPED_ARRAY_SUPPORT`:\n *   === true    Use Uint8Array implementation (fastest)\n *   === false   Use Object implementation (most compatible, even IE6)\n *\n * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,\n * Opera 11.6+, iOS 4.2+.\n *\n * Due to various browser bugs, sometimes the Object implementation will be used even\n * when the browser supports typed arrays.\n *\n * Note:\n *\n *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,\n *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.\n *\n *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.\n *\n *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of\n *     incorrect length in some situations.\n\n * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they\n * get the Object implementation, which is slower but behaves correctly.\n */\nBuffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined\n  ? global.TYPED_ARRAY_SUPPORT\n  : typedArraySupport()\n\n/*\n * Export kMaxLength after typed array support is determined.\n */\nexports.kMaxLength = kMaxLength()\n\nfunction typedArraySupport () {\n  try {\n    var arr = new Uint8Array(1)\n    arr.__proto__ = {__proto__: Uint8Array.prototype, foo: function () { return 42 }}\n    return arr.foo() === 42 && // typed array instances can be augmented\n        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`\n        arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`\n  } catch (e) {\n    return false\n  }\n}\n\nfunction kMaxLength () {\n  return Buffer.TYPED_ARRAY_SUPPORT\n    ? 0x7fffffff\n    : 0x3fffffff\n}\n\nfunction createBuffer (that, length) {\n  if (kMaxLength() < length) {\n    throw new RangeError('Invalid typed array length')\n  }\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    // Return an augmented `Uint8Array` instance, for best performance\n    that = new Uint8Array(length)\n    that.__proto__ = Buffer.prototype\n  } else {\n    // Fallback: Return an object instance of the Buffer class\n    if (that === null) {\n      that = new Buffer(length)\n    }\n    that.length = length\n  }\n\n  return that\n}\n\n/**\n * The Buffer constructor returns instances of `Uint8Array` that have their\n * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of\n * `Uint8Array`, so the returned instances will have all the node `Buffer` methods\n * and the `Uint8Array` methods. Square bracket notation works as expected -- it\n * returns a single octet.\n *\n * The `Uint8Array` prototype remains unmodified.\n */\n\nfunction Buffer (arg, encodingOrOffset, length) {\n  if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {\n    return new Buffer(arg, encodingOrOffset, length)\n  }\n\n  // Common case.\n  if (typeof arg === 'number') {\n    if (typeof encodingOrOffset === 'string') {\n      throw new Error(\n        'If encoding is specified then the first argument must be a string'\n      )\n    }\n    return allocUnsafe(this, arg)\n  }\n  return from(this, arg, encodingOrOffset, length)\n}\n\nBuffer.poolSize = 8192 // not used by this implementation\n\n// TODO: Legacy, not needed anymore. Remove in next major version.\nBuffer._augment = function (arr) {\n  arr.__proto__ = Buffer.prototype\n  return arr\n}\n\nfunction from (that, value, encodingOrOffset, length) {\n  if (typeof value === 'number') {\n    throw new TypeError('\"value\" argument must not be a number')\n  }\n\n  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {\n    return fromArrayBuffer(that, value, encodingOrOffset, length)\n  }\n\n  if (typeof value === 'string') {\n    return fromString(that, value, encodingOrOffset)\n  }\n\n  return fromObject(that, value)\n}\n\n/**\n * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError\n * if value is a number.\n * Buffer.from(str[, encoding])\n * Buffer.from(array)\n * Buffer.from(buffer)\n * Buffer.from(arrayBuffer[, byteOffset[, length]])\n **/\nBuffer.from = function (value, encodingOrOffset, length) {\n  return from(null, value, encodingOrOffset, length)\n}\n\nif (Buffer.TYPED_ARRAY_SUPPORT) {\n  Buffer.prototype.__proto__ = Uint8Array.prototype\n  Buffer.__proto__ = Uint8Array\n  if (typeof Symbol !== 'undefined' && Symbol.species &&\n      Buffer[Symbol.species] === Buffer) {\n    // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97\n    Object.defineProperty(Buffer, Symbol.species, {\n      value: null,\n      configurable: true\n    })\n  }\n}\n\nfunction assertSize (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('\"size\" argument must be a number')\n  } else if (size < 0) {\n    throw new RangeError('\"size\" argument must not be negative')\n  }\n}\n\nfunction alloc (that, size, fill, encoding) {\n  assertSize(size)\n  if (size <= 0) {\n    return createBuffer(that, size)\n  }\n  if (fill !== undefined) {\n    // Only pay attention to encoding if it's a string. This\n    // prevents accidentally sending in a number that would\n    // be interpretted as a start offset.\n    return typeof encoding === 'string'\n      ? createBuffer(that, size).fill(fill, encoding)\n      : createBuffer(that, size).fill(fill)\n  }\n  return createBuffer(that, size)\n}\n\n/**\n * Creates a new filled Buffer instance.\n * alloc(size[, fill[, encoding]])\n **/\nBuffer.alloc = function (size, fill, encoding) {\n  return alloc(null, size, fill, encoding)\n}\n\nfunction allocUnsafe (that, size) {\n  assertSize(size)\n  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) {\n    for (var i = 0; i < size; ++i) {\n      that[i] = 0\n    }\n  }\n  return that\n}\n\n/**\n * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.\n * */\nBuffer.allocUnsafe = function (size) {\n  return allocUnsafe(null, size)\n}\n/**\n * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.\n */\nBuffer.allocUnsafeSlow = function (size) {\n  return allocUnsafe(null, size)\n}\n\nfunction fromString (that, string, encoding) {\n  if (typeof encoding !== 'string' || encoding === '') {\n    encoding = 'utf8'\n  }\n\n  if (!Buffer.isEncoding(encoding)) {\n    throw new TypeError('\"encoding\" must be a valid string encoding')\n  }\n\n  var length = byteLength(string, encoding) | 0\n  that = createBuffer(that, length)\n\n  var actual = that.write(string, encoding)\n\n  if (actual !== length) {\n    // Writing a hex string, for example, that contains invalid characters will\n    // cause everything after the first invalid character to be ignored. (e.g.\n    // 'abxxcd' will be treated as 'ab')\n    that = that.slice(0, actual)\n  }\n\n  return that\n}\n\nfunction fromArrayLike (that, array) {\n  var length = array.length < 0 ? 0 : checked(array.length) | 0\n  that = createBuffer(that, length)\n  for (var i = 0; i < length; i += 1) {\n    that[i] = array[i] & 255\n  }\n  return that\n}\n\nfunction fromArrayBuffer (that, array, byteOffset, length) {\n  array.byteLength // this throws if `array` is not a valid ArrayBuffer\n\n  if (byteOffset < 0 || array.byteLength < byteOffset) {\n    throw new RangeError('\\'offset\\' is out of bounds')\n  }\n\n  if (array.byteLength < byteOffset + (length || 0)) {\n    throw new RangeError('\\'length\\' is out of bounds')\n  }\n\n  if (byteOffset === undefined && length === undefined) {\n    array = new Uint8Array(array)\n  } else if (length === undefined) {\n    array = new Uint8Array(array, byteOffset)\n  } else {\n    array = new Uint8Array(array, byteOffset, length)\n  }\n\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    // Return an augmented `Uint8Array` instance, for best performance\n    that = array\n    that.__proto__ = Buffer.prototype\n  } else {\n    // Fallback: Return an object instance of the Buffer class\n    that = fromArrayLike(that, array)\n  }\n  return that\n}\n\nfunction fromObject (that, obj) {\n  if (Buffer.isBuffer(obj)) {\n    var len = checked(obj.length) | 0\n    that = createBuffer(that, len)\n\n    if (that.length === 0) {\n      return that\n    }\n\n    obj.copy(that, 0, 0, len)\n    return that\n  }\n\n  if (obj) {\n    if ((typeof ArrayBuffer !== 'undefined' &&\n        obj.buffer instanceof ArrayBuffer) || 'length' in obj) {\n      if (typeof obj.length !== 'number' || isnan(obj.length)) {\n        return createBuffer(that, 0)\n      }\n      return fromArrayLike(that, obj)\n    }\n\n    if (obj.type === 'Buffer' && isArray(obj.data)) {\n      return fromArrayLike(that, obj.data)\n    }\n  }\n\n  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')\n}\n\nfunction checked (length) {\n  // Note: cannot use `length < kMaxLength()` here because that fails when\n  // length is NaN (which is otherwise coerced to zero.)\n  if (length >= kMaxLength()) {\n    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +\n                         'size: 0x' + kMaxLength().toString(16) + ' bytes')\n  }\n  return length | 0\n}\n\nfunction SlowBuffer (length) {\n  if (+length != length) { // eslint-disable-line eqeqeq\n    length = 0\n  }\n  return Buffer.alloc(+length)\n}\n\nBuffer.isBuffer = function isBuffer (b) {\n  return !!(b != null && b._isBuffer)\n}\n\nBuffer.compare = function compare (a, b) {\n  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {\n    throw new TypeError('Arguments must be Buffers')\n  }\n\n  if (a === b) return 0\n\n  var x = a.length\n  var y = b.length\n\n  for (var i = 0, len = Math.min(x, y); i < len; ++i) {\n    if (a[i] !== b[i]) {\n      x = a[i]\n      y = b[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\nBuffer.isEncoding = function isEncoding (encoding) {\n  switch (String(encoding).toLowerCase()) {\n    case 'hex':\n    case 'utf8':\n    case 'utf-8':\n    case 'ascii':\n    case 'latin1':\n    case 'binary':\n    case 'base64':\n    case 'ucs2':\n    case 'ucs-2':\n    case 'utf16le':\n    case 'utf-16le':\n      return true\n    default:\n      return false\n  }\n}\n\nBuffer.concat = function concat (list, length) {\n  if (!isArray(list)) {\n    throw new TypeError('\"list\" argument must be an Array of Buffers')\n  }\n\n  if (list.length === 0) {\n    return Buffer.alloc(0)\n  }\n\n  var i\n  if (length === undefined) {\n    length = 0\n    for (i = 0; i < list.length; ++i) {\n      length += list[i].length\n    }\n  }\n\n  var buffer = Buffer.allocUnsafe(length)\n  var pos = 0\n  for (i = 0; i < list.length; ++i) {\n    var buf = list[i]\n    if (!Buffer.isBuffer(buf)) {\n      throw new TypeError('\"list\" argument must be an Array of Buffers')\n    }\n    buf.copy(buffer, pos)\n    pos += buf.length\n  }\n  return buffer\n}\n\nfunction byteLength (string, encoding) {\n  if (Buffer.isBuffer(string)) {\n    return string.length\n  }\n  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&\n      (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {\n    return string.byteLength\n  }\n  if (typeof string !== 'string') {\n    string = '' + string\n  }\n\n  var len = string.length\n  if (len === 0) return 0\n\n  // Use a for loop to avoid recursion\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return len\n      case 'utf8':\n      case 'utf-8':\n      case undefined:\n        return utf8ToBytes(string).length\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return len * 2\n      case 'hex':\n        return len >>> 1\n      case 'base64':\n        return base64ToBytes(string).length\n      default:\n        if (loweredCase) return utf8ToBytes(string).length // assume utf8\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\nBuffer.byteLength = byteLength\n\nfunction slowToString (encoding, start, end) {\n  var loweredCase = false\n\n  // No need to verify that \"this.length <= MAX_UINT32\" since it's a read-only\n  // property of a typed array.\n\n  // This behaves neither like String nor Uint8Array in that we set start/end\n  // to their upper/lower bounds if the value passed is out of range.\n  // undefined is handled specially as per ECMA-262 6th Edition,\n  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.\n  if (start === undefined || start < 0) {\n    start = 0\n  }\n  // Return early if start > this.length. Done here to prevent potential uint32\n  // coercion fail below.\n  if (start > this.length) {\n    return ''\n  }\n\n  if (end === undefined || end > this.length) {\n    end = this.length\n  }\n\n  if (end <= 0) {\n    return ''\n  }\n\n  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.\n  end >>>= 0\n  start >>>= 0\n\n  if (end <= start) {\n    return ''\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  while (true) {\n    switch (encoding) {\n      case 'hex':\n        return hexSlice(this, start, end)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Slice(this, start, end)\n\n      case 'ascii':\n        return asciiSlice(this, start, end)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Slice(this, start, end)\n\n      case 'base64':\n        return base64Slice(this, start, end)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return utf16leSlice(this, start, end)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = (encoding + '').toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\n// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect\n// Buffer instances.\nBuffer.prototype._isBuffer = true\n\nfunction swap (b, n, m) {\n  var i = b[n]\n  b[n] = b[m]\n  b[m] = i\n}\n\nBuffer.prototype.swap16 = function swap16 () {\n  var len = this.length\n  if (len % 2 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 16-bits')\n  }\n  for (var i = 0; i < len; i += 2) {\n    swap(this, i, i + 1)\n  }\n  return this\n}\n\nBuffer.prototype.swap32 = function swap32 () {\n  var len = this.length\n  if (len % 4 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 32-bits')\n  }\n  for (var i = 0; i < len; i += 4) {\n    swap(this, i, i + 3)\n    swap(this, i + 1, i + 2)\n  }\n  return this\n}\n\nBuffer.prototype.swap64 = function swap64 () {\n  var len = this.length\n  if (len % 8 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 64-bits')\n  }\n  for (var i = 0; i < len; i += 8) {\n    swap(this, i, i + 7)\n    swap(this, i + 1, i + 6)\n    swap(this, i + 2, i + 5)\n    swap(this, i + 3, i + 4)\n  }\n  return this\n}\n\nBuffer.prototype.toString = function toString () {\n  var length = this.length | 0\n  if (length === 0) return ''\n  if (arguments.length === 0) return utf8Slice(this, 0, length)\n  return slowToString.apply(this, arguments)\n}\n\nBuffer.prototype.equals = function equals (b) {\n  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')\n  if (this === b) return true\n  return Buffer.compare(this, b) === 0\n}\n\nBuffer.prototype.inspect = function inspect () {\n  var str = ''\n  var max = exports.INSPECT_MAX_BYTES\n  if (this.length > 0) {\n    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')\n    if (this.length > max) str += ' ... '\n  }\n  return '<Buffer ' + str + '>'\n}\n\nBuffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {\n  if (!Buffer.isBuffer(target)) {\n    throw new TypeError('Argument must be a Buffer')\n  }\n\n  if (start === undefined) {\n    start = 0\n  }\n  if (end === undefined) {\n    end = target ? target.length : 0\n  }\n  if (thisStart === undefined) {\n    thisStart = 0\n  }\n  if (thisEnd === undefined) {\n    thisEnd = this.length\n  }\n\n  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {\n    throw new RangeError('out of range index')\n  }\n\n  if (thisStart >= thisEnd && start >= end) {\n    return 0\n  }\n  if (thisStart >= thisEnd) {\n    return -1\n  }\n  if (start >= end) {\n    return 1\n  }\n\n  start >>>= 0\n  end >>>= 0\n  thisStart >>>= 0\n  thisEnd >>>= 0\n\n  if (this === target) return 0\n\n  var x = thisEnd - thisStart\n  var y = end - start\n  var len = Math.min(x, y)\n\n  var thisCopy = this.slice(thisStart, thisEnd)\n  var targetCopy = target.slice(start, end)\n\n  for (var i = 0; i < len; ++i) {\n    if (thisCopy[i] !== targetCopy[i]) {\n      x = thisCopy[i]\n      y = targetCopy[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\n// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,\n// OR the last index of `val` in `buffer` at offset <= `byteOffset`.\n//\n// Arguments:\n// - buffer - a Buffer to search\n// - val - a string, Buffer, or number\n// - byteOffset - an index into `buffer`; will be clamped to an int32\n// - encoding - an optional encoding, relevant is val is a string\n// - dir - true for indexOf, false for lastIndexOf\nfunction bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {\n  // Empty buffer means no match\n  if (buffer.length === 0) return -1\n\n  // Normalize byteOffset\n  if (typeof byteOffset === 'string') {\n    encoding = byteOffset\n    byteOffset = 0\n  } else if (byteOffset > 0x7fffffff) {\n    byteOffset = 0x7fffffff\n  } else if (byteOffset < -0x80000000) {\n    byteOffset = -0x80000000\n  }\n  byteOffset = +byteOffset  // Coerce to Number.\n  if (isNaN(byteOffset)) {\n    // byteOffset: it it's undefined, null, NaN, \"foo\", etc, search whole buffer\n    byteOffset = dir ? 0 : (buffer.length - 1)\n  }\n\n  // Normalize byteOffset: negative offsets start from the end of the buffer\n  if (byteOffset < 0) byteOffset = buffer.length + byteOffset\n  if (byteOffset >= buffer.length) {\n    if (dir) return -1\n    else byteOffset = buffer.length - 1\n  } else if (byteOffset < 0) {\n    if (dir) byteOffset = 0\n    else return -1\n  }\n\n  // Normalize val\n  if (typeof val === 'string') {\n    val = Buffer.from(val, encoding)\n  }\n\n  // Finally, search either indexOf (if dir is true) or lastIndexOf\n  if (Buffer.isBuffer(val)) {\n    // Special case: looking for empty string/buffer always fails\n    if (val.length === 0) {\n      return -1\n    }\n    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)\n  } else if (typeof val === 'number') {\n    val = val & 0xFF // Search for a byte value [0-255]\n    if (Buffer.TYPED_ARRAY_SUPPORT &&\n        typeof Uint8Array.prototype.indexOf === 'function') {\n      if (dir) {\n        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)\n      } else {\n        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)\n      }\n    }\n    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)\n  }\n\n  throw new TypeError('val must be string, number or Buffer')\n}\n\nfunction arrayIndexOf (arr, val, byteOffset, encoding, dir) {\n  var indexSize = 1\n  var arrLength = arr.length\n  var valLength = val.length\n\n  if (encoding !== undefined) {\n    encoding = String(encoding).toLowerCase()\n    if (encoding === 'ucs2' || encoding === 'ucs-2' ||\n        encoding === 'utf16le' || encoding === 'utf-16le') {\n      if (arr.length < 2 || val.length < 2) {\n        return -1\n      }\n      indexSize = 2\n      arrLength /= 2\n      valLength /= 2\n      byteOffset /= 2\n    }\n  }\n\n  function read (buf, i) {\n    if (indexSize === 1) {\n      return buf[i]\n    } else {\n      return buf.readUInt16BE(i * indexSize)\n    }\n  }\n\n  var i\n  if (dir) {\n    var foundIndex = -1\n    for (i = byteOffset; i < arrLength; i++) {\n      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {\n        if (foundIndex === -1) foundIndex = i\n        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize\n      } else {\n        if (foundIndex !== -1) i -= i - foundIndex\n        foundIndex = -1\n      }\n    }\n  } else {\n    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength\n    for (i = byteOffset; i >= 0; i--) {\n      var found = true\n      for (var j = 0; j < valLength; j++) {\n        if (read(arr, i + j) !== read(val, j)) {\n          found = false\n          break\n        }\n      }\n      if (found) return i\n    }\n  }\n\n  return -1\n}\n\nBuffer.prototype.includes = function includes (val, byteOffset, encoding) {\n  return this.indexOf(val, byteOffset, encoding) !== -1\n}\n\nBuffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)\n}\n\nBuffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)\n}\n\nfunction hexWrite (buf, string, offset, length) {\n  offset = Number(offset) || 0\n  var remaining = buf.length - offset\n  if (!length) {\n    length = remaining\n  } else {\n    length = Number(length)\n    if (length > remaining) {\n      length = remaining\n    }\n  }\n\n  // must be an even number of digits\n  var strLen = string.length\n  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')\n\n  if (length > strLen / 2) {\n    length = strLen / 2\n  }\n  for (var i = 0; i < length; ++i) {\n    var parsed = parseInt(string.substr(i * 2, 2), 16)\n    if (isNaN(parsed)) return i\n    buf[offset + i] = parsed\n  }\n  return i\n}\n\nfunction utf8Write (buf, string, offset, length) {\n  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nfunction asciiWrite (buf, string, offset, length) {\n  return blitBuffer(asciiToBytes(string), buf, offset, length)\n}\n\nfunction latin1Write (buf, string, offset, length) {\n  return asciiWrite(buf, string, offset, length)\n}\n\nfunction base64Write (buf, string, offset, length) {\n  return blitBuffer(base64ToBytes(string), buf, offset, length)\n}\n\nfunction ucs2Write (buf, string, offset, length) {\n  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nBuffer.prototype.write = function write (string, offset, length, encoding) {\n  // Buffer#write(string)\n  if (offset === undefined) {\n    encoding = 'utf8'\n    length = this.length\n    offset = 0\n  // Buffer#write(string, encoding)\n  } else if (length === undefined && typeof offset === 'string') {\n    encoding = offset\n    length = this.length\n    offset = 0\n  // Buffer#write(string, offset[, length][, encoding])\n  } else if (isFinite(offset)) {\n    offset = offset | 0\n    if (isFinite(length)) {\n      length = length | 0\n      if (encoding === undefined) encoding = 'utf8'\n    } else {\n      encoding = length\n      length = undefined\n    }\n  // legacy write(string, encoding, offset, length) - remove in v0.13\n  } else {\n    throw new Error(\n      'Buffer.write(string, encoding, offset[, length]) is no longer supported'\n    )\n  }\n\n  var remaining = this.length - offset\n  if (length === undefined || length > remaining) length = remaining\n\n  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {\n    throw new RangeError('Attempt to write outside buffer bounds')\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'hex':\n        return hexWrite(this, string, offset, length)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Write(this, string, offset, length)\n\n      case 'ascii':\n        return asciiWrite(this, string, offset, length)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Write(this, string, offset, length)\n\n      case 'base64':\n        // Warning: maxLength not taken into account in base64Write\n        return base64Write(this, string, offset, length)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return ucs2Write(this, string, offset, length)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\nBuffer.prototype.toJSON = function toJSON () {\n  return {\n    type: 'Buffer',\n    data: Array.prototype.slice.call(this._arr || this, 0)\n  }\n}\n\nfunction base64Slice (buf, start, end) {\n  if (start === 0 && end === buf.length) {\n    return base64.fromByteArray(buf)\n  } else {\n    return base64.fromByteArray(buf.slice(start, end))\n  }\n}\n\nfunction utf8Slice (buf, start, end) {\n  end = Math.min(buf.length, end)\n  var res = []\n\n  var i = start\n  while (i < end) {\n    var firstByte = buf[i]\n    var codePoint = null\n    var bytesPerSequence = (firstByte > 0xEF) ? 4\n      : (firstByte > 0xDF) ? 3\n      : (firstByte > 0xBF) ? 2\n      : 1\n\n    if (i + bytesPerSequence <= end) {\n      var secondByte, thirdByte, fourthByte, tempCodePoint\n\n      switch (bytesPerSequence) {\n        case 1:\n          if (firstByte < 0x80) {\n            codePoint = firstByte\n          }\n          break\n        case 2:\n          secondByte = buf[i + 1]\n          if ((secondByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)\n            if (tempCodePoint > 0x7F) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 3:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)\n            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 4:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          fourthByte = buf[i + 3]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)\n            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {\n              codePoint = tempCodePoint\n            }\n          }\n      }\n    }\n\n    if (codePoint === null) {\n      // we did not generate a valid codePoint so insert a\n      // replacement char (U+FFFD) and advance only 1 byte\n      codePoint = 0xFFFD\n      bytesPerSequence = 1\n    } else if (codePoint > 0xFFFF) {\n      // encode to utf16 (surrogate pair dance)\n      codePoint -= 0x10000\n      res.push(codePoint >>> 10 & 0x3FF | 0xD800)\n      codePoint = 0xDC00 | codePoint & 0x3FF\n    }\n\n    res.push(codePoint)\n    i += bytesPerSequence\n  }\n\n  return decodeCodePointsArray(res)\n}\n\n// Based on http://stackoverflow.com/a/22747272/680742, the browser with\n// the lowest limit is Chrome, with 0x10000 args.\n// We go 1 magnitude less, for safety\nvar MAX_ARGUMENTS_LENGTH = 0x1000\n\nfunction decodeCodePointsArray (codePoints) {\n  var len = codePoints.length\n  if (len <= MAX_ARGUMENTS_LENGTH) {\n    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()\n  }\n\n  // Decode in chunks to avoid \"call stack size exceeded\".\n  var res = ''\n  var i = 0\n  while (i < len) {\n    res += String.fromCharCode.apply(\n      String,\n      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)\n    )\n  }\n  return res\n}\n\nfunction asciiSlice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i] & 0x7F)\n  }\n  return ret\n}\n\nfunction latin1Slice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i])\n  }\n  return ret\n}\n\nfunction hexSlice (buf, start, end) {\n  var len = buf.length\n\n  if (!start || start < 0) start = 0\n  if (!end || end < 0 || end > len) end = len\n\n  var out = ''\n  for (var i = start; i < end; ++i) {\n    out += toHex(buf[i])\n  }\n  return out\n}\n\nfunction utf16leSlice (buf, start, end) {\n  var bytes = buf.slice(start, end)\n  var res = ''\n  for (var i = 0; i < bytes.length; i += 2) {\n    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)\n  }\n  return res\n}\n\nBuffer.prototype.slice = function slice (start, end) {\n  var len = this.length\n  start = ~~start\n  end = end === undefined ? len : ~~end\n\n  if (start < 0) {\n    start += len\n    if (start < 0) start = 0\n  } else if (start > len) {\n    start = len\n  }\n\n  if (end < 0) {\n    end += len\n    if (end < 0) end = 0\n  } else if (end > len) {\n    end = len\n  }\n\n  if (end < start) end = start\n\n  var newBuf\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    newBuf = this.subarray(start, end)\n    newBuf.__proto__ = Buffer.prototype\n  } else {\n    var sliceLen = end - start\n    newBuf = new Buffer(sliceLen, undefined)\n    for (var i = 0; i < sliceLen; ++i) {\n      newBuf[i] = this[i + start]\n    }\n  }\n\n  return newBuf\n}\n\n/*\n * Need to make sure that buffer isn't trying to write out of bounds.\n */\nfunction checkOffset (offset, ext, length) {\n  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')\n  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')\n}\n\nBuffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    checkOffset(offset, byteLength, this.length)\n  }\n\n  var val = this[offset + --byteLength]\n  var mul = 1\n  while (byteLength > 0 && (mul *= 0x100)) {\n    val += this[offset + --byteLength] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  return this[offset]\n}\n\nBuffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return this[offset] | (this[offset + 1] << 8)\n}\n\nBuffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return (this[offset] << 8) | this[offset + 1]\n}\n\nBuffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return ((this[offset]) |\n      (this[offset + 1] << 8) |\n      (this[offset + 2] << 16)) +\n      (this[offset + 3] * 0x1000000)\n}\n\nBuffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] * 0x1000000) +\n    ((this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    this[offset + 3])\n}\n\nBuffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var i = byteLength\n  var mul = 1\n  var val = this[offset + --i]\n  while (i > 0 && (mul *= 0x100)) {\n    val += this[offset + --i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readInt8 = function readInt8 (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  if (!(this[offset] & 0x80)) return (this[offset])\n  return ((0xff - this[offset] + 1) * -1)\n}\n\nBuffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset] | (this[offset + 1] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset + 1] | (this[offset] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset]) |\n    (this[offset + 1] << 8) |\n    (this[offset + 2] << 16) |\n    (this[offset + 3] << 24)\n}\n\nBuffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] << 24) |\n    (this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    (this[offset + 3])\n}\n\nBuffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, true, 23, 4)\n}\n\nBuffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, false, 23, 4)\n}\n\nBuffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, true, 52, 8)\n}\n\nBuffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, false, 52, 8)\n}\n\nfunction checkInt (buf, value, offset, ext, max, min) {\n  if (!Buffer.isBuffer(buf)) throw new TypeError('\"buffer\" argument must be a Buffer instance')\n  if (value > max || value < min) throw new RangeError('\"value\" argument is out of bounds')\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n}\n\nBuffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var mul = 1\n  var i = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nfunction objectWriteUInt16 (buf, value, offset, littleEndian) {\n  if (value < 0) value = 0xffff + value + 1\n  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {\n    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>\n      (littleEndian ? i : 1 - i) * 8\n  }\n}\n\nBuffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n  } else {\n    objectWriteUInt16(this, value, offset, true)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 8)\n    this[offset + 1] = (value & 0xff)\n  } else {\n    objectWriteUInt16(this, value, offset, false)\n  }\n  return offset + 2\n}\n\nfunction objectWriteUInt32 (buf, value, offset, littleEndian) {\n  if (value < 0) value = 0xffffffff + value + 1\n  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {\n    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff\n  }\n}\n\nBuffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset + 3] = (value >>> 24)\n    this[offset + 2] = (value >>> 16)\n    this[offset + 1] = (value >>> 8)\n    this[offset] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, true)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 24)\n    this[offset + 1] = (value >>> 16)\n    this[offset + 2] = (value >>> 8)\n    this[offset + 3] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, false)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) {\n    var limit = Math.pow(2, 8 * byteLength - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = 0\n  var mul = 1\n  var sub = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) {\n    var limit = Math.pow(2, 8 * byteLength - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  var sub = 0\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)\n  if (value < 0) value = 0xff + value + 1\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n  } else {\n    objectWriteUInt16(this, value, offset, true)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 8)\n    this[offset + 1] = (value & 0xff)\n  } else {\n    objectWriteUInt16(this, value, offset, false)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n    this[offset + 2] = (value >>> 16)\n    this[offset + 3] = (value >>> 24)\n  } else {\n    objectWriteUInt32(this, value, offset, true)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (value < 0) value = 0xffffffff + value + 1\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 24)\n    this[offset + 1] = (value >>> 16)\n    this[offset + 2] = (value >>> 8)\n    this[offset + 3] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, false)\n  }\n  return offset + 4\n}\n\nfunction checkIEEE754 (buf, value, offset, ext, max, min) {\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n  if (offset < 0) throw new RangeError('Index out of range')\n}\n\nfunction writeFloat (buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 23, 4)\n  return offset + 4\n}\n\nBuffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, false, noAssert)\n}\n\nfunction writeDouble (buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 52, 8)\n  return offset + 8\n}\n\nBuffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, false, noAssert)\n}\n\n// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)\nBuffer.prototype.copy = function copy (target, targetStart, start, end) {\n  if (!start) start = 0\n  if (!end && end !== 0) end = this.length\n  if (targetStart >= target.length) targetStart = target.length\n  if (!targetStart) targetStart = 0\n  if (end > 0 && end < start) end = start\n\n  // Copy 0 bytes; we're done\n  if (end === start) return 0\n  if (target.length === 0 || this.length === 0) return 0\n\n  // Fatal error conditions\n  if (targetStart < 0) {\n    throw new RangeError('targetStart out of bounds')\n  }\n  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')\n  if (end < 0) throw new RangeError('sourceEnd out of bounds')\n\n  // Are we oob?\n  if (end > this.length) end = this.length\n  if (target.length - targetStart < end - start) {\n    end = target.length - targetStart + start\n  }\n\n  var len = end - start\n  var i\n\n  if (this === target && start < targetStart && targetStart < end) {\n    // descending copy from end\n    for (i = len - 1; i >= 0; --i) {\n      target[i + targetStart] = this[i + start]\n    }\n  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {\n    // ascending copy from start\n    for (i = 0; i < len; ++i) {\n      target[i + targetStart] = this[i + start]\n    }\n  } else {\n    Uint8Array.prototype.set.call(\n      target,\n      this.subarray(start, start + len),\n      targetStart\n    )\n  }\n\n  return len\n}\n\n// Usage:\n//    buffer.fill(number[, offset[, end]])\n//    buffer.fill(buffer[, offset[, end]])\n//    buffer.fill(string[, offset[, end]][, encoding])\nBuffer.prototype.fill = function fill (val, start, end, encoding) {\n  // Handle string cases:\n  if (typeof val === 'string') {\n    if (typeof start === 'string') {\n      encoding = start\n      start = 0\n      end = this.length\n    } else if (typeof end === 'string') {\n      encoding = end\n      end = this.length\n    }\n    if (val.length === 1) {\n      var code = val.charCodeAt(0)\n      if (code < 256) {\n        val = code\n      }\n    }\n    if (encoding !== undefined && typeof encoding !== 'string') {\n      throw new TypeError('encoding must be a string')\n    }\n    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {\n      throw new TypeError('Unknown encoding: ' + encoding)\n    }\n  } else if (typeof val === 'number') {\n    val = val & 255\n  }\n\n  // Invalid ranges are not set to a default, so can range check early.\n  if (start < 0 || this.length < start || this.length < end) {\n    throw new RangeError('Out of range index')\n  }\n\n  if (end <= start) {\n    return this\n  }\n\n  start = start >>> 0\n  end = end === undefined ? this.length : end >>> 0\n\n  if (!val) val = 0\n\n  var i\n  if (typeof val === 'number') {\n    for (i = start; i < end; ++i) {\n      this[i] = val\n    }\n  } else {\n    var bytes = Buffer.isBuffer(val)\n      ? val\n      : utf8ToBytes(new Buffer(val, encoding).toString())\n    var len = bytes.length\n    for (i = 0; i < end - start; ++i) {\n      this[i + start] = bytes[i % len]\n    }\n  }\n\n  return this\n}\n\n// HELPER FUNCTIONS\n// ================\n\nvar INVALID_BASE64_RE = /[^+\\/0-9A-Za-z-_]/g\n\nfunction base64clean (str) {\n  // Node strips out invalid characters like \\n and \\t from the string, base64-js does not\n  str = stringtrim(str).replace(INVALID_BASE64_RE, '')\n  // Node converts strings with length < 2 to ''\n  if (str.length < 2) return ''\n  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not\n  while (str.length % 4 !== 0) {\n    str = str + '='\n  }\n  return str\n}\n\nfunction stringtrim (str) {\n  if (str.trim) return str.trim()\n  return str.replace(/^\\s+|\\s+$/g, '')\n}\n\nfunction toHex (n) {\n  if (n < 16) return '0' + n.toString(16)\n  return n.toString(16)\n}\n\nfunction utf8ToBytes (string, units) {\n  units = units || Infinity\n  var codePoint\n  var length = string.length\n  var leadSurrogate = null\n  var bytes = []\n\n  for (var i = 0; i < length; ++i) {\n    codePoint = string.charCodeAt(i)\n\n    // is surrogate component\n    if (codePoint > 0xD7FF && codePoint < 0xE000) {\n      // last char was a lead\n      if (!leadSurrogate) {\n        // no lead yet\n        if (codePoint > 0xDBFF) {\n          // unexpected trail\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        } else if (i + 1 === length) {\n          // unpaired lead\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        }\n\n        // valid lead\n        leadSurrogate = codePoint\n\n        continue\n      }\n\n      // 2 leads in a row\n      if (codePoint < 0xDC00) {\n        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n        leadSurrogate = codePoint\n        continue\n      }\n\n      // valid surrogate pair\n      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000\n    } else if (leadSurrogate) {\n      // valid bmp char, but last char was a lead\n      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n    }\n\n    leadSurrogate = null\n\n    // encode utf8\n    if (codePoint < 0x80) {\n      if ((units -= 1) < 0) break\n      bytes.push(codePoint)\n    } else if (codePoint < 0x800) {\n      if ((units -= 2) < 0) break\n      bytes.push(\n        codePoint >> 0x6 | 0xC0,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x10000) {\n      if ((units -= 3) < 0) break\n      bytes.push(\n        codePoint >> 0xC | 0xE0,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x110000) {\n      if ((units -= 4) < 0) break\n      bytes.push(\n        codePoint >> 0x12 | 0xF0,\n        codePoint >> 0xC & 0x3F | 0x80,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else {\n      throw new Error('Invalid code point')\n    }\n  }\n\n  return bytes\n}\n\nfunction asciiToBytes (str) {\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    // Node's code seems to be doing this and not & 0x7F..\n    byteArray.push(str.charCodeAt(i) & 0xFF)\n  }\n  return byteArray\n}\n\nfunction utf16leToBytes (str, units) {\n  var c, hi, lo\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    if ((units -= 2) < 0) break\n\n    c = str.charCodeAt(i)\n    hi = c >> 8\n    lo = c % 256\n    byteArray.push(lo)\n    byteArray.push(hi)\n  }\n\n  return byteArray\n}\n\nfunction base64ToBytes (str) {\n  return base64.toByteArray(base64clean(str))\n}\n\nfunction blitBuffer (src, dst, offset, length) {\n  for (var i = 0; i < length; ++i) {\n    if ((i + offset >= dst.length) || (i >= src.length)) break\n    dst[i + offset] = src[i]\n  }\n  return i\n}\n\nfunction isnan (val) {\n  return val !== val // eslint-disable-line no-self-compare\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// (webpack)/~/node-libs-browser/~/buffer/index.js\n// module id = 13\n// module chunks = 0","require('jquery');\r\n\r\nrequire(\"./../Core/Content/libs/jquery.validate.min.js\");\r\nrequire(\"./../Core/Content/libs/jquery.unobtrusive-ajax.min.js\");\r\nrequire(\"./../Core/Content/libs/jquery.validate.unobtrusive.min.js\");\r\n\r\nimport appInitializer from \"./../Core/Content/scripts/AppInitializer\";\r\nimport helpers from \"./../Core/Content/scripts/Helpers\";\r\n\r\nrequire(\"./_comments.css\");\r\n\r\nvar CommentOverview = function (selector) {\r\n    var commentOverviewQuillOptions = {\r\n        theme: 'snow',\r\n        modules: {\r\n            toolbar: [['bold', 'italic', 'underline'], ['link']]\r\n        }\r\n    };\r\n\r\n    var holders = $(selector);\r\n    if (!holders || holders.length === 0) {\r\n        return;\r\n    }\r\n    $.validator.unobtrusive.parse(selector);\r\n    holders.each(function () {\r\n        var $this = $(this);\r\n        initCreateControl($this);\r\n        $this.find('[id^=js-comment-view-]').each(function () {\r\n            new Comment(this);\r\n        });\r\n    });\r\n\r\n    function initCreateControl(holder) {\r\n        var createControls = holder.find('.js-comment-create');\r\n        createControls.each(function () {\r\n            var $this = $(this);\r\n            var button = $this.find('.js-comment-create-btn');\r\n\r\n            if ($this.data('parentid')) {\r\n                return true;\r\n            }\r\n\r\n            $this.on('submit', function () {\r\n                $this.valid();\r\n            });\r\n\r\n            var dataStorage = $this.find('.js-hidden-comment-create-description')[0];\r\n            var descriptionElem = $this.find('.js-comment-create-description')[0];\r\n            var quill = helpers.initQuill(descriptionElem, dataStorage, commentOverviewQuillOptions);\r\n            quill.on('text-change', function () {\r\n                if (quill.getLength() > 1) {\r\n                    button.removeAttr(\"disabled\");\r\n                } else {\r\n                    button.attr(\"disabled\", \"disabled\");\r\n                }\r\n            });\r\n\r\n            quill.setText('');\r\n            dataStorage.value = '';\r\n        });\r\n    }\r\n}\r\n\r\nvar Comment = function (selector) {\r\n    var commentQuillOptions = {\r\n        theme: 'snow',\r\n        modules: {\r\n            toolbar: [['bold', 'italic', 'underline'], ['link']]\r\n        }\r\n    };\r\n\r\n    var holders = $(selector);\r\n    if (!holders || holders.length === 0) {\r\n        return;\r\n    }\r\n\r\n    holders.each(function () {\r\n        var $this = $(this);\r\n        initEdit($this);\r\n        initReply($this);\r\n        initDelete($this);\r\n    });\r\n\r\n    function initEdit(holder) {\r\n        var editlink = findControl(holder, '.js-comment-editlink');\r\n        var hideEditlink = findControl(holder, '.js-comment-hideEditLink');\r\n\r\n        if (editlink.length === 0 || hideEditlink.length === 0) {\r\n            return;\r\n        }\r\n\r\n        var editControlContainer = findControl(holder, '.js-comment-editContainer');\r\n        var descriptionControl = findControl(holder, '.js-comment-description');\r\n\r\n        editlink.on('click', function () {\r\n            editlink.hide();\r\n            hideEditlink.show();\r\n            descriptionControl.hide();\r\n            editControlContainer.show();\r\n            \r\n        });\r\n\r\n        hideEditlink.on('click', function () {\r\n            editlink.show();\r\n            hideEditlink.hide();\r\n            descriptionControl.show();\r\n            editControlContainer.hide();\r\n        });\r\n\r\n        var dataStorage = findControl(holder, '.js-hidden-comment-edit-description')[0];\r\n        var descriptionElem = findControl(holder, '.js-comment-edit-description')[0];\r\n        var quill = helpers.initQuill(descriptionElem, dataStorage, commentQuillOptions);\r\n        var button = holder.find('.js-comment-edit-btn');\r\n        button.removeAttr(\"disabled\");\r\n        quill.on('text-change', function () {\r\n            if (quill.getLength() > 1) {\r\n                button.removeAttr(\"disabled\");\r\n            } else {\r\n                button.attr(\"disabled\", \"disabled\");\r\n            }\r\n        });\r\n    }\r\n\r\n    function initReply(holder) {\r\n        var showReplyLink = findControl(holder, '.js-comment-showReplyLink');\r\n        var hideReplyLink = findControl(holder, '.js-comment-hideReplyLink');\r\n\r\n        if (showReplyLink.length === 0 || hideReplyLink.length === 0) {\r\n            return;\r\n        }\r\n\r\n        var commentReply = findControl(holder, '.js-comment-reply');\r\n\r\n        showReplyLink.on('click', function () {\r\n            showReplyLink.hide();\r\n            hideReplyLink.show();\r\n            commentReply.show();\r\n            scrollToComment($(this));\r\n        });\r\n\r\n        hideReplyLink.on('click', function () {\r\n            showReplyLink.show();\r\n            hideReplyLink.hide();\r\n            commentReply.hide();\r\n        });\r\n\r\n        var dataStorage = findControl(holder, '.js-hidden-comment-create-description')[0];\r\n        var descriptionElem = findControl(holder, '.js-comment-create-description')[0];\r\n        var quill = helpers.initQuill(descriptionElem, dataStorage, commentQuillOptions);\r\n        var button = holder.find('.js-comment-create-btn');\r\n        quill.on('text-change', function () {\r\n            if (quill.getLength() > 1) {\r\n                button.removeAttr(\"disabled\");\r\n            } else {\r\n                button.attr(\"disabled\", \"disabled\");\r\n            }\r\n        });\r\n\r\n        function scrollToComment(el) {\r\n            var comment = el.closest('.comments__list-body').find('.js-comment-reply');\r\n            $('html, body').animate({\r\n                scrollTop: comment.offset().top\r\n            }, 500);\r\n        }\r\n    }\r\n\r\n    function initDelete(holder) {\r\n        var deleteLink = findControl(holder, '.js-comment-delete');\r\n\r\n        if (deleteLink.length === 0) {\r\n            return;\r\n        }\r\n\r\n        deleteLink.on('click', function () {\r\n            return confirm($(this).data('text'));\r\n        });\r\n    }\r\n\r\n    function findControl(holder, selector) {\r\n        return holder.find(selector).filter(function () {\r\n            var $this = $(this);\r\n            var parent = $this.closest('[id^=js-comment-view-]');\r\n            return parent.data('id') === holder.data('id');\r\n        });\r\n    }\r\n}\r\n\r\nappInitializer.add(function () {\r\n    new CommentOverview('[id^=js-comments-overview-]');\r\n});\r\n\r\nwindow.App = window.App || {};\r\nwindow.CommentOverview = CommentOverview;\n\n\n// WEBPACK FOOTER //\n// ./App_Plugins/Comments/Comment.js","window.$ = window.jQuery = require('jquery');\n\n\n// WEBPACK FOOTER //\n// ./App_Plugins/Core/Content/Scripts/Core.js","/* NUGET: BEGIN LICENSE TEXT\r\n *\r\n * Microsoft grants you the right to use these script files for the sole\r\n * purpose of either: (i) interacting through your browser with the Microsoft\r\n * website or online service, subject to the applicable licensing or use\r\n * terms; or (ii) using the files as included with a Microsoft product subject\r\n * to that product's license terms. Microsoft reserves all other rights to the\r\n * files not expressly granted by Microsoft, whether by implication, estoppel\r\n * or otherwise. Insofar as a script file is dual licensed under GPL,\r\n * Microsoft neither took the code under GPL nor distributes it thereunder but\r\n * under the terms set out in this paragraph. All notices and licenses\r\n * below are for informational purposes only.\r\n *\r\n * NUGET: END LICENSE TEXT */\r\n/*\r\n** Unobtrusive Ajax support library for jQuery\r\n** Copyright (C) Microsoft Corporation. All rights reserved.\r\n*/\r\n(function (a) { var b = \"unobtrusiveAjaxClick\", d = \"unobtrusiveAjaxClickTarget\", h = \"unobtrusiveValidation\"; function c(d, b) { var a = window, c = (d || \"\").split(\".\"); while (a && c.length) a = a[c.shift()]; if (typeof a === \"function\") return a; b.push(d); return Function.constructor.apply(null, b) } function e(a) { return a === \"GET\" || a === \"POST\" } function g(b, a) { !e(a) && b.setRequestHeader(\"X-HTTP-Method-Override\", a) } function i(c, b, e) { var d; if (e.indexOf(\"application/x-javascript\") !== -1) return; d = (c.getAttribute(\"data-ajax-mode\") || \"\").toUpperCase(); a(c.getAttribute(\"data-ajax-update\")).each(function (f, c) { var e; switch (d) { case \"BEFORE\": e = c.firstChild; a(\"<div />\").html(b).contents().each(function () { c.insertBefore(this, e) }); break; case \"AFTER\": a(\"<div />\").html(b).contents().each(function () { c.appendChild(this) }); break; case \"REPLACE-WITH\": a(c).replaceWith(b); break; default: a(c).html(b) } }) } function f(b, d) { var j, k, f, h; j = b.getAttribute(\"data-ajax-confirm\"); if (j && !window.confirm(j)) return; k = a(b.getAttribute(\"data-ajax-loading\")); h = parseInt(b.getAttribute(\"data-ajax-loading-duration\"), 10) || 0; a.extend(d, { type: b.getAttribute(\"data-ajax-method\") || undefined, url: b.getAttribute(\"data-ajax-url\") || undefined, cache: !!b.getAttribute(\"data-ajax-cache\"), beforeSend: function (d) { var a; g(d, f); a = c(b.getAttribute(\"data-ajax-begin\"), [\"xhr\"]).apply(b, arguments); a !== false && k.show(h); return a }, complete: function () { k.hide(h); c(b.getAttribute(\"data-ajax-complete\"), [\"xhr\", \"status\"]).apply(b, arguments) }, success: function (a, e, d) { i(b, a, d.getResponseHeader(\"Content-Type\") || \"text/html\"); c(b.getAttribute(\"data-ajax-success\"), [\"data\", \"status\", \"xhr\"]).apply(b, arguments) }, error: function () { c(b.getAttribute(\"data-ajax-failure\"), [\"xhr\", \"status\", \"error\"]).apply(b, arguments) } }); d.data.push({ name: \"X-Requested-With\", value: \"XMLHttpRequest\" }); f = d.type.toUpperCase(); if (!e(f)) { d.type = \"POST\"; d.data.push({ name: \"X-HTTP-Method-Override\", value: f }) } a.ajax(d) } function j(c) { var b = a(c).data(h); return !b || !b.validate || b.validate() } a(document).on(\"click\", \"a[data-ajax=true]\", function (a) { a.preventDefault(); f(this, { url: this.href, type: \"GET\", data: [] }) }); a(document).on(\"click\", \"form[data-ajax=true] input[type=image]\", function (c) { var g = c.target.name, e = a(c.target), f = a(e.parents(\"form\")[0]), d = e.offset(); f.data(b, [{ name: g + \".x\", value: Math.round(c.pageX - d.left) }, { name: g + \".y\", value: Math.round(c.pageY - d.top) }]); setTimeout(function () { f.removeData(b) }, 0) }); a(document).on(\"click\", \"form[data-ajax=true] :submit\", function (e) { var g = e.currentTarget.name, f = a(e.target), c = a(f.parents(\"form\")[0]); c.data(b, g ? [{ name: g, value: e.currentTarget.value }] : []); c.data(d, f); setTimeout(function () { c.removeData(b); c.removeData(d) }, 0) }); a(document).on(\"submit\", \"form[data-ajax=true]\", function (h) { var e = a(this).data(b) || [], c = a(this).data(d), g = c && c.hasClass(\"cancel\"); h.preventDefault(); if (!g && !j(this)) return; f(this, { url: this.action, type: this.method || \"GET\", data: e.concat(a(this).serializeArray()) }) }) })(jQuery);\n\n\n// WEBPACK FOOTER //\n// ./App_Plugins/Core/Content/libs/jquery.unobtrusive-ajax.min.js","/**\r\n * jQuery Validation Plugin 1.8.0\r\n *\r\n * http://bassistance.de/jquery-plugins/jquery-plugin-validation/\r\n * http://docs.jquery.com/Plugins/Validation\r\n *\r\n * Copyright (c) 2006 - 2011 Jörn Zaefferer\r\n *\r\n * Dual licensed under the MIT and GPL licenses:\r\n *   http://www.opensource.org/licenses/mit-license.php\r\n *   http://www.gnu.org/licenses/gpl.html\r\n */\r\n(function(c){c.extend(c.fn,{validate:function(a){if(this.length){var b=c.data(this[0],\"validator\");if(b)return b;b=new c.validator(a,this[0]);c.data(this[0],\"validator\",b);if(b.settings.onsubmit){this.find(\"input, button\").filter(\".cancel\").click(function(){b.cancelSubmit=true});b.settings.submitHandler&&this.find(\"input, button\").filter(\":submit\").click(function(){b.submitButton=this});this.submit(function(d){function e(){if(b.settings.submitHandler){if(b.submitButton)var f=c(\"<input type='hidden'/>\").attr(\"name\",\r\nb.submitButton.name).val(b.submitButton.value).appendTo(b.currentForm);b.settings.submitHandler.call(b,b.currentForm);b.submitButton&&f.remove();return false}return true}b.settings.debug&&d.preventDefault();if(b.cancelSubmit){b.cancelSubmit=false;return e()}if(b.form()){if(b.pendingRequest){b.formSubmitted=true;return false}return e()}else{b.focusInvalid();return false}})}return b}else a&&a.debug&&window.console&&console.warn(\"nothing selected, can't validate, returning nothing\")},valid:function(){if(c(this[0]).is(\"form\"))return this.validate().form();\r\nelse{var a=true,b=c(this[0].form).validate();this.each(function(){a&=b.element(this)});return a}},removeAttrs:function(a){var b={},d=this;c.each(a.split(/\\s/),function(e,f){b[f]=d.attr(f);d.removeAttr(f)});return b},rules:function(a,b){var d=this[0];if(a){var e=c.data(d.form,\"validator\").settings,f=e.rules,g=c.validator.staticRules(d);switch(a){case \"add\":c.extend(g,c.validator.normalizeRule(b));f[d.name]=g;if(b.messages)e.messages[d.name]=c.extend(e.messages[d.name],b.messages);break;case \"remove\":if(!b){delete f[d.name];\r\nreturn g}var h={};c.each(b.split(/\\s/),function(j,i){h[i]=g[i];delete g[i]});return h}}d=c.validator.normalizeRules(c.extend({},c.validator.metadataRules(d),c.validator.classRules(d),c.validator.attributeRules(d),c.validator.staticRules(d)),d);if(d.required){e=d.required;delete d.required;d=c.extend({required:e},d)}return d}});c.extend(c.expr[\":\"],{blank:function(a){return!c.trim(\"\"+a.value)},filled:function(a){return!!c.trim(\"\"+a.value)},unchecked:function(a){return!a.checked}});c.validator=function(a,\r\nb){this.settings=c.extend(true,{},c.validator.defaults,a);this.currentForm=b;this.init()};c.validator.format=function(a,b){if(arguments.length==1)return function(){var d=c.makeArray(arguments);d.unshift(a);return c.validator.format.apply(this,d)};if(arguments.length>2&&b.constructor!=Array)b=c.makeArray(arguments).slice(1);if(b.constructor!=Array)b=[b];c.each(b,function(d,e){a=a.replace(RegExp(\"\\\\{\"+d+\"\\\\}\",\"g\"),e)});return a};c.extend(c.validator,{defaults:{messages:{},groups:{},rules:{},errorClass:\"error\",\r\nvalidClass:\"valid\",errorElement:\"label\",focusInvalid:true,errorContainer:c([]),errorLabelContainer:c([]),onsubmit:true,ignore:[],ignoreTitle:false,onfocusin:function(a){this.lastActive=a;if(this.settings.focusCleanup&&!this.blockFocusCleanup){this.settings.unhighlight&&this.settings.unhighlight.call(this,a,this.settings.errorClass,this.settings.validClass);this.addWrapper(this.errorsFor(a)).hide()}},onfocusout:function(a){if(!this.checkable(a)&&(a.name in this.submitted||!this.optional(a)))this.element(a)},\r\nonkeyup:function(a){if(a.name in this.submitted||a==this.lastElement)this.element(a)},onclick:function(a){if(a.name in this.submitted)this.element(a);else a.parentNode.name in this.submitted&&this.element(a.parentNode)},highlight:function(a,b,d){c(a).addClass(b).removeClass(d)},unhighlight:function(a,b,d){c(a).removeClass(b).addClass(d)}},setDefaults:function(a){c.extend(c.validator.defaults,a)},messages:{required:\"This field is required.\",remote:\"Please fix this field.\",email:\"Please enter a valid email address.\",\r\nurl:\"Please enter a valid URL.\",date:\"Please enter a valid date.\",dateISO:\"Please enter a valid date (ISO).\",number:\"Please enter a valid number.\",digits:\"Please enter only digits.\",creditcard:\"Please enter a valid credit card number.\",equalTo:\"Please enter the same value again.\",accept:\"Please enter a value with a valid extension.\",maxlength:c.validator.format(\"Please enter no more than {0} characters.\"),minlength:c.validator.format(\"Please enter at least {0} characters.\"),rangelength:c.validator.format(\"Please enter a value between {0} and {1} characters long.\"),\r\nrange:c.validator.format(\"Please enter a value between {0} and {1}.\"),max:c.validator.format(\"Please enter a value less than or equal to {0}.\"),min:c.validator.format(\"Please enter a value greater than or equal to {0}.\")},autoCreateRanges:false,prototype:{init:function(){function a(e){var f=c.data(this[0].form,\"validator\");e=\"on\"+e.type.replace(/^validate/,\"\");f.settings[e]&&f.settings[e].call(f,this[0])}this.labelContainer=c(this.settings.errorLabelContainer);this.errorContext=this.labelContainer.length&&\r\nthis.labelContainer||c(this.currentForm);this.containers=c(this.settings.errorContainer).add(this.settings.errorLabelContainer);this.submitted={};this.valueCache={};this.pendingRequest=0;this.pending={};this.invalid={};this.reset();var b=this.groups={};c.each(this.settings.groups,function(e,f){c.each(f.split(/\\s/),function(g,h){b[h]=e})});var d=this.settings.rules;c.each(d,function(e,f){d[e]=c.validator.normalizeRule(f)});c(this.currentForm).validateDelegate(\":text, :password, :file, select, textarea\",\r\n\"focusin focusout keyup\",a).validateDelegate(\":radio, :checkbox, select, option\",\"click\",a);this.settings.invalidHandler&&c(this.currentForm).bind(\"invalid-form.validate\",this.settings.invalidHandler)},form:function(){this.checkForm();c.extend(this.submitted,this.errorMap);this.invalid=c.extend({},this.errorMap);this.valid()||c(this.currentForm).triggerHandler(\"invalid-form\",[this]);this.showErrors();return this.valid()},checkForm:function(){this.prepareForm();for(var a=0,b=this.currentElements=this.elements();b[a];a++)this.check(b[a]);\r\nreturn this.valid()},element:function(a){this.lastElement=a=this.clean(a);this.prepareElement(a);this.currentElements=c(a);var b=this.check(a);if(b)delete this.invalid[a.name];else this.invalid[a.name]=true;if(!this.numberOfInvalids())this.toHide=this.toHide.add(this.containers);this.showErrors();return b},showErrors:function(a){if(a){c.extend(this.errorMap,a);this.errorList=[];for(var b in a)this.errorList.push({message:a[b],element:this.findByName(b)[0]});this.successList=c.grep(this.successList,\r\nfunction(d){return!(d.name in a)})}this.settings.showErrors?this.settings.showErrors.call(this,this.errorMap,this.errorList):this.defaultShowErrors()},resetForm:function(){c.fn.resetForm&&c(this.currentForm).resetForm();this.submitted={};this.prepareForm();this.hideErrors();this.elements().removeClass(this.settings.errorClass)},numberOfInvalids:function(){return this.objectLength(this.invalid)},objectLength:function(a){var b=0,d;for(d in a)b++;return b},hideErrors:function(){this.addWrapper(this.toHide).hide()},\r\nvalid:function(){return this.size()==0},size:function(){return this.errorList.length},focusInvalid:function(){if(this.settings.focusInvalid)try{c(this.findLastActive()||this.errorList.length&&this.errorList[0].element||[]).filter(\":visible\").focus().trigger(\"focusin\")}catch(a){}},findLastActive:function(){var a=this.lastActive;return a&&c.grep(this.errorList,function(b){return b.element.name==a.name}).length==1&&a},elements:function(){var a=this,b={};return c([]).add(this.currentForm.elements).filter(\":input\").not(\":submit, :reset, :image, [disabled]\").not(this.settings.ignore).filter(function(){!this.name&&\r\na.settings.debug&&window.console&&console.error(\"%o has no name assigned\",this);if(this.name in b||!a.objectLength(c(this).rules()))return false;return b[this.name]=true})},clean:function(a){return c(a)[0]},errors:function(){return c(this.settings.errorElement+\".\"+this.settings.errorClass,this.errorContext)},reset:function(){this.successList=[];this.errorList=[];this.errorMap={};this.toShow=c([]);this.toHide=c([]);this.currentElements=c([])},prepareForm:function(){this.reset();this.toHide=this.errors().add(this.containers)},\r\nprepareElement:function(a){this.reset();this.toHide=this.errorsFor(a)},check:function(a){a=this.clean(a);if(this.checkable(a))a=this.findByName(a.name).not(this.settings.ignore)[0];var b=c(a).rules(),d=false,e;for(e in b){var f={method:e,parameters:b[e]};try{var g=c.validator.methods[e].call(this,a.value.replace(/\\r/g,\"\"),a,f.parameters);if(g==\"dependency-mismatch\")d=true;else{d=false;if(g==\"pending\"){this.toHide=this.toHide.not(this.errorsFor(a));return}if(!g){this.formatAndAdd(a,f);return false}}}catch(h){this.settings.debug&&\r\nwindow.console&&console.log(\"exception occured when checking element \"+a.id+\", check the '\"+f.method+\"' method\",h);throw h;}}if(!d){this.objectLength(b)&&this.successList.push(a);return true}},customMetaMessage:function(a,b){if(c.metadata){var d=this.settings.meta?c(a).metadata()[this.settings.meta]:c(a).metadata();return d&&d.messages&&d.messages[b]}},customMessage:function(a,b){var d=this.settings.messages[a];return d&&(d.constructor==String?d:d[b])},findDefined:function(){for(var a=0;a<arguments.length;a++)if(arguments[a]!==\r\nundefined)return arguments[a]},defaultMessage:function(a,b){return this.findDefined(this.customMessage(a.name,b),this.customMetaMessage(a,b),!this.settings.ignoreTitle&&a.title||undefined,c.validator.messages[b],\"<strong>Warning: No message defined for \"+a.name+\"</strong>\")},formatAndAdd:function(a,b){var d=this.defaultMessage(a,b.method),e=/\\$?\\{(\\d+)\\}/g;if(typeof d==\"function\")d=d.call(this,b.parameters,a);else if(e.test(d))d=jQuery.format(d.replace(e,\"{$1}\"),b.parameters);this.errorList.push({message:d,\r\nelement:a});this.errorMap[a.name]=d;this.submitted[a.name]=d},addWrapper:function(a){if(this.settings.wrapper)a=a.add(a.parent(this.settings.wrapper));return a},defaultShowErrors:function(){for(var a=0;this.errorList[a];a++){var b=this.errorList[a];this.settings.highlight&&this.settings.highlight.call(this,b.element,this.settings.errorClass,this.settings.validClass);this.showLabel(b.element,b.message)}if(this.errorList.length)this.toShow=this.toShow.add(this.containers);if(this.settings.success)for(a=\r\n0;this.successList[a];a++)this.showLabel(this.successList[a]);if(this.settings.unhighlight){a=0;for(b=this.validElements();b[a];a++)this.settings.unhighlight.call(this,b[a],this.settings.errorClass,this.settings.validClass)}this.toHide=this.toHide.not(this.toShow);this.hideErrors();this.addWrapper(this.toShow).show()},validElements:function(){return this.currentElements.not(this.invalidElements())},invalidElements:function(){return c(this.errorList).map(function(){return this.element})},showLabel:function(a,\r\nb){var d=this.errorsFor(a);if(d.length){d.removeClass().addClass(this.settings.errorClass);d.attr(\"generated\")&&d.html(b)}else{d=c(\"<\"+this.settings.errorElement+\"/>\").attr({\"for\":this.idOrName(a),generated:true}).addClass(this.settings.errorClass).html(b||\"\");if(this.settings.wrapper)d=d.hide().show().wrap(\"<\"+this.settings.wrapper+\"/>\").parent();this.labelContainer.append(d).length||(this.settings.errorPlacement?this.settings.errorPlacement(d,c(a)):d.insertAfter(a))}if(!b&&this.settings.success){d.text(\"\");\r\ntypeof this.settings.success==\"string\"?d.addClass(this.settings.success):this.settings.success(d)}this.toShow=this.toShow.add(d)},errorsFor:function(a){var b=this.idOrName(a);return this.errors().filter(function(){return c(this).attr(\"for\")==b})},idOrName:function(a){return this.groups[a.name]||(this.checkable(a)?a.name:a.id||a.name)},checkable:function(a){return/radio|checkbox/i.test(a.type)},findByName:function(a){var b=this.currentForm;return c(document.getElementsByName(a)).map(function(d,e){return e.form==\r\nb&&e.name==a&&e||null})},getLength:function(a,b){switch(b.nodeName.toLowerCase()){case \"select\":return c(\"option:selected\",b).length;case \"input\":if(this.checkable(b))return this.findByName(b.name).filter(\":checked\").length}return a.length},depend:function(a,b){return this.dependTypes[typeof a]?this.dependTypes[typeof a](a,b):true},dependTypes:{\"boolean\":function(a){return a},string:function(a,b){return!!c(a,b.form).length},\"function\":function(a,b){return a(b)}},optional:function(a){return!c.validator.methods.required.call(this,\r\nc.trim(a.value),a)&&\"dependency-mismatch\"},startRequest:function(a){if(!this.pending[a.name]){this.pendingRequest++;this.pending[a.name]=true}},stopRequest:function(a,b){this.pendingRequest--;if(this.pendingRequest<0)this.pendingRequest=0;delete this.pending[a.name];if(b&&this.pendingRequest==0&&this.formSubmitted&&this.form()){c(this.currentForm).submit();this.formSubmitted=false}else if(!b&&this.pendingRequest==0&&this.formSubmitted){c(this.currentForm).triggerHandler(\"invalid-form\",[this]);this.formSubmitted=\r\nfalse}},previousValue:function(a){return c.data(a,\"previousValue\")||c.data(a,\"previousValue\",{old:null,valid:true,message:this.defaultMessage(a,\"remote\")})}},classRuleSettings:{required:{required:true},email:{email:true},url:{url:true},date:{date:true},dateISO:{dateISO:true},dateDE:{dateDE:true},number:{number:true},numberDE:{numberDE:true},digits:{digits:true},creditcard:{creditcard:true}},addClassRules:function(a,b){a.constructor==String?this.classRuleSettings[a]=b:c.extend(this.classRuleSettings,\r\na)},classRules:function(a){var b={};(a=c(a).attr(\"class\"))&&c.each(a.split(\" \"),function(){this in c.validator.classRuleSettings&&c.extend(b,c.validator.classRuleSettings[this])});return b},attributeRules:function(a){var b={};a=c(a);for(var d in c.validator.methods){var e=a.attr(d);if(e)b[d]=e}b.maxlength&&/-1|2147483647|524288/.test(b.maxlength)&&delete b.maxlength;return b},metadataRules:function(a){if(!c.metadata)return{};var b=c.data(a.form,\"validator\").settings.meta;return b?c(a).metadata()[b]:\r\nc(a).metadata()},staticRules:function(a){var b={},d=c.data(a.form,\"validator\");if(d.settings.rules)b=c.validator.normalizeRule(d.settings.rules[a.name])||{};return b},normalizeRules:function(a,b){c.each(a,function(d,e){if(e===false)delete a[d];else if(e.param||e.depends){var f=true;switch(typeof e.depends){case \"string\":f=!!c(e.depends,b.form).length;break;case \"function\":f=e.depends.call(b,b)}if(f)a[d]=e.param!==undefined?e.param:true;else delete a[d]}});c.each(a,function(d,e){a[d]=c.isFunction(e)?\r\ne(b):e});c.each([\"minlength\",\"maxlength\",\"min\",\"max\"],function(){if(a[this])a[this]=Number(a[this])});c.each([\"rangelength\",\"range\"],function(){if(a[this])a[this]=[Number(a[this][0]),Number(a[this][1])]});if(c.validator.autoCreateRanges){if(a.min&&a.max){a.range=[a.min,a.max];delete a.min;delete a.max}if(a.minlength&&a.maxlength){a.rangelength=[a.minlength,a.maxlength];delete a.minlength;delete a.maxlength}}a.messages&&delete a.messages;return a},normalizeRule:function(a){if(typeof a==\"string\"){var b=\r\n{};c.each(a.split(/\\s/),function(){b[this]=true});a=b}return a},addMethod:function(a,b,d){c.validator.methods[a]=b;c.validator.messages[a]=d!=undefined?d:c.validator.messages[a];b.length<3&&c.validator.addClassRules(a,c.validator.normalizeRule(a))},methods:{required:function(a,b,d){if(!this.depend(d,b))return\"dependency-mismatch\";switch(b.nodeName.toLowerCase()){case \"select\":return(a=c(b).val())&&a.length>0;case \"input\":if(this.checkable(b))return this.getLength(a,b)>0;default:return c.trim(a).length>\r\n0}},remote:function(a,b,d){if(this.optional(b))return\"dependency-mismatch\";var e=this.previousValue(b);this.settings.messages[b.name]||(this.settings.messages[b.name]={});e.originalMessage=this.settings.messages[b.name].remote;this.settings.messages[b.name].remote=e.message;d=typeof d==\"string\"&&{url:d}||d;if(this.pending[b.name])return\"pending\";if(e.old===a)return e.valid;e.old=a;var f=this;this.startRequest(b);var g={};g[b.name]=a;c.ajax(c.extend(true,{url:d,mode:\"abort\",port:\"validate\"+b.name,\r\ndataType:\"json\",data:g,success:function(h){f.settings.messages[b.name].remote=e.originalMessage;var j=h===true;if(j){var i=f.formSubmitted;f.prepareElement(b);f.formSubmitted=i;f.successList.push(b);f.showErrors()}else{i={};h=h||f.defaultMessage(b,\"remote\");i[b.name]=e.message=c.isFunction(h)?h(a):h;f.showErrors(i)}e.valid=j;f.stopRequest(b,j)}},d));return\"pending\"},minlength:function(a,b,d){return this.optional(b)||this.getLength(c.trim(a),b)>=d},maxlength:function(a,b,d){return this.optional(b)||\r\nthis.getLength(c.trim(a),b)<=d},rangelength:function(a,b,d){a=this.getLength(c.trim(a),b);return this.optional(b)||a>=d[0]&&a<=d[1]},min:function(a,b,d){return this.optional(b)||a>=d},max:function(a,b,d){return this.optional(b)||a<=d},range:function(a,b,d){return this.optional(b)||a>=d[0]&&a<=d[1]},email:function(a,b){return this.optional(b)||/^((([a-z]|\\d|[!#\\$%&'\\*\\+\\-\\/=\\?\\^_`{\\|}~]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])+(\\.([a-z]|\\d|[!#\\$%&'\\*\\+\\-\\/=\\?\\^_`{\\|}~]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])+)*)|((\\x22)((((\\x20|\\x09)*(\\x0d\\x0a))?(\\x20|\\x09)+)?(([\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x7f]|\\x21|[\\x23-\\x5b]|[\\x5d-\\x7e]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(\\\\([\\x01-\\x09\\x0b\\x0c\\x0d-\\x7f]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]))))*(((\\x20|\\x09)*(\\x0d\\x0a))?(\\x20|\\x09)+)?(\\x22)))@((([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])*([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])))\\.)+(([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])*([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])))\\.?$/i.test(a)},\r\nurl:function(a,b){return this.optional(b)||/^(https?|ftp):\\/\\/(((([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(%[\\da-f]{2})|[!\\$&'\\(\\)\\*\\+,;=]|:)*@)?(((\\d|[1-9]\\d|1\\d\\d|2[0-4]\\d|25[0-5])\\.(\\d|[1-9]\\d|1\\d\\d|2[0-4]\\d|25[0-5])\\.(\\d|[1-9]\\d|1\\d\\d|2[0-4]\\d|25[0-5])\\.(\\d|[1-9]\\d|1\\d\\d|2[0-4]\\d|25[0-5]))|((([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])*([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])))\\.)+(([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])*([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])))\\.?)(:\\d*)?)(\\/((([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(%[\\da-f]{2})|[!\\$&'\\(\\)\\*\\+,;=]|:|@)+(\\/(([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(%[\\da-f]{2})|[!\\$&'\\(\\)\\*\\+,;=]|:|@)*)*)?)?(\\?((([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(%[\\da-f]{2})|[!\\$&'\\(\\)\\*\\+,;=]|:|@)|[\\uE000-\\uF8FF]|\\/|\\?)*)?(\\#((([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(%[\\da-f]{2})|[!\\$&'\\(\\)\\*\\+,;=]|:|@)|\\/|\\?)*)?$/i.test(a)},\r\ndate:function(a,b){return this.optional(b)||!/Invalid|NaN/.test(new Date(a))},dateISO:function(a,b){return this.optional(b)||/^\\d{4}[\\/-]\\d{1,2}[\\/-]\\d{1,2}$/.test(a)},number:function(a,b){return this.optional(b)||/^-?(?:\\d+|\\d{1,3}(?:,\\d{3})+)(?:\\.\\d+)?$/.test(a)},digits:function(a,b){return this.optional(b)||/^\\d+$/.test(a)},creditcard:function(a,b){if(this.optional(b))return\"dependency-mismatch\";if(/[^0-9-]+/.test(a))return false;var d=0,e=0,f=false;a=a.replace(/\\D/g,\"\");for(var g=a.length-1;g>=\r\n0;g--){e=a.charAt(g);e=parseInt(e,10);if(f)if((e*=2)>9)e-=9;d+=e;f=!f}return d%10==0},accept:function(a,b,d){d=typeof d==\"string\"?d.replace(/,/g,\"|\"):\"png|jpe?g|gif\";return this.optional(b)||a.match(RegExp(\".(\"+d+\")$\",\"i\"))},equalTo:function(a,b,d){d=c(d).unbind(\".validate-equalTo\").bind(\"blur.validate-equalTo\",function(){c(b).valid()});return a==d.val()}}});c.format=c.validator.format})(jQuery);\r\n(function(c){var a={};if(c.ajaxPrefilter)c.ajaxPrefilter(function(d,e,f){e=d.port;if(d.mode==\"abort\"){a[e]&&a[e].abort();a[e]=f}});else{var b=c.ajax;c.ajax=function(d){var e=(\"port\"in d?d:c.ajaxSettings).port;if((\"mode\"in d?d:c.ajaxSettings).mode==\"abort\"){a[e]&&a[e].abort();return a[e]=b.apply(this,arguments)}return b.apply(this,arguments)}}})(jQuery);\r\n(function(c){!jQuery.event.special.focusin&&!jQuery.event.special.focusout&&document.addEventListener&&c.each({focus:\"focusin\",blur:\"focusout\"},function(a,b){function d(e){e=c.event.fix(e);e.type=b;return c.event.handle.call(this,e)}c.event.special[b]={setup:function(){this.addEventListener(a,d,true)},teardown:function(){this.removeEventListener(a,d,true)},handler:function(e){arguments[0]=c.event.fix(e);arguments[0].type=b;return c.event.handle.apply(this,arguments)}}});c.extend(c.fn,{validateDelegate:function(a,\r\nb,d){return this.bind(b,function(e){var f=c(e.target);if(f.is(a))return d.apply(f,arguments)})}})})(jQuery);\r\n\n\n\n// WEBPACK FOOTER //\n// ./App_Plugins/Core/Content/libs/jquery.validate.min.js","/* NUGET: BEGIN LICENSE TEXT\r\n *\r\n * Microsoft grants you the right to use these script files for the sole\r\n * purpose of either: (i) interacting through your browser with the Microsoft\r\n * website or online service, subject to the applicable licensing or use\r\n * terms; or (ii) using the files as included with a Microsoft product subject\r\n * to that product's license terms. Microsoft reserves all other rights to the\r\n * files not expressly granted by Microsoft, whether by implication, estoppel\r\n * or otherwise. Insofar as a script file is dual licensed under GPL,\r\n * Microsoft neither took the code under GPL nor distributes it thereunder but\r\n * under the terms set out in this paragraph. All notices and licenses\r\n * below are for informational purposes only.\r\n *\r\n * NUGET: END LICENSE TEXT */\r\n/*\r\n** Unobtrusive validation support library for jQuery and jQuery Validate\r\n** Copyright (C) Microsoft Corporation. All rights reserved.\r\n*/\r\n(function(a){var d=a.validator,b,e=\"unobtrusiveValidation\";function c(a,b,c){a.rules[b]=c;if(a.message)a.messages[b]=a.message}function j(a){return a.replace(/^\\s+|\\s+$/g,\"\").split(/\\s*,\\s*/g)}function f(a){return a.replace(/([!\"#$%&'()*+,./:;<=>?@\\[\\\\\\]^`{|}~])/g,\"\\\\$1\")}function h(a){return a.substr(0,a.lastIndexOf(\".\")+1)}function g(a,b){if(a.indexOf(\"*.\")===0)a=a.replace(\"*.\",b);return a}function m(c,e){var b=a(this).find(\"[data-valmsg-for='\"+f(e[0].name)+\"']\"),d=b.attr(\"data-valmsg-replace\"),g=d?a.parseJSON(d)!==false:null;b.removeClass(\"field-validation-valid\").addClass(\"field-validation-error\");c.data(\"unobtrusiveContainer\",b);if(g){b.empty();c.removeClass(\"input-validation-error\").appendTo(b)}else c.hide()}function l(e,d){var c=a(this).find(\"[data-valmsg-summary=true]\"),b=c.find(\"ul\");if(b&&b.length&&d.errorList.length){b.empty();c.addClass(\"validation-summary-errors\").removeClass(\"validation-summary-valid\");a.each(d.errorList,function(){a(\"<li />\").html(this.message).appendTo(b)})}}function k(d){var b=d.data(\"unobtrusiveContainer\"),c=b.attr(\"data-valmsg-replace\"),e=c?a.parseJSON(c):null;if(b){b.addClass(\"field-validation-valid\").removeClass(\"field-validation-error\");d.removeData(\"unobtrusiveContainer\");e&&b.empty()}}function n(){var b=a(this),c=\"__jquery_unobtrusive_validation_form_reset\";if(b.data(c))return;b.data(c,true);try{b.data(\"validator\").resetForm()}finally{b.removeData(c)}b.find(\".validation-summary-errors\").addClass(\"validation-summary-valid\").removeClass(\"validation-summary-errors\");b.find(\".field-validation-error\").addClass(\"field-validation-valid\").removeClass(\"field-validation-error\").removeData(\"unobtrusiveContainer\").find(\">*\").removeData(\"unobtrusiveContainer\")}function i(b){var c=a(b),f=c.data(e),i=a.proxy(n,b),g=d.unobtrusive.options||{},h=function(e,d){var c=g[e];c&&a.isFunction(c)&&c.apply(b,d)};if(!f){f={options:{errorClass:g.errorClass||\"input-validation-error\",errorElement:g.errorElement||\"span\",errorPlacement:function(){m.apply(b,arguments);h(\"errorPlacement\",arguments)},invalidHandler:function(){l.apply(b,arguments);h(\"invalidHandler\",arguments)},messages:{},rules:{},success:function(){k.apply(b,arguments);h(\"success\",arguments)}},attachValidation:function(){c.off(\"reset.\"+e,i).on(\"reset.\"+e,i).validate(this.options)},validate:function(){c.validate();return c.valid()}};c.data(e,f)}return f}d.unobtrusive={adapters:[],parseElement:function(b,h){var d=a(b),f=d.parents(\"form\")[0],c,e,g;if(!f)return;c=i(f);c.options.rules[b.name]=e={};c.options.messages[b.name]=g={};a.each(this.adapters,function(){var c=\"data-val-\"+this.name,i=d.attr(c),h={};if(i!==undefined){c+=\"-\";a.each(this.params,function(){h[this]=d.attr(c+this)});this.adapt({element:b,form:f,message:i,params:h,rules:e,messages:g})}});a.extend(e,{__dummy__:true});!h&&c.attachValidation()},parse:function(c){var b=a(c),e=b.parents().addBack().filter(\"form\").add(b.find(\"form\")).has(\"[data-val=true]\");b.find(\"[data-val=true]\").each(function(){d.unobtrusive.parseElement(this,true)});e.each(function(){var a=i(this);a&&a.attachValidation()})}};b=d.unobtrusive.adapters;b.add=function(c,a,b){if(!b){b=a;a=[]}this.push({name:c,params:a,adapt:b});return this};b.addBool=function(a,b){return this.add(a,function(d){c(d,b||a,true)})};b.addMinMax=function(e,g,f,a,d,b){return this.add(e,[d||\"min\",b||\"max\"],function(b){var e=b.params.min,d=b.params.max;if(e&&d)c(b,a,[e,d]);else if(e)c(b,g,e);else d&&c(b,f,d)})};b.addSingleVal=function(a,b,d){return this.add(a,[b||\"val\"],function(e){c(e,d||a,e.params[b])})};d.addMethod(\"__dummy__\",function(){return true});d.addMethod(\"regex\",function(b,c,d){var a;if(this.optional(c))return true;a=(new RegExp(d)).exec(b);return a&&a.index===0&&a[0].length===b.length});d.addMethod(\"nonalphamin\",function(c,d,b){var a;if(b){a=c.match(/\\W/g);a=a&&a.length>=b}return a});if(d.methods.extension){b.addSingleVal(\"accept\",\"mimtype\");b.addSingleVal(\"extension\",\"extension\")}else b.addSingleVal(\"extension\",\"extension\",\"accept\");b.addSingleVal(\"regex\",\"pattern\");b.addBool(\"creditcard\").addBool(\"date\").addBool(\"digits\").addBool(\"email\").addBool(\"number\").addBool(\"url\");b.addMinMax(\"length\",\"minlength\",\"maxlength\",\"rangelength\").addMinMax(\"range\",\"min\",\"max\",\"range\");b.addMinMax(\"minlength\",\"minlength\").addMinMax(\"maxlength\",\"minlength\",\"maxlength\");b.add(\"equalto\",[\"other\"],function(b){var i=h(b.element.name),j=b.params.other,d=g(j,i),e=a(b.form).find(\":input\").filter(\"[name='\"+f(d)+\"']\")[0];c(b,\"equalTo\",e)});b.add(\"required\",function(a){(a.element.tagName.toUpperCase()!==\"INPUT\"||a.element.type.toUpperCase()!==\"CHECKBOX\")&&c(a,\"required\",true)});b.add(\"remote\",[\"url\",\"type\",\"additionalfields\"],function(b){var d={url:b.params.url,type:b.params.type||\"GET\",data:{}},e=h(b.element.name);a.each(j(b.params.additionalfields||b.element.name),function(i,h){var c=g(h,e);d.data[c]=function(){var d=a(b.form).find(\":input\").filter(\"[name='\"+f(c)+\"']\");return d.is(\":checkbox\")?d.filter(\":checked\").val()||d.filter(\":hidden\").val()||\"\":d.is(\":radio\")?d.filter(\":checked\").val()||\"\":d.val()}});c(b,\"remote\",d)});b.add(\"password\",[\"min\",\"nonalphamin\",\"regex\"],function(a){a.params.min&&c(a,\"minlength\",a.params.min);a.params.nonalphamin&&c(a,\"nonalphamin\",a.params.nonalphamin);a.params.regex&&c(a,\"regex\",a.params.regex)});a(function(){d.unobtrusive.parse(document)})})(jQuery);\n\n\n// WEBPACK FOOTER //\n// ./App_Plugins/Core/Content/libs/jquery.validate.unobtrusive.min.js","var queue = [];\r\n\r\ndocument.addEventListener('DOMContentLoaded', function () {\r\n    setTimeout(function () {\r\n        queue.forEach(function (item) { item(); });\r\n    });\r\n});\r\n\r\nvar appInitializer = {\r\n    add: function(func) {\r\n        queue.push(func);\r\n    }\r\n}\r\n\r\nexport default appInitializer;\n\n\n// WEBPACK FOOTER //\n// ./App_Plugins/Core/Content/scripts/AppInitializer.js","var Quill = require('quill');\r\n\r\nrequire('quill/dist/quill.core.css');\r\nrequire('quill/dist/quill.bubble.css');\r\nrequire('quill/dist/quill.snow.css');\r\n\r\nvar easeInOutQuad = function (t, b, c, d) {\r\n    t /= d / 2;\r\n    if (t < 1) return c / 2 * t * t + b;\r\n    t--;\r\n    return -c / 2 * (t * (t - 2) - 1) + b;\r\n};\r\n\r\nvar helpers = {\r\n    deepClone: function (obj) {\r\n        return JSON.parse(JSON.stringify(obj));\r\n    },\r\n    initQuill: function (source, dataStorage, options) {\r\n        if (!dataStorage) {\r\n            throw new Error(\"Hided input field missing\");\r\n        }\r\n\r\n        if (!source) {\r\n            throw new Error(\"Source field missing\");\r\n        }\r\n\r\n        var quill = new Quill(source, options);\r\n\r\n        quill.on('text-change', (delta, oldDelta, source) => {\r\n            var text = quill.container.firstChild.innerHTML;\r\n            if (text.replace(/(<([^>]+)>)/ig, '').replace('<br>', '').length === 0) {\r\n                dataStorage.value = '';\r\n                return;\r\n            }\r\n            dataStorage.value = text;\r\n        });\r\n\r\n        quill.clipboard.addMatcher(Node.ELEMENT_NODE, function (node, delta) {\r\n            var plaintext = $.trim($(node).text());\r\n            return new Delta().insert(plaintext);\r\n        });\r\n\r\n        return quill;\r\n    },\r\n    removeOffset: function (date) {\r\n        var dateOffset = date.getTimezoneOffset() * 60000; // [min*60000 = ms]\r\n        return new Date(date.getTime() + dateOffset);\r\n    },\r\n    infiniteScrollFactory: function (onScroll) {\r\n        return function () {\r\n            var lock = false;\r\n            var win = $(window);\r\n            var doc = $(document);\r\n            var unlock = function () { lock = false; }\r\n            win.scroll(function () {\r\n                if ((win.scrollTop() + 70) >= doc.height() - win.height()) {\r\n                    if (!lock) {\r\n                        lock = true;\r\n                        onScroll(unlock);\r\n                    }\r\n                }\r\n            });\r\n        }\r\n    },\r\n    scrollTo: function (element, to, duration) {\r\n        var start = element.scrollTop,\r\n           change = to - start,\r\n           currentTime = 0,\r\n           increment = 20;\r\n\r\n        var animateScroll = function () {\r\n            currentTime += increment;\r\n            var val = easeInOutQuad(currentTime, start, change, duration);\r\n            element.scrollTop = val;\r\n            if (currentTime < duration) {\r\n                setTimeout(animateScroll, increment);\r\n            }\r\n        };\r\n\r\n        animateScroll();\r\n    },\r\n    localStorage: {\r\n        getItem: function (key) {\r\n            return JSON.parse(localStorage.getItem(key));\r\n        },\r\n        setItem: function (key, obj) {\r\n            localStorage.setItem(key, JSON.stringify(obj));\r\n        },\r\n        removeItem: function (key) {\r\n            localStorage.removeItem(key);\r\n        }\r\n    },\r\n}\r\n\r\nexport default helpers;\n\n\n// WEBPACK FOOTER //\n// ./App_Plugins/Core/Content/scripts/Helpers.js","exports = module.exports = require(\"../../node_modules/css-loader/lib/css-base.js\")(undefined);\n// imports\n\n\n// module\nexports.push([module.id, \"@font-face {\\n  font-family: 'Open Sans';\\n  font-weight: 300;\\n  font-style: normal;\\n  src: url(\" + require(\"./../../node_modules/npm-font-open-sans/fonts/Light/OpenSans-Light.eot\") + \");\\n  src: url(\" + require(\"./../../node_modules/npm-font-open-sans/fonts/Light/OpenSans-Light.eot\") + \") format('embedded-opentype'),\\n    url(\" + require(\"./../../node_modules/npm-font-open-sans/fonts/Light/OpenSans-Light.woff2\") + \") format('woff2'),\\n    url(\" + require(\"./../../node_modules/npm-font-open-sans/fonts/Light/OpenSans-Light.woff\") + \") format('woff'),\\n    url(\" + require(\"./../../node_modules/npm-font-open-sans/fonts/Light/OpenSans-Light.ttf\") + \") format('truetype'),\\n    url(\" + require(\"./../../node_modules/npm-font-open-sans/fonts/Light/OpenSans-Light.svg\") + \") format('svg');\\n}\\n\\n@font-face {\\n  font-family: 'Open Sans';\\n  font-weight: 300;\\n  font-style: italic;\\n  src: url(\" + require(\"./../../node_modules/npm-font-open-sans/fonts/LightItalic/OpenSans-LightItalic.eot\") + \");\\n  src: url(\" + require(\"./../../node_modules/npm-font-open-sans/fonts/LightItalic/OpenSans-LightItalic.eot\") + \") format('embedded-opentype'),\\n    url(\" + require(\"./../../node_modules/npm-font-open-sans/fonts/LightItalic/OpenSans-LightItalic.woff2\") + \") format('woff2'),\\n    url(\" + require(\"./../../node_modules/npm-font-open-sans/fonts/LightItalic/OpenSans-LightItalic.woff\") + \") format('woff'),\\n    url(\" + require(\"./../../node_modules/npm-font-open-sans/fonts/LightItalic/OpenSans-LightItalic.ttf\") + \") format('truetype'),\\n    url(\" + require(\"./../../node_modules/npm-font-open-sans/fonts/LightItalic/OpenSans-LightItalic.svg\") + \") format('svg');\\n}\\n\\n@font-face {\\n  font-family: 'Open Sans';\\n  font-weight: normal;\\n  font-style: normal;\\n  src: url(\" + require(\"./../../node_modules/npm-font-open-sans/fonts/Regular/OpenSans-Regular.eot\") + \");\\n  src: url(\" + require(\"./../../node_modules/npm-font-open-sans/fonts/Regular/OpenSans-Regular.eot\") + \") format('embedded-opentype'),\\n    url(\" + require(\"./../../node_modules/npm-font-open-sans/fonts/Regular/OpenSans-Regular.woff2\") + \") format('woff2'),\\n    url(\" + require(\"./../../node_modules/npm-font-open-sans/fonts/Regular/OpenSans-Regular.woff\") + \") format('woff'),\\n    url(\" + require(\"./../../node_modules/npm-font-open-sans/fonts/Regular/OpenSans-Regular.ttf\") + \") format('truetype'),\\n    url(\" + require(\"./../../node_modules/npm-font-open-sans/fonts/Regular/OpenSans-Regular.svg\") + \") format('svg');\\n}\\n\\n@font-face {\\n  font-family: 'Open Sans';\\n  font-weight: normal;\\n  font-style: italic;\\n  src: url(\" + require(\"./../../node_modules/npm-font-open-sans/fonts/Italic/OpenSans-Italic.eot\") + \");\\n  src: url(\" + require(\"./../../node_modules/npm-font-open-sans/fonts/Italic/OpenSans-Italic.eot\") + \") format('embedded-opentype'),\\n    url(\" + require(\"./../../node_modules/npm-font-open-sans/fonts/Italic/OpenSans-Italic.woff2\") + \") format('woff2'),\\n    url(\" + require(\"./../../node_modules/npm-font-open-sans/fonts/Italic/OpenSans-Italic.woff\") + \") format('woff'),\\n    url(\" + require(\"./../../node_modules/npm-font-open-sans/fonts/Italic/OpenSans-Italic.ttf\") + \") format('truetype'),\\n    url(\" + require(\"./../../node_modules/npm-font-open-sans/fonts/Italic/OpenSans-Italic.svg\") + \") format('svg');\\n}\\n\\n@font-face {\\n  font-family: 'Open Sans';\\n  font-weight: 600;\\n  font-style: normal;\\n  src: url(\" + require(\"./../../node_modules/npm-font-open-sans/fonts/Semibold/OpenSans-Semibold.eot\") + \");\\n  src: url(\" + require(\"./../../node_modules/npm-font-open-sans/fonts/Semibold/OpenSans-Semibold.eot\") + \") format('embedded-opentype'),\\n    url(\" + require(\"./../../node_modules/npm-font-open-sans/fonts/Semibold/OpenSans-Semibold.woff2\") + \") format('woff2'),\\n    url(\" + require(\"./../../node_modules/npm-font-open-sans/fonts/Semibold/OpenSans-Semibold.woff\") + \") format('woff'),\\n    url(\" + require(\"./../../node_modules/npm-font-open-sans/fonts/Semibold/OpenSans-Semibold.ttf\") + \") format('truetype'),\\n    url(\" + require(\"./../../node_modules/npm-font-open-sans/fonts/Semibold/OpenSans-Semibold.svg\") + \") format('svg');\\n}\\n\\n@font-face {\\n  font-family: 'Open Sans';\\n  font-weight: 600;\\n  font-style: italic;\\n  src: url(\" + require(\"./../../node_modules/npm-font-open-sans/fonts/SemiboldItalic/OpenSans-SemiboldItalic.eot\") + \");\\n  src: url(\" + require(\"./../../node_modules/npm-font-open-sans/fonts/SemiboldItalic/OpenSans-SemiboldItalic.eot\") + \") format('embedded-opentype'),\\n    url(\" + require(\"./../../node_modules/npm-font-open-sans/fonts/SemiboldItalic/OpenSans-SemiboldItalic.woff2\") + \") format('woff2'),\\n    url(\" + require(\"./../../node_modules/npm-font-open-sans/fonts/SemiboldItalic/OpenSans-SemiboldItalic.woff\") + \") format('woff'),\\n    url(\" + require(\"./../../node_modules/npm-font-open-sans/fonts/SemiboldItalic/OpenSans-SemiboldItalic.ttf\") + \") format('truetype'),\\n    url(\" + require(\"./../../node_modules/npm-font-open-sans/fonts/SemiboldItalic/OpenSans-SemiboldItalic.svg\") + \") format('svg');\\n}\\n\\n@font-face {\\n  font-family: 'Open Sans';\\n  font-weight: bold;\\n  font-style: normal;\\n  src: url(\" + require(\"./../../node_modules/npm-font-open-sans/fonts/Bold/OpenSans-Bold.eot\") + \");\\n  src: url(\" + require(\"./../../node_modules/npm-font-open-sans/fonts/Bold/OpenSans-Bold.eot\") + \") format('embedded-opentype'),\\n    url(\" + require(\"./../../node_modules/npm-font-open-sans/fonts/Bold/OpenSans-Bold.woff2\") + \") format('woff2'),\\n    url(\" + require(\"./../../node_modules/npm-font-open-sans/fonts/Bold/OpenSans-Bold.woff\") + \") format('woff'),\\n    url(\" + require(\"./../../node_modules/npm-font-open-sans/fonts/Bold/OpenSans-Bold.ttf\") + \") format('truetype'),\\n    url(\" + require(\"./../../node_modules/npm-font-open-sans/fonts/Bold/OpenSans-Bold.svg\") + \") format('svg');\\n}\\n\\n@font-face {\\n  font-family: 'Open Sans';\\n  font-weight: bold;\\n  font-style: italic;\\n  src: url(\" + require(\"./../../node_modules/npm-font-open-sans/fonts/BoldItalic/OpenSans-BoldItalic.eot\") + \");\\n  src: url(\" + require(\"./../../node_modules/npm-font-open-sans/fonts/BoldItalic/OpenSans-BoldItalic.eot\") + \") format('embedded-opentype'),\\n    url(\" + require(\"./../../node_modules/npm-font-open-sans/fonts/BoldItalic/OpenSans-BoldItalic.woff2\") + \") format('woff2'),\\n    url(\" + require(\"./../../node_modules/npm-font-open-sans/fonts/BoldItalic/OpenSans-BoldItalic.woff\") + \") format('woff'),\\n    url(\" + require(\"./../../node_modules/npm-font-open-sans/fonts/BoldItalic/OpenSans-BoldItalic.ttf\") + \") format('truetype'),\\n    url(\" + require(\"./../../node_modules/npm-font-open-sans/fonts/BoldItalic/OpenSans-BoldItalic.svg\") + \") format('svg');\\n}\\n\\n@font-face {\\n  font-family: 'Open Sans';\\n  font-weight: 800;\\n  font-style: normal;\\n  src: url(\" + require(\"./../../node_modules/npm-font-open-sans/fonts/ExtraBold/OpenSans-ExtraBold.eot\") + \");\\n  src: url(\" + require(\"./../../node_modules/npm-font-open-sans/fonts/ExtraBold/OpenSans-ExtraBold.eot\") + \") format('embedded-opentype'),\\n    url(\" + require(\"./../../node_modules/npm-font-open-sans/fonts/ExtraBold/OpenSans-ExtraBold.woff2\") + \") format('woff2'),\\n    url(\" + require(\"./../../node_modules/npm-font-open-sans/fonts/ExtraBold/OpenSans-ExtraBold.woff\") + \") format('woff'),\\n    url(\" + require(\"./../../node_modules/npm-font-open-sans/fonts/ExtraBold/OpenSans-ExtraBold.ttf\") + \") format('truetype'),\\n    url(\" + require(\"./../../node_modules/npm-font-open-sans/fonts/ExtraBold/OpenSans-ExtraBold.svg\") + \") format('svg');\\n}\\n\\n@font-face {\\n  font-family: 'Open Sans';\\n  font-weight: 800;\\n  font-style: italic;\\n  src: url(\" + require(\"./../../node_modules/npm-font-open-sans/fonts/ExtraBoldItalic/OpenSans-ExtraBoldItalic.eot\") + \");\\n  src: url(\" + require(\"./../../node_modules/npm-font-open-sans/fonts/ExtraBoldItalic/OpenSans-ExtraBoldItalic.eot\") + \") format('embedded-opentype'),\\n    url(\" + require(\"./../../node_modules/npm-font-open-sans/fonts/ExtraBoldItalic/OpenSans-ExtraBoldItalic.woff2\") + \") format('woff2'),\\n    url(\" + require(\"./../../node_modules/npm-font-open-sans/fonts/ExtraBoldItalic/OpenSans-ExtraBoldItalic.woff\") + \") format('woff'),\\n    url(\" + require(\"./../../node_modules/npm-font-open-sans/fonts/ExtraBoldItalic/OpenSans-ExtraBoldItalic.ttf\") + \") format('truetype'),\\n    url(\" + require(\"./../../node_modules/npm-font-open-sans/fonts/ExtraBoldItalic/OpenSans-ExtraBoldItalic.svg\") + \") format('svg');\\n}\\n\\n@font-face {\\n  font-family: 'icomoon';\\n  src: url('/App_Plugins/Core/Content/fonts/icomoon.eot?j18osq');\\n  src: url('/App_Plugins/Core/Content/fonts/icomoon.eot?j18osq#iefix') format('embedded-opentype'),\\r\\n    url('/App_Plugins/Core/Content/fonts/icomoon.ttf?j18osq') format('truetype'),\\r\\n    url('/App_Plugins/Core/Content/fonts/icomoon.woff?j18osq') format('woff'),\\r\\n    url('/App_Plugins/Core/Content/fonts/icomoon.svg?j18osq#icomoon') format('svg');\\n  font-weight: normal;\\n  font-style: normal;\\n}\\n\\n@font-face {\\n  font-family: 'Glyphicons Halflings';\\n  src: url(/App_Plugins/Core/Content/fonts/glyphicons-halflings-regular.eot);\\n  src: url(/App_Plugins/Core/Content/fonts/glyphicons-halflings-regular.eot?#iefix) format('embedded-opentype'),\\r\\n        url(/App_Plugins/Core/Content/fonts/glyphicons-halflings-regular.woff2) format('woff2'),\\r\\n        url(/App_Plugins/Core/Content/fonts/glyphicons-halflings-regular.woff) format('woff'),\\r\\n        url(/App_Plugins/Core/Content/fonts/glyphicons-halflings-regular.ttf) format('truetype'),\\r\\n        url(/App_Plugins/Core/Content/fonts/glyphicons-halflings-regular.svg#glyphicons_halflingsregular) format('svg');\\n}\\n\\nbody {\\n  font: 14px/22px \\\"Open Sans\\\", Arial, Helvetica, sans-serif;\\n  background: #fff;\\n  color: #333;\\n  margin: 0;\\n}\\n\\n@media (max-width: 899px) {\\n\\n\\n  body {\\n    font-size: 16px;\\n  }\\n}\\n\\n\\n\\na,\\na:active,\\na:focus {\\n  color: #dd0a2d;\\n  text-decoration: none;\\n}\\n\\na:hover {\\n  text-decoration: underline;\\n  color: #dd0a2d;\\n}\\n\\n:-ms-input-placeholder {\\n  color: #8f8f8f;\\n}\\n\\n.file-extension {\\n  width: 35px;\\n  height: 35px;\\n  display: block;\\n  background-size: cover;\\n}\\n\\n.file-extension.__pdf {\\n  background-image: url(/App_Plugins/Core/Content/images/file-type-icons/pdf.svg);\\n}\\n\\n.file-extension.__gif {\\n  background-image: url(/App_Plugins/Core/Content/images/file-type-icons/gif.svg);\\n}\\n\\n.file-extension.__jpg,\\n.file-extension.__jpeg {\\n  background-image: url(/App_Plugins/Core/Content/images/file-type-icons/jpg.svg);\\n}\\n\\n.file-extension.__svg {\\n  background-image: url(/App_Plugins/Core/Content/images/file-type-icons/svg.svg);\\n}\\n\\n.file-extension.__doc {\\n  background-image: url(/App_Plugins/Core/Content/images/file-type-icons/doc.svg);\\n}\\n\\n.file-extension.__docx {\\n  background-image: url(/App_Plugins/Core/Content/images/file-type-icons/docx.svg);\\n}\\n\\n.file-extension.__xls {\\n  background-image: url(/App_Plugins/Core/Content/images/file-type-icons/xls.svg);\\n}\\n\\n.file-extension.__xlsx {\\n  background-image: url(/App_Plugins/Core/Content/images/file-type-icons/xlsx.svg);\\n}\\n\\n.file-extension.__csv {\\n  background-image: url(/App_Plugins/Core/Content/images/file-type-icons/csv.svg);\\n}\\n\\n.file-extension.__txt {\\n  background-image: url(/App_Plugins/Core/Content/images/file-type-icons/txt.svg);\\n}\\n\\n.file-extension.__mp4 {\\n  background-image: url(/App_Plugins/Core/Content/images/file-type-icons/m4v.svg);\\n}\\n\\n.comments {\\n  margin: 0;\\n  padding: 24px 0 0;\\n  border-top: 1px solid #ccc;\\n}\\n\\n.comments__title {\\n  font: bold 16px/23px \\\"Open Sans\\\", Arial, Helvetica, sans-serif;\\n  margin: 0 0 38px;\\n}\\n\\n.comments__list {\\n  margin: 0 0 30px;\\n  padding: 0;\\n  list-style: none;\\n  position: relative;\\n}\\n\\n.comments__list._inner {\\n  margin: 22px 0 0 -14px;\\n  padding: 0 0 0 10px;\\n  border-left: 2px solid #eee;\\n}\\n\\n.comments__list-item {\\n  font-size: 13px;\\n  line-height: 22px;\\n  margin: 0 0 19px;\\n}\\n\\n._inner .comments__list-item {\\n  margin: 12px 0 0;\\n}\\n\\n.comments__list-author {\\n  float: left;\\n  width: 60px;\\n  min-width: 60px;\\n  height: 60px;\\n  position: relative;\\n  overflow: hidden;\\n  margin: 7px 0 0;\\n  border: 1px solid #ccc;\\n}\\n\\n._inner .comments__list-author {\\n  margin: 0;\\n  width: 30px;\\n  height: 30px;\\n  min-width: 30px;\\n}\\n\\n.comments__list-author-avatar {\\n  position: absolute;\\n  top: 50%;\\n  left: 50%;\\n  height: auto !important;\\n  transform: translate(-50%, -50%);\\n  max-width: 100%;\\n}\\n\\n.comments__list-body {\\n  padding: 0 0 0 19px;\\n  float: left;\\n  width: calc(100% - 62px);\\n}\\n\\n._inner .comments__list-body {\\n  padding: 0 0 0 9px;\\n  width: calc(100% - 32px);\\n}\\n\\n.comments__list-text {\\n  position: relative;\\n  padding-bottom: 27px;\\n}\\n\\n.comments__list-text p {\\n  margin: 0;\\n}\\n\\n.comments__list-text a {\\n  text-decoration: underline;\\n}\\n\\n.comments__list-text a:hover {\\n  text-decoration: none;\\n}\\n\\n.comments__list-replies {\\n  position: relative;\\n}\\n\\n.comments__hide {\\n  position: absolute;\\n  bottom: 7px;\\n  right: 0;\\n  width: 25px;\\n  height: 25px;\\n  text-align: center;\\n  border-radius: 50%;\\n  background: #fff;\\n  box-shadow: 0 0 5px rgba(0,0,0,0.5);\\n  cursor: pointer;\\n}\\n\\n.comments__hide .icon-close {\\n  font-weight: bold;\\n  font-size: 18px;\\n  line-height: 25px;\\n  color: #333;\\n}\\n\\n\\n\\n.comments__author-name {\\n  font-family: \\\"Open Sans\\\", Arial, Helvetica, sans-serif;\\n  font-weight: bold;\\n}\\n\\n.comments__author-about {\\n  margin: 0 7px 2px 0;\\n  float: left;\\n}\\n\\n._inner .comments__author-about {\\n  margin-top: -6px;\\n}\\n\\n.comments__controls {\\n  float: left;\\n  width: 25px;\\n  height: 17px;\\n  cursor: pointer;\\n  position: relative;\\n}\\n\\n\\n\\n._inner .comments__controls:before {\\n  top: 0;\\n}\\n\\n\\n\\n._inner .comments__controls:hover:before {\\n  top: 2px;\\n}\\n\\n.comments__controls:before {\\n  position: absolute;\\n  top: 6px;\\n  right: 15px;\\n  width: 7px;\\n  height: 7px;\\n  border: solid #333;\\n  border-width: 0 1px 1px 0;\\n  transform: rotate(45deg);\\n  content: '';\\n}\\n\\n.comments__controls:hover > .comments__controls-list {\\n  display: block;\\n}\\n\\n.comments__controls:hover:before {\\n  transform: rotate(-135deg);\\n  top: 8px;\\n}\\n\\n.comments__controls-list {\\n  display: none;\\n  position: absolute;\\n  top: 100%;\\n  right: 0;\\n  min-width: 140px;\\n  margin: 0;\\n  padding: 0;\\n  list-style: none;\\n  border: 1px solid #eee;\\n  box-shadow: 2px 3px 3px rgba(0, 0, 0, 0.2);\\n  background: #fff;\\n  z-index: 10;\\n}\\n\\n.comments__controls-list:after {\\n  position: absolute;\\n  top: -4px;\\n  right: 14px;\\n  width: 7px;\\n  height: 7px;\\n  border: solid #eee;\\n  background: #fff;\\n  border-width: 0 1px 1px 0;\\n  transform: rotate(-135deg);\\n  z-index: -1;\\n  content: '';\\n}\\n\\n.comments__controls-list-item {\\n  border-top: 1px solid #eee;\\n}\\n\\n.comments__controls-list-item:first-child {\\n  border: none;\\n}\\n\\n.comments__controls-list-link {\\n  display: block;\\n  padding: 5px 19px 3px;\\n  color: #333;\\n  text-decoration: none;\\n}\\n\\n.comments__controls-list-link:active,\\n.comments__controls-list-link:focus,\\n.comments__controls-list-link:hover {\\n  background: #eee;\\n  text-decoration: none;\\n  color: #333;\\n}\\n\\n.comments__subtitle {\\n  font: bold 13px/22px \\\"Open Sans\\\", Arial, Helvetica, sans-serif;\\n  margin: 0 0 4px;\\n}\\n\\n\\n\\n.comments__form-field {\\n  margin: 0 0 10px;\\n}\\n\\n.comments__reply {\\n  color: #333;\\n  text-decoration: underline;\\n  cursor: pointer;\\n  font-size: 12px;\\n}\\n\\n.comments__reply:active,\\n.comments__reply:focus,\\n.comments__reply:hover {\\n  text-decoration: none;\\n  color: #333;\\n}\\n\\n.comments__modified {\\n  float: left;\\n  position: relative;\\n  margin: 0 15px 0 10px;\\n  cursor: pointer;\\n}\\n\\n._inner .comments__modified {\\n  margin: -5px 0 0 10px;\\n}\\n\\n.comments__modified-info {\\n  position: absolute;\\n  top: 100%;\\n  right: 0;\\n  background: rgba(0,0,0,0.9);\\n  color: #fff;\\n  border-radius: 3px;\\n  padding: 5px 10px;\\n  opacity: 0;\\n  transition: opacity ease-in 200ms 200ms;\\n  min-width: 170px;\\n  z-index: -1;\\n}\\n\\n.comments__modified-info:hover > .comments__modified-info {\\n  opacity: 1;\\n  z-index: 1;\\n}\\n\\n\", \"\"]);\n\n// exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/css-loader!./~/resolve-url-loader!./~/postcss-loader!./App_Plugins/Comments/_comments.css\n// module id = 21\n// module chunks = 0","exports = module.exports = require(\"../../css-loader/lib/css-base.js\")(undefined);\n// imports\n\n\n// module\nexports.push([module.id, \"/*!\\n * Quill Editor v1.1.9\\n * https://quilljs.com/\\n * Copyright (c) 2014, Jason Chen\\n * Copyright (c) 2013, salesforce.com\\n */\\n\\n.ql-container {\\n  box-sizing: border-box;\\n  font-family: Helvetica, Arial, sans-serif;\\n  font-size: 13px;\\n  height: 100%;\\n  margin: 0px;\\n  position: relative;\\n}\\n\\n.ql-container.ql-disabled .ql-tooltip {\\n  visibility: hidden;\\n}\\n\\n.ql-clipboard {\\n  left: -100000px;\\n  height: 1px;\\n  overflow-y: hidden;\\n  position: absolute;\\n  top: 50%;\\n}\\n\\n.ql-clipboard p {\\n  margin: 0;\\n  padding: 0;\\n}\\n\\n.ql-editor {\\n  box-sizing: border-box;\\n  cursor: text;\\n  line-height: 1.42;\\n  height: 100%;\\n  outline: none;\\n  overflow-y: auto;\\n  padding: 12px 15px;\\n  tab-size: 4;\\n  -moz-tab-size: 4;\\n  text-align: left;\\n  white-space: pre-wrap;\\n  word-wrap: break-word;\\n}\\n\\n.ql-editor p,\\n.ql-editor ol,\\n.ql-editor ul,\\n.ql-editor pre,\\n.ql-editor blockquote,\\n.ql-editor h1,\\n.ql-editor h2,\\n.ql-editor h3,\\n.ql-editor h4,\\n.ql-editor h5,\\n.ql-editor h6 {\\n  margin: 0;\\n  padding: 0;\\n  counter-reset: list-1 list-2 list-3 list-4 list-5 list-6 list-7 list-8 list-9;\\n}\\n\\n.ql-editor ol,\\n.ql-editor ul {\\n  padding-left: 1.5em;\\n}\\n\\n.ql-editor ol > li,\\n.ql-editor ul > li {\\n  list-style-type: none;\\n}\\n\\n.ql-editor ul > li::before {\\n  content: '\\\\25CF';\\n}\\n\\n.ql-editor ul[data-checked=true] > li::before,\\n.ql-editor ul[data-checked=false] > li::before {\\n  color: #777;\\n  cursor: pointer;\\n}\\n\\n.ql-editor ul[data-checked=true] > li::before {\\n  content: '\\\\2611';\\n}\\n\\n.ql-editor ul[data-checked=false] > li::before {\\n  content: '\\\\2610';\\n}\\n\\n.ql-editor li::before {\\n  display: inline-block;\\n  margin-right: 0.3em;\\n  text-align: right;\\n  white-space: nowrap;\\n  width: 1.2em;\\n}\\n\\n.ql-editor li:not(.ql-direction-rtl)::before {\\n  margin-left: -1.5em;\\n}\\n\\n.ql-editor ol li,\\n.ql-editor ul li {\\n  padding-left: 1.5em;\\n}\\n\\n.ql-editor ol li {\\n  counter-reset: list-1 list-2 list-3 list-4 list-5 list-6 list-7 list-8 list-9;\\n  counter-increment: list-num;\\n}\\n\\n.ql-editor ol li:before {\\n  content: counter(list-num, decimal) '. ';\\n}\\n\\n.ql-editor ol li.ql-indent-1 {\\n  counter-increment: list-1;\\n}\\n\\n.ql-editor ol li.ql-indent-1:before {\\n  content: counter(list-1, lower-alpha) '. ';\\n}\\n\\n.ql-editor ol li.ql-indent-1 {\\n  counter-reset: list-2 list-3 list-4 list-5 list-6 list-7 list-8 list-9;\\n}\\n\\n.ql-editor ol li.ql-indent-2 {\\n  counter-increment: list-2;\\n}\\n\\n.ql-editor ol li.ql-indent-2:before {\\n  content: counter(list-2, lower-roman) '. ';\\n}\\n\\n.ql-editor ol li.ql-indent-2 {\\n  counter-reset: list-3 list-4 list-5 list-6 list-7 list-8 list-9;\\n}\\n\\n.ql-editor ol li.ql-indent-3 {\\n  counter-increment: list-3;\\n}\\n\\n.ql-editor ol li.ql-indent-3:before {\\n  content: counter(list-3, decimal) '. ';\\n}\\n\\n.ql-editor ol li.ql-indent-3 {\\n  counter-reset: list-4 list-5 list-6 list-7 list-8 list-9;\\n}\\n\\n.ql-editor ol li.ql-indent-4 {\\n  counter-increment: list-4;\\n}\\n\\n.ql-editor ol li.ql-indent-4:before {\\n  content: counter(list-4, lower-alpha) '. ';\\n}\\n\\n.ql-editor ol li.ql-indent-4 {\\n  counter-reset: list-5 list-6 list-7 list-8 list-9;\\n}\\n\\n.ql-editor ol li.ql-indent-5 {\\n  counter-increment: list-5;\\n}\\n\\n.ql-editor ol li.ql-indent-5:before {\\n  content: counter(list-5, lower-roman) '. ';\\n}\\n\\n.ql-editor ol li.ql-indent-5 {\\n  counter-reset: list-6 list-7 list-8 list-9;\\n}\\n\\n.ql-editor ol li.ql-indent-6 {\\n  counter-increment: list-6;\\n}\\n\\n.ql-editor ol li.ql-indent-6:before {\\n  content: counter(list-6, decimal) '. ';\\n}\\n\\n.ql-editor ol li.ql-indent-6 {\\n  counter-reset: list-7 list-8 list-9;\\n}\\n\\n.ql-editor ol li.ql-indent-7 {\\n  counter-increment: list-7;\\n}\\n\\n.ql-editor ol li.ql-indent-7:before {\\n  content: counter(list-7, lower-alpha) '. ';\\n}\\n\\n.ql-editor ol li.ql-indent-7 {\\n  counter-reset: list-8 list-9;\\n}\\n\\n.ql-editor ol li.ql-indent-8 {\\n  counter-increment: list-8;\\n}\\n\\n.ql-editor ol li.ql-indent-8:before {\\n  content: counter(list-8, lower-roman) '. ';\\n}\\n\\n.ql-editor ol li.ql-indent-8 {\\n  counter-reset: list-9;\\n}\\n\\n.ql-editor ol li.ql-indent-9 {\\n  counter-increment: list-9;\\n}\\n\\n.ql-editor ol li.ql-indent-9:before {\\n  content: counter(list-9, decimal) '. ';\\n}\\n\\n.ql-editor .ql-indent-1:not(.ql-direction-rtl) {\\n  padding-left: 3em;\\n}\\n\\n.ql-editor li.ql-indent-1:not(.ql-direction-rtl) {\\n  padding-left: 4.5em;\\n}\\n\\n.ql-editor .ql-indent-1.ql-direction-rtl.ql-align-right {\\n  padding-right: 3em;\\n}\\n\\n.ql-editor li.ql-indent-1.ql-direction-rtl.ql-align-right {\\n  padding-right: 4.5em;\\n}\\n\\n.ql-editor .ql-indent-2:not(.ql-direction-rtl) {\\n  padding-left: 6em;\\n}\\n\\n.ql-editor li.ql-indent-2:not(.ql-direction-rtl) {\\n  padding-left: 7.5em;\\n}\\n\\n.ql-editor .ql-indent-2.ql-direction-rtl.ql-align-right {\\n  padding-right: 6em;\\n}\\n\\n.ql-editor li.ql-indent-2.ql-direction-rtl.ql-align-right {\\n  padding-right: 7.5em;\\n}\\n\\n.ql-editor .ql-indent-3:not(.ql-direction-rtl) {\\n  padding-left: 9em;\\n}\\n\\n.ql-editor li.ql-indent-3:not(.ql-direction-rtl) {\\n  padding-left: 10.5em;\\n}\\n\\n.ql-editor .ql-indent-3.ql-direction-rtl.ql-align-right {\\n  padding-right: 9em;\\n}\\n\\n.ql-editor li.ql-indent-3.ql-direction-rtl.ql-align-right {\\n  padding-right: 10.5em;\\n}\\n\\n.ql-editor .ql-indent-4:not(.ql-direction-rtl) {\\n  padding-left: 12em;\\n}\\n\\n.ql-editor li.ql-indent-4:not(.ql-direction-rtl) {\\n  padding-left: 13.5em;\\n}\\n\\n.ql-editor .ql-indent-4.ql-direction-rtl.ql-align-right {\\n  padding-right: 12em;\\n}\\n\\n.ql-editor li.ql-indent-4.ql-direction-rtl.ql-align-right {\\n  padding-right: 13.5em;\\n}\\n\\n.ql-editor .ql-indent-5:not(.ql-direction-rtl) {\\n  padding-left: 15em;\\n}\\n\\n.ql-editor li.ql-indent-5:not(.ql-direction-rtl) {\\n  padding-left: 16.5em;\\n}\\n\\n.ql-editor .ql-indent-5.ql-direction-rtl.ql-align-right {\\n  padding-right: 15em;\\n}\\n\\n.ql-editor li.ql-indent-5.ql-direction-rtl.ql-align-right {\\n  padding-right: 16.5em;\\n}\\n\\n.ql-editor .ql-indent-6:not(.ql-direction-rtl) {\\n  padding-left: 18em;\\n}\\n\\n.ql-editor li.ql-indent-6:not(.ql-direction-rtl) {\\n  padding-left: 19.5em;\\n}\\n\\n.ql-editor .ql-indent-6.ql-direction-rtl.ql-align-right {\\n  padding-right: 18em;\\n}\\n\\n.ql-editor li.ql-indent-6.ql-direction-rtl.ql-align-right {\\n  padding-right: 19.5em;\\n}\\n\\n.ql-editor .ql-indent-7:not(.ql-direction-rtl) {\\n  padding-left: 21em;\\n}\\n\\n.ql-editor li.ql-indent-7:not(.ql-direction-rtl) {\\n  padding-left: 22.5em;\\n}\\n\\n.ql-editor .ql-indent-7.ql-direction-rtl.ql-align-right {\\n  padding-right: 21em;\\n}\\n\\n.ql-editor li.ql-indent-7.ql-direction-rtl.ql-align-right {\\n  padding-right: 22.5em;\\n}\\n\\n.ql-editor .ql-indent-8:not(.ql-direction-rtl) {\\n  padding-left: 24em;\\n}\\n\\n.ql-editor li.ql-indent-8:not(.ql-direction-rtl) {\\n  padding-left: 25.5em;\\n}\\n\\n.ql-editor .ql-indent-8.ql-direction-rtl.ql-align-right {\\n  padding-right: 24em;\\n}\\n\\n.ql-editor li.ql-indent-8.ql-direction-rtl.ql-align-right {\\n  padding-right: 25.5em;\\n}\\n\\n.ql-editor .ql-indent-9:not(.ql-direction-rtl) {\\n  padding-left: 27em;\\n}\\n\\n.ql-editor li.ql-indent-9:not(.ql-direction-rtl) {\\n  padding-left: 28.5em;\\n}\\n\\n.ql-editor .ql-indent-9.ql-direction-rtl.ql-align-right {\\n  padding-right: 27em;\\n}\\n\\n.ql-editor li.ql-indent-9.ql-direction-rtl.ql-align-right {\\n  padding-right: 28.5em;\\n}\\n\\n.ql-editor .ql-video {\\n  display: block;\\n  max-width: 100%;\\n}\\n\\n.ql-editor .ql-video.ql-align-center {\\n  margin: 0 auto;\\n}\\n\\n.ql-editor .ql-video.ql-align-right {\\n  margin: 0 0 0 auto;\\n}\\n\\n.ql-editor .ql-bg-black {\\n  background-color: #000;\\n}\\n\\n.ql-editor .ql-bg-red {\\n  background-color: #e60000;\\n}\\n\\n.ql-editor .ql-bg-orange {\\n  background-color: #f90;\\n}\\n\\n.ql-editor .ql-bg-yellow {\\n  background-color: #ff0;\\n}\\n\\n.ql-editor .ql-bg-green {\\n  background-color: #008a00;\\n}\\n\\n.ql-editor .ql-bg-blue {\\n  background-color: #06c;\\n}\\n\\n.ql-editor .ql-bg-purple {\\n  background-color: #93f;\\n}\\n\\n.ql-editor .ql-color-white {\\n  color: #fff;\\n}\\n\\n.ql-editor .ql-color-red {\\n  color: #e60000;\\n}\\n\\n.ql-editor .ql-color-orange {\\n  color: #f90;\\n}\\n\\n.ql-editor .ql-color-yellow {\\n  color: #ff0;\\n}\\n\\n.ql-editor .ql-color-green {\\n  color: #008a00;\\n}\\n\\n.ql-editor .ql-color-blue {\\n  color: #06c;\\n}\\n\\n.ql-editor .ql-color-purple {\\n  color: #93f;\\n}\\n\\n.ql-editor .ql-font-serif {\\n  font-family: Georgia, Times New Roman, serif;\\n}\\n\\n.ql-editor .ql-font-monospace {\\n  font-family: Monaco, Courier New, monospace;\\n}\\n\\n.ql-editor .ql-size-small {\\n  font-size: 0.75em;\\n}\\n\\n.ql-editor .ql-size-large {\\n  font-size: 1.5em;\\n}\\n\\n.ql-editor .ql-size-huge {\\n  font-size: 2.5em;\\n}\\n\\n.ql-editor .ql-direction-rtl {\\n  direction: rtl;\\n  text-align: inherit;\\n}\\n\\n.ql-editor .ql-align-center {\\n  text-align: center;\\n}\\n\\n.ql-editor .ql-align-justify {\\n  text-align: justify;\\n}\\n\\n.ql-editor .ql-align-right {\\n  text-align: right;\\n}\\n\\n.ql-editor.ql-blank::before {\\n  color: rgba(0,0,0,0.6);\\n  content: attr(data-placeholder);\\n  font-style: italic;\\n  pointer-events: none;\\n  position: absolute;\\n}\\n\\n.ql-bubble.ql-toolbar:after,\\n.ql-bubble .ql-toolbar:after {\\n  clear: both;\\n  content: '';\\n  display: table;\\n}\\n\\n.ql-bubble.ql-toolbar button,\\n.ql-bubble .ql-toolbar button {\\n  background: none;\\n  border: none;\\n  cursor: pointer;\\n  display: inline-block;\\n  float: left;\\n  height: 24px;\\n  padding: 3px 5px;\\n  width: 28px;\\n}\\n\\n.ql-bubble.ql-toolbar button svg,\\n.ql-bubble .ql-toolbar button svg {\\n  float: left;\\n  height: 100%;\\n}\\n\\n.ql-bubble.ql-toolbar button:active:hover,\\n.ql-bubble .ql-toolbar button:active:hover {\\n  outline: none;\\n}\\n\\n.ql-bubble.ql-toolbar input.ql-image[type=file],\\n.ql-bubble .ql-toolbar input.ql-image[type=file] {\\n  display: none;\\n}\\n\\n.ql-bubble.ql-toolbar button:hover,\\n.ql-bubble .ql-toolbar button:hover,\\n.ql-bubble.ql-toolbar button.ql-active,\\n.ql-bubble .ql-toolbar button.ql-active,\\n.ql-bubble.ql-toolbar .ql-picker-label:hover,\\n.ql-bubble .ql-toolbar .ql-picker-label:hover,\\n.ql-bubble.ql-toolbar .ql-picker-label.ql-active,\\n.ql-bubble .ql-toolbar .ql-picker-label.ql-active,\\n.ql-bubble.ql-toolbar .ql-picker-item:hover,\\n.ql-bubble .ql-toolbar .ql-picker-item:hover,\\n.ql-bubble.ql-toolbar .ql-picker-item.ql-selected,\\n.ql-bubble .ql-toolbar .ql-picker-item.ql-selected {\\n  color: #fff;\\n}\\n\\n.ql-bubble.ql-toolbar button:hover .ql-fill,\\n.ql-bubble .ql-toolbar button:hover .ql-fill,\\n.ql-bubble.ql-toolbar button.ql-active .ql-fill,\\n.ql-bubble .ql-toolbar button.ql-active .ql-fill,\\n.ql-bubble.ql-toolbar .ql-picker-label:hover .ql-fill,\\n.ql-bubble .ql-toolbar .ql-picker-label:hover .ql-fill,\\n.ql-bubble.ql-toolbar .ql-picker-label.ql-active .ql-fill,\\n.ql-bubble .ql-toolbar .ql-picker-label.ql-active .ql-fill,\\n.ql-bubble.ql-toolbar .ql-picker-item:hover .ql-fill,\\n.ql-bubble .ql-toolbar .ql-picker-item:hover .ql-fill,\\n.ql-bubble.ql-toolbar .ql-picker-item.ql-selected .ql-fill,\\n.ql-bubble .ql-toolbar .ql-picker-item.ql-selected .ql-fill,\\n.ql-bubble.ql-toolbar button:hover .ql-stroke.ql-fill,\\n.ql-bubble .ql-toolbar button:hover .ql-stroke.ql-fill,\\n.ql-bubble.ql-toolbar button.ql-active .ql-stroke.ql-fill,\\n.ql-bubble .ql-toolbar button.ql-active .ql-stroke.ql-fill,\\n.ql-bubble.ql-toolbar .ql-picker-label:hover .ql-stroke.ql-fill,\\n.ql-bubble .ql-toolbar .ql-picker-label:hover .ql-stroke.ql-fill,\\n.ql-bubble.ql-toolbar .ql-picker-label.ql-active .ql-stroke.ql-fill,\\n.ql-bubble .ql-toolbar .ql-picker-label.ql-active .ql-stroke.ql-fill,\\n.ql-bubble.ql-toolbar .ql-picker-item:hover .ql-stroke.ql-fill,\\n.ql-bubble .ql-toolbar .ql-picker-item:hover .ql-stroke.ql-fill,\\n.ql-bubble.ql-toolbar .ql-picker-item.ql-selected .ql-stroke.ql-fill,\\n.ql-bubble .ql-toolbar .ql-picker-item.ql-selected .ql-stroke.ql-fill {\\n  fill: #fff;\\n}\\n\\n.ql-bubble.ql-toolbar button:hover .ql-stroke,\\n.ql-bubble .ql-toolbar button:hover .ql-stroke,\\n.ql-bubble.ql-toolbar button.ql-active .ql-stroke,\\n.ql-bubble .ql-toolbar button.ql-active .ql-stroke,\\n.ql-bubble.ql-toolbar .ql-picker-label:hover .ql-stroke,\\n.ql-bubble .ql-toolbar .ql-picker-label:hover .ql-stroke,\\n.ql-bubble.ql-toolbar .ql-picker-label.ql-active .ql-stroke,\\n.ql-bubble .ql-toolbar .ql-picker-label.ql-active .ql-stroke,\\n.ql-bubble.ql-toolbar .ql-picker-item:hover .ql-stroke,\\n.ql-bubble .ql-toolbar .ql-picker-item:hover .ql-stroke,\\n.ql-bubble.ql-toolbar .ql-picker-item.ql-selected .ql-stroke,\\n.ql-bubble .ql-toolbar .ql-picker-item.ql-selected .ql-stroke,\\n.ql-bubble.ql-toolbar button:hover .ql-stroke-miter,\\n.ql-bubble .ql-toolbar button:hover .ql-stroke-miter,\\n.ql-bubble.ql-toolbar button.ql-active .ql-stroke-miter,\\n.ql-bubble .ql-toolbar button.ql-active .ql-stroke-miter,\\n.ql-bubble.ql-toolbar .ql-picker-label:hover .ql-stroke-miter,\\n.ql-bubble .ql-toolbar .ql-picker-label:hover .ql-stroke-miter,\\n.ql-bubble.ql-toolbar .ql-picker-label.ql-active .ql-stroke-miter,\\n.ql-bubble .ql-toolbar .ql-picker-label.ql-active .ql-stroke-miter,\\n.ql-bubble.ql-toolbar .ql-picker-item:hover .ql-stroke-miter,\\n.ql-bubble .ql-toolbar .ql-picker-item:hover .ql-stroke-miter,\\n.ql-bubble.ql-toolbar .ql-picker-item.ql-selected .ql-stroke-miter,\\n.ql-bubble .ql-toolbar .ql-picker-item.ql-selected .ql-stroke-miter {\\n  stroke: #fff;\\n}\\n\\n.ql-bubble {\\n  box-sizing: border-box;\\n}\\n\\n.ql-bubble * {\\n  box-sizing: border-box;\\n}\\n\\n.ql-bubble .ql-hidden {\\n  display: none;\\n}\\n\\n.ql-bubble .ql-out-bottom,\\n.ql-bubble .ql-out-top {\\n  visibility: hidden;\\n}\\n\\n.ql-bubble .ql-tooltip {\\n  position: absolute;\\n  transform: translateY(10px);\\n}\\n\\n.ql-bubble .ql-tooltip a {\\n  cursor: pointer;\\n  text-decoration: none;\\n}\\n\\n.ql-bubble .ql-tooltip.ql-flip {\\n  transform: translateY(-10px);\\n}\\n\\n.ql-bubble .ql-formats {\\n  display: inline-block;\\n  vertical-align: middle;\\n}\\n\\n.ql-bubble .ql-formats:after {\\n  clear: both;\\n  content: '';\\n  display: table;\\n}\\n\\n.ql-bubble .ql-stroke {\\n  fill: none;\\n  stroke: #ccc;\\n  stroke-linecap: round;\\n  stroke-linejoin: round;\\n  stroke-width: 2;\\n}\\n\\n.ql-bubble .ql-stroke-miter {\\n  fill: none;\\n  stroke: #ccc;\\n  stroke-miterlimit: 10;\\n  stroke-width: 2;\\n}\\n\\n.ql-bubble .ql-fill,\\n.ql-bubble .ql-stroke.ql-fill {\\n  fill: #ccc;\\n}\\n\\n.ql-bubble .ql-empty {\\n  fill: none;\\n}\\n\\n.ql-bubble .ql-even {\\n  fill-rule: evenodd;\\n}\\n\\n.ql-bubble .ql-thin,\\n.ql-bubble .ql-stroke.ql-thin {\\n  stroke-width: 1;\\n}\\n\\n.ql-bubble .ql-transparent {\\n  opacity: 0.4;\\n}\\n\\n.ql-bubble .ql-direction svg:last-child {\\n  display: none;\\n}\\n\\n.ql-bubble .ql-direction.ql-active svg:last-child {\\n  display: inline;\\n}\\n\\n.ql-bubble .ql-direction.ql-active svg:first-child {\\n  display: none;\\n}\\n\\n.ql-bubble .ql-editor h1 {\\n  font-size: 2em;\\n}\\n\\n.ql-bubble .ql-editor h2 {\\n  font-size: 1.5em;\\n}\\n\\n.ql-bubble .ql-editor h3 {\\n  font-size: 1.17em;\\n}\\n\\n.ql-bubble .ql-editor h4 {\\n  font-size: 1em;\\n}\\n\\n.ql-bubble .ql-editor h5 {\\n  font-size: 0.83em;\\n}\\n\\n.ql-bubble .ql-editor h6 {\\n  font-size: 0.67em;\\n}\\n\\n.ql-bubble .ql-editor a {\\n  text-decoration: underline;\\n}\\n\\n.ql-bubble .ql-editor blockquote {\\n  border-left: 4px solid #ccc;\\n  margin-bottom: 5px;\\n  margin-top: 5px;\\n  padding-left: 16px;\\n}\\n\\n.ql-bubble .ql-editor code,\\n.ql-bubble .ql-editor pre {\\n  background-color: #f0f0f0;\\n  border-radius: 3px;\\n}\\n\\n.ql-bubble .ql-editor pre {\\n  white-space: pre-wrap;\\n  margin-bottom: 5px;\\n  margin-top: 5px;\\n  padding: 5px 10px;\\n}\\n\\n.ql-bubble .ql-editor code {\\n  font-size: 85%;\\n  padding-bottom: 2px;\\n  padding-top: 2px;\\n}\\n\\n.ql-bubble .ql-editor code:before,\\n.ql-bubble .ql-editor code:after {\\n  content: \\\"\\\\A0\\\";\\n  letter-spacing: -2px;\\n}\\n\\n.ql-bubble .ql-editor pre.ql-syntax {\\n  background-color: #23241f;\\n  color: #f8f8f2;\\n  overflow: visible;\\n}\\n\\n.ql-bubble .ql-editor img {\\n  max-width: 100%;\\n}\\n\\n.ql-bubble .ql-picker {\\n  color: #ccc;\\n  display: inline-block;\\n  float: left;\\n  font-size: 14px;\\n  font-weight: 500;\\n  height: 24px;\\n  position: relative;\\n  vertical-align: middle;\\n}\\n\\n.ql-bubble .ql-picker-label {\\n  cursor: pointer;\\n  display: inline-block;\\n  height: 100%;\\n  padding-left: 8px;\\n  padding-right: 2px;\\n  position: relative;\\n  width: 100%;\\n}\\n\\n.ql-bubble .ql-picker-label::before {\\n  display: inline-block;\\n  line-height: 22px;\\n}\\n\\n.ql-bubble .ql-picker-options {\\n  background-color: #444;\\n  display: none;\\n  min-width: 100%;\\n  padding: 4px 8px;\\n  position: absolute;\\n  white-space: nowrap;\\n}\\n\\n.ql-bubble .ql-picker-options .ql-picker-item {\\n  cursor: pointer;\\n  display: block;\\n  padding-bottom: 5px;\\n  padding-top: 5px;\\n}\\n\\n.ql-bubble .ql-picker.ql-expanded .ql-picker-label {\\n  color: #777;\\n  z-index: 2;\\n}\\n\\n.ql-bubble .ql-picker.ql-expanded .ql-picker-label .ql-fill {\\n  fill: #777;\\n}\\n\\n.ql-bubble .ql-picker.ql-expanded .ql-picker-label .ql-stroke {\\n  stroke: #777;\\n}\\n\\n.ql-bubble .ql-picker.ql-expanded .ql-picker-options {\\n  display: block;\\n  margin-top: -1px;\\n  top: 100%;\\n  z-index: 1;\\n}\\n\\n.ql-bubble .ql-color-picker,\\n.ql-bubble .ql-icon-picker {\\n  width: 28px;\\n}\\n\\n.ql-bubble .ql-color-picker .ql-picker-label,\\n.ql-bubble .ql-icon-picker .ql-picker-label {\\n  padding: 2px 4px;\\n}\\n\\n.ql-bubble .ql-color-picker .ql-picker-label svg,\\n.ql-bubble .ql-icon-picker .ql-picker-label svg {\\n  right: 4px;\\n}\\n\\n.ql-bubble .ql-icon-picker .ql-picker-options {\\n  padding: 4px 0px;\\n}\\n\\n.ql-bubble .ql-icon-picker .ql-picker-item {\\n  height: 24px;\\n  width: 24px;\\n  padding: 2px 4px;\\n}\\n\\n.ql-bubble .ql-color-picker .ql-picker-options {\\n  padding: 3px 5px;\\n  width: 152px;\\n}\\n\\n.ql-bubble .ql-color-picker .ql-picker-item {\\n  border: 1px solid transparent;\\n  float: left;\\n  height: 16px;\\n  margin: 2px;\\n  padding: 0px;\\n  width: 16px;\\n}\\n\\n.ql-bubble .ql-picker:not(.ql-color-picker):not(.ql-icon-picker) svg {\\n  position: absolute;\\n  margin-top: -9px;\\n  right: 0;\\n  top: 50%;\\n  width: 18px;\\n}\\n\\n.ql-bubble .ql-picker.ql-header .ql-picker-label[data-label]:not([data-label=''])::before,\\n.ql-bubble .ql-picker.ql-font .ql-picker-label[data-label]:not([data-label=''])::before,\\n.ql-bubble .ql-picker.ql-size .ql-picker-label[data-label]:not([data-label=''])::before,\\n.ql-bubble .ql-picker.ql-header .ql-picker-item[data-label]:not([data-label=''])::before,\\n.ql-bubble .ql-picker.ql-font .ql-picker-item[data-label]:not([data-label=''])::before,\\n.ql-bubble .ql-picker.ql-size .ql-picker-item[data-label]:not([data-label=''])::before {\\n  content: attr(data-label);\\n}\\n\\n.ql-bubble .ql-picker.ql-header {\\n  width: 98px;\\n}\\n\\n.ql-bubble .ql-picker.ql-header .ql-picker-label::before,\\n.ql-bubble .ql-picker.ql-header .ql-picker-item::before {\\n  content: 'Normal';\\n}\\n\\n.ql-bubble .ql-picker.ql-header .ql-picker-label[data-value=\\\"1\\\"]::before,\\n.ql-bubble .ql-picker.ql-header .ql-picker-item[data-value=\\\"1\\\"]::before {\\n  content: 'Heading 1';\\n}\\n\\n.ql-bubble .ql-picker.ql-header .ql-picker-label[data-value=\\\"2\\\"]::before,\\n.ql-bubble .ql-picker.ql-header .ql-picker-item[data-value=\\\"2\\\"]::before {\\n  content: 'Heading 2';\\n}\\n\\n.ql-bubble .ql-picker.ql-header .ql-picker-label[data-value=\\\"3\\\"]::before,\\n.ql-bubble .ql-picker.ql-header .ql-picker-item[data-value=\\\"3\\\"]::before {\\n  content: 'Heading 3';\\n}\\n\\n.ql-bubble .ql-picker.ql-header .ql-picker-label[data-value=\\\"4\\\"]::before,\\n.ql-bubble .ql-picker.ql-header .ql-picker-item[data-value=\\\"4\\\"]::before {\\n  content: 'Heading 4';\\n}\\n\\n.ql-bubble .ql-picker.ql-header .ql-picker-label[data-value=\\\"5\\\"]::before,\\n.ql-bubble .ql-picker.ql-header .ql-picker-item[data-value=\\\"5\\\"]::before {\\n  content: 'Heading 5';\\n}\\n\\n.ql-bubble .ql-picker.ql-header .ql-picker-label[data-value=\\\"6\\\"]::before,\\n.ql-bubble .ql-picker.ql-header .ql-picker-item[data-value=\\\"6\\\"]::before {\\n  content: 'Heading 6';\\n}\\n\\n.ql-bubble .ql-picker.ql-header .ql-picker-item[data-value=\\\"1\\\"]::before {\\n  font-size: 2em;\\n}\\n\\n.ql-bubble .ql-picker.ql-header .ql-picker-item[data-value=\\\"2\\\"]::before {\\n  font-size: 1.5em;\\n}\\n\\n.ql-bubble .ql-picker.ql-header .ql-picker-item[data-value=\\\"3\\\"]::before {\\n  font-size: 1.17em;\\n}\\n\\n.ql-bubble .ql-picker.ql-header .ql-picker-item[data-value=\\\"4\\\"]::before {\\n  font-size: 1em;\\n}\\n\\n.ql-bubble .ql-picker.ql-header .ql-picker-item[data-value=\\\"5\\\"]::before {\\n  font-size: 0.83em;\\n}\\n\\n.ql-bubble .ql-picker.ql-header .ql-picker-item[data-value=\\\"6\\\"]::before {\\n  font-size: 0.67em;\\n}\\n\\n.ql-bubble .ql-picker.ql-font {\\n  width: 108px;\\n}\\n\\n.ql-bubble .ql-picker.ql-font .ql-picker-label::before,\\n.ql-bubble .ql-picker.ql-font .ql-picker-item::before {\\n  content: 'Sans Serif';\\n}\\n\\n.ql-bubble .ql-picker.ql-font .ql-picker-label[data-value=serif]::before,\\n.ql-bubble .ql-picker.ql-font .ql-picker-item[data-value=serif]::before {\\n  content: 'Serif';\\n}\\n\\n.ql-bubble .ql-picker.ql-font .ql-picker-label[data-value=monospace]::before,\\n.ql-bubble .ql-picker.ql-font .ql-picker-item[data-value=monospace]::before {\\n  content: 'Monospace';\\n}\\n\\n.ql-bubble .ql-picker.ql-font .ql-picker-item[data-value=serif]::before {\\n  font-family: Georgia, Times New Roman, serif;\\n}\\n\\n.ql-bubble .ql-picker.ql-font .ql-picker-item[data-value=monospace]::before {\\n  font-family: Monaco, Courier New, monospace;\\n}\\n\\n.ql-bubble .ql-picker.ql-size {\\n  width: 98px;\\n}\\n\\n.ql-bubble .ql-picker.ql-size .ql-picker-label::before,\\n.ql-bubble .ql-picker.ql-size .ql-picker-item::before {\\n  content: 'Normal';\\n}\\n\\n.ql-bubble .ql-picker.ql-size .ql-picker-label[data-value=small]::before,\\n.ql-bubble .ql-picker.ql-size .ql-picker-item[data-value=small]::before {\\n  content: 'Small';\\n}\\n\\n.ql-bubble .ql-picker.ql-size .ql-picker-label[data-value=large]::before,\\n.ql-bubble .ql-picker.ql-size .ql-picker-item[data-value=large]::before {\\n  content: 'Large';\\n}\\n\\n.ql-bubble .ql-picker.ql-size .ql-picker-label[data-value=huge]::before,\\n.ql-bubble .ql-picker.ql-size .ql-picker-item[data-value=huge]::before {\\n  content: 'Huge';\\n}\\n\\n.ql-bubble .ql-picker.ql-size .ql-picker-item[data-value=small]::before {\\n  font-size: 10px;\\n}\\n\\n.ql-bubble .ql-picker.ql-size .ql-picker-item[data-value=large]::before {\\n  font-size: 18px;\\n}\\n\\n.ql-bubble .ql-picker.ql-size .ql-picker-item[data-value=huge]::before {\\n  font-size: 32px;\\n}\\n\\n.ql-bubble .ql-color-picker.ql-background .ql-picker-item {\\n  background-color: #fff;\\n}\\n\\n.ql-bubble .ql-color-picker.ql-color .ql-picker-item {\\n  background-color: #000;\\n}\\n\\n.ql-bubble .ql-toolbar .ql-formats {\\n  margin: 8px 12px 8px 0px;\\n}\\n\\n.ql-bubble .ql-toolbar .ql-formats:first-child {\\n  margin-left: 12px;\\n}\\n\\n.ql-bubble .ql-color-picker svg {\\n  margin: 1px;\\n}\\n\\n.ql-bubble .ql-color-picker .ql-picker-item.ql-selected,\\n.ql-bubble .ql-color-picker .ql-picker-item:hover {\\n  border-color: #fff;\\n}\\n\\n.ql-bubble .ql-tooltip {\\n  background-color: #444;\\n  border-radius: 25px;\\n  color: #fff;\\n}\\n\\n.ql-bubble .ql-tooltip-arrow {\\n  border-left: 6px solid transparent;\\n  border-right: 6px solid transparent;\\n  content: \\\" \\\";\\n  display: block;\\n  left: 50%;\\n  margin-left: -6px;\\n  position: absolute;\\n}\\n\\n.ql-bubble .ql-tooltip:not(.ql-flip) .ql-tooltip-arrow {\\n  border-bottom: 6px solid #444;\\n  top: -6px;\\n}\\n\\n.ql-bubble .ql-tooltip.ql-flip .ql-tooltip-arrow {\\n  border-top: 6px solid #444;\\n  bottom: -6px;\\n}\\n\\n.ql-bubble .ql-tooltip.ql-editing .ql-tooltip-editor {\\n  display: block;\\n}\\n\\n.ql-bubble .ql-tooltip.ql-editing .ql-formats {\\n  visibility: hidden;\\n}\\n\\n.ql-bubble .ql-tooltip-editor {\\n  display: none;\\n}\\n\\n.ql-bubble .ql-tooltip-editor input[type=text] {\\n  background: transparent;\\n  border: none;\\n  color: #fff;\\n  font-size: 13px;\\n  height: 100%;\\n  outline: none;\\n  padding: 10px 20px;\\n  position: absolute;\\n  width: 100%;\\n}\\n\\n.ql-bubble .ql-tooltip-editor a {\\n  top: 10px;\\n  position: absolute;\\n  right: 20px;\\n}\\n\\n.ql-bubble .ql-tooltip-editor a:before {\\n  color: #ccc;\\n  content: \\\"\\\\D7\\\";\\n  font-size: 16px;\\n  font-weight: bold;\\n}\\n\\n\", \"\"]);\n\n// exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/css-loader!./~/resolve-url-loader!./~/postcss-loader!./~/quill/dist/quill.bubble.css\n// module id = 22\n// module chunks = 0","exports = module.exports = require(\"../../css-loader/lib/css-base.js\")(undefined);\n// imports\n\n\n// module\nexports.push([module.id, \"/*!\\n * Quill Editor v1.1.9\\n * https://quilljs.com/\\n * Copyright (c) 2014, Jason Chen\\n * Copyright (c) 2013, salesforce.com\\n */\\n\\n.ql-container {\\n  box-sizing: border-box;\\n  font-family: Helvetica, Arial, sans-serif;\\n  font-size: 13px;\\n  height: 100%;\\n  margin: 0px;\\n  position: relative;\\n}\\n\\n.ql-container.ql-disabled .ql-tooltip {\\n  visibility: hidden;\\n}\\n\\n.ql-clipboard {\\n  left: -100000px;\\n  height: 1px;\\n  overflow-y: hidden;\\n  position: absolute;\\n  top: 50%;\\n}\\n\\n.ql-clipboard p {\\n  margin: 0;\\n  padding: 0;\\n}\\n\\n.ql-editor {\\n  box-sizing: border-box;\\n  cursor: text;\\n  line-height: 1.42;\\n  height: 100%;\\n  outline: none;\\n  overflow-y: auto;\\n  padding: 12px 15px;\\n  tab-size: 4;\\n  -moz-tab-size: 4;\\n  text-align: left;\\n  white-space: pre-wrap;\\n  word-wrap: break-word;\\n}\\n\\n.ql-editor p,\\n.ql-editor ol,\\n.ql-editor ul,\\n.ql-editor pre,\\n.ql-editor blockquote,\\n.ql-editor h1,\\n.ql-editor h2,\\n.ql-editor h3,\\n.ql-editor h4,\\n.ql-editor h5,\\n.ql-editor h6 {\\n  margin: 0;\\n  padding: 0;\\n  counter-reset: list-1 list-2 list-3 list-4 list-5 list-6 list-7 list-8 list-9;\\n}\\n\\n.ql-editor ol,\\n.ql-editor ul {\\n  padding-left: 1.5em;\\n}\\n\\n.ql-editor ol > li,\\n.ql-editor ul > li {\\n  list-style-type: none;\\n}\\n\\n.ql-editor ul > li::before {\\n  content: '\\\\25CF';\\n}\\n\\n.ql-editor ul[data-checked=true] > li::before,\\n.ql-editor ul[data-checked=false] > li::before {\\n  color: #777;\\n  cursor: pointer;\\n}\\n\\n.ql-editor ul[data-checked=true] > li::before {\\n  content: '\\\\2611';\\n}\\n\\n.ql-editor ul[data-checked=false] > li::before {\\n  content: '\\\\2610';\\n}\\n\\n.ql-editor li::before {\\n  display: inline-block;\\n  margin-right: 0.3em;\\n  text-align: right;\\n  white-space: nowrap;\\n  width: 1.2em;\\n}\\n\\n.ql-editor li:not(.ql-direction-rtl)::before {\\n  margin-left: -1.5em;\\n}\\n\\n.ql-editor ol li,\\n.ql-editor ul li {\\n  padding-left: 1.5em;\\n}\\n\\n.ql-editor ol li {\\n  counter-reset: list-1 list-2 list-3 list-4 list-5 list-6 list-7 list-8 list-9;\\n  counter-increment: list-num;\\n}\\n\\n.ql-editor ol li:before {\\n  content: counter(list-num, decimal) '. ';\\n}\\n\\n.ql-editor ol li.ql-indent-1 {\\n  counter-increment: list-1;\\n}\\n\\n.ql-editor ol li.ql-indent-1:before {\\n  content: counter(list-1, lower-alpha) '. ';\\n}\\n\\n.ql-editor ol li.ql-indent-1 {\\n  counter-reset: list-2 list-3 list-4 list-5 list-6 list-7 list-8 list-9;\\n}\\n\\n.ql-editor ol li.ql-indent-2 {\\n  counter-increment: list-2;\\n}\\n\\n.ql-editor ol li.ql-indent-2:before {\\n  content: counter(list-2, lower-roman) '. ';\\n}\\n\\n.ql-editor ol li.ql-indent-2 {\\n  counter-reset: list-3 list-4 list-5 list-6 list-7 list-8 list-9;\\n}\\n\\n.ql-editor ol li.ql-indent-3 {\\n  counter-increment: list-3;\\n}\\n\\n.ql-editor ol li.ql-indent-3:before {\\n  content: counter(list-3, decimal) '. ';\\n}\\n\\n.ql-editor ol li.ql-indent-3 {\\n  counter-reset: list-4 list-5 list-6 list-7 list-8 list-9;\\n}\\n\\n.ql-editor ol li.ql-indent-4 {\\n  counter-increment: list-4;\\n}\\n\\n.ql-editor ol li.ql-indent-4:before {\\n  content: counter(list-4, lower-alpha) '. ';\\n}\\n\\n.ql-editor ol li.ql-indent-4 {\\n  counter-reset: list-5 list-6 list-7 list-8 list-9;\\n}\\n\\n.ql-editor ol li.ql-indent-5 {\\n  counter-increment: list-5;\\n}\\n\\n.ql-editor ol li.ql-indent-5:before {\\n  content: counter(list-5, lower-roman) '. ';\\n}\\n\\n.ql-editor ol li.ql-indent-5 {\\n  counter-reset: list-6 list-7 list-8 list-9;\\n}\\n\\n.ql-editor ol li.ql-indent-6 {\\n  counter-increment: list-6;\\n}\\n\\n.ql-editor ol li.ql-indent-6:before {\\n  content: counter(list-6, decimal) '. ';\\n}\\n\\n.ql-editor ol li.ql-indent-6 {\\n  counter-reset: list-7 list-8 list-9;\\n}\\n\\n.ql-editor ol li.ql-indent-7 {\\n  counter-increment: list-7;\\n}\\n\\n.ql-editor ol li.ql-indent-7:before {\\n  content: counter(list-7, lower-alpha) '. ';\\n}\\n\\n.ql-editor ol li.ql-indent-7 {\\n  counter-reset: list-8 list-9;\\n}\\n\\n.ql-editor ol li.ql-indent-8 {\\n  counter-increment: list-8;\\n}\\n\\n.ql-editor ol li.ql-indent-8:before {\\n  content: counter(list-8, lower-roman) '. ';\\n}\\n\\n.ql-editor ol li.ql-indent-8 {\\n  counter-reset: list-9;\\n}\\n\\n.ql-editor ol li.ql-indent-9 {\\n  counter-increment: list-9;\\n}\\n\\n.ql-editor ol li.ql-indent-9:before {\\n  content: counter(list-9, decimal) '. ';\\n}\\n\\n.ql-editor .ql-indent-1:not(.ql-direction-rtl) {\\n  padding-left: 3em;\\n}\\n\\n.ql-editor li.ql-indent-1:not(.ql-direction-rtl) {\\n  padding-left: 4.5em;\\n}\\n\\n.ql-editor .ql-indent-1.ql-direction-rtl.ql-align-right {\\n  padding-right: 3em;\\n}\\n\\n.ql-editor li.ql-indent-1.ql-direction-rtl.ql-align-right {\\n  padding-right: 4.5em;\\n}\\n\\n.ql-editor .ql-indent-2:not(.ql-direction-rtl) {\\n  padding-left: 6em;\\n}\\n\\n.ql-editor li.ql-indent-2:not(.ql-direction-rtl) {\\n  padding-left: 7.5em;\\n}\\n\\n.ql-editor .ql-indent-2.ql-direction-rtl.ql-align-right {\\n  padding-right: 6em;\\n}\\n\\n.ql-editor li.ql-indent-2.ql-direction-rtl.ql-align-right {\\n  padding-right: 7.5em;\\n}\\n\\n.ql-editor .ql-indent-3:not(.ql-direction-rtl) {\\n  padding-left: 9em;\\n}\\n\\n.ql-editor li.ql-indent-3:not(.ql-direction-rtl) {\\n  padding-left: 10.5em;\\n}\\n\\n.ql-editor .ql-indent-3.ql-direction-rtl.ql-align-right {\\n  padding-right: 9em;\\n}\\n\\n.ql-editor li.ql-indent-3.ql-direction-rtl.ql-align-right {\\n  padding-right: 10.5em;\\n}\\n\\n.ql-editor .ql-indent-4:not(.ql-direction-rtl) {\\n  padding-left: 12em;\\n}\\n\\n.ql-editor li.ql-indent-4:not(.ql-direction-rtl) {\\n  padding-left: 13.5em;\\n}\\n\\n.ql-editor .ql-indent-4.ql-direction-rtl.ql-align-right {\\n  padding-right: 12em;\\n}\\n\\n.ql-editor li.ql-indent-4.ql-direction-rtl.ql-align-right {\\n  padding-right: 13.5em;\\n}\\n\\n.ql-editor .ql-indent-5:not(.ql-direction-rtl) {\\n  padding-left: 15em;\\n}\\n\\n.ql-editor li.ql-indent-5:not(.ql-direction-rtl) {\\n  padding-left: 16.5em;\\n}\\n\\n.ql-editor .ql-indent-5.ql-direction-rtl.ql-align-right {\\n  padding-right: 15em;\\n}\\n\\n.ql-editor li.ql-indent-5.ql-direction-rtl.ql-align-right {\\n  padding-right: 16.5em;\\n}\\n\\n.ql-editor .ql-indent-6:not(.ql-direction-rtl) {\\n  padding-left: 18em;\\n}\\n\\n.ql-editor li.ql-indent-6:not(.ql-direction-rtl) {\\n  padding-left: 19.5em;\\n}\\n\\n.ql-editor .ql-indent-6.ql-direction-rtl.ql-align-right {\\n  padding-right: 18em;\\n}\\n\\n.ql-editor li.ql-indent-6.ql-direction-rtl.ql-align-right {\\n  padding-right: 19.5em;\\n}\\n\\n.ql-editor .ql-indent-7:not(.ql-direction-rtl) {\\n  padding-left: 21em;\\n}\\n\\n.ql-editor li.ql-indent-7:not(.ql-direction-rtl) {\\n  padding-left: 22.5em;\\n}\\n\\n.ql-editor .ql-indent-7.ql-direction-rtl.ql-align-right {\\n  padding-right: 21em;\\n}\\n\\n.ql-editor li.ql-indent-7.ql-direction-rtl.ql-align-right {\\n  padding-right: 22.5em;\\n}\\n\\n.ql-editor .ql-indent-8:not(.ql-direction-rtl) {\\n  padding-left: 24em;\\n}\\n\\n.ql-editor li.ql-indent-8:not(.ql-direction-rtl) {\\n  padding-left: 25.5em;\\n}\\n\\n.ql-editor .ql-indent-8.ql-direction-rtl.ql-align-right {\\n  padding-right: 24em;\\n}\\n\\n.ql-editor li.ql-indent-8.ql-direction-rtl.ql-align-right {\\n  padding-right: 25.5em;\\n}\\n\\n.ql-editor .ql-indent-9:not(.ql-direction-rtl) {\\n  padding-left: 27em;\\n}\\n\\n.ql-editor li.ql-indent-9:not(.ql-direction-rtl) {\\n  padding-left: 28.5em;\\n}\\n\\n.ql-editor .ql-indent-9.ql-direction-rtl.ql-align-right {\\n  padding-right: 27em;\\n}\\n\\n.ql-editor li.ql-indent-9.ql-direction-rtl.ql-align-right {\\n  padding-right: 28.5em;\\n}\\n\\n.ql-editor .ql-video {\\n  display: block;\\n  max-width: 100%;\\n}\\n\\n.ql-editor .ql-video.ql-align-center {\\n  margin: 0 auto;\\n}\\n\\n.ql-editor .ql-video.ql-align-right {\\n  margin: 0 0 0 auto;\\n}\\n\\n.ql-editor .ql-bg-black {\\n  background-color: #000;\\n}\\n\\n.ql-editor .ql-bg-red {\\n  background-color: #e60000;\\n}\\n\\n.ql-editor .ql-bg-orange {\\n  background-color: #f90;\\n}\\n\\n.ql-editor .ql-bg-yellow {\\n  background-color: #ff0;\\n}\\n\\n.ql-editor .ql-bg-green {\\n  background-color: #008a00;\\n}\\n\\n.ql-editor .ql-bg-blue {\\n  background-color: #06c;\\n}\\n\\n.ql-editor .ql-bg-purple {\\n  background-color: #93f;\\n}\\n\\n.ql-editor .ql-color-white {\\n  color: #fff;\\n}\\n\\n.ql-editor .ql-color-red {\\n  color: #e60000;\\n}\\n\\n.ql-editor .ql-color-orange {\\n  color: #f90;\\n}\\n\\n.ql-editor .ql-color-yellow {\\n  color: #ff0;\\n}\\n\\n.ql-editor .ql-color-green {\\n  color: #008a00;\\n}\\n\\n.ql-editor .ql-color-blue {\\n  color: #06c;\\n}\\n\\n.ql-editor .ql-color-purple {\\n  color: #93f;\\n}\\n\\n.ql-editor .ql-font-serif {\\n  font-family: Georgia, Times New Roman, serif;\\n}\\n\\n.ql-editor .ql-font-monospace {\\n  font-family: Monaco, Courier New, monospace;\\n}\\n\\n.ql-editor .ql-size-small {\\n  font-size: 0.75em;\\n}\\n\\n.ql-editor .ql-size-large {\\n  font-size: 1.5em;\\n}\\n\\n.ql-editor .ql-size-huge {\\n  font-size: 2.5em;\\n}\\n\\n.ql-editor .ql-direction-rtl {\\n  direction: rtl;\\n  text-align: inherit;\\n}\\n\\n.ql-editor .ql-align-center {\\n  text-align: center;\\n}\\n\\n.ql-editor .ql-align-justify {\\n  text-align: justify;\\n}\\n\\n.ql-editor .ql-align-right {\\n  text-align: right;\\n}\\n\\n.ql-editor.ql-blank::before {\\n  color: rgba(0,0,0,0.6);\\n  content: attr(data-placeholder);\\n  font-style: italic;\\n  pointer-events: none;\\n  position: absolute;\\n}\\n\\n\", \"\"]);\n\n// exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/css-loader!./~/resolve-url-loader!./~/postcss-loader!./~/quill/dist/quill.core.css\n// module id = 23\n// module chunks = 0","exports = module.exports = require(\"../../css-loader/lib/css-base.js\")(undefined);\n// imports\n\n\n// module\nexports.push([module.id, \"/*!\\n * Quill Editor v1.1.9\\n * https://quilljs.com/\\n * Copyright (c) 2014, Jason Chen\\n * Copyright (c) 2013, salesforce.com\\n */\\n\\n.ql-container {\\n  box-sizing: border-box;\\n  font-family: Helvetica, Arial, sans-serif;\\n  font-size: 13px;\\n  height: 100%;\\n  margin: 0px;\\n  position: relative;\\n}\\n\\n.ql-container.ql-disabled .ql-tooltip {\\n  visibility: hidden;\\n}\\n\\n.ql-clipboard {\\n  left: -100000px;\\n  height: 1px;\\n  overflow-y: hidden;\\n  position: absolute;\\n  top: 50%;\\n}\\n\\n.ql-clipboard p {\\n  margin: 0;\\n  padding: 0;\\n}\\n\\n.ql-editor {\\n  box-sizing: border-box;\\n  cursor: text;\\n  line-height: 1.42;\\n  height: 100%;\\n  outline: none;\\n  overflow-y: auto;\\n  padding: 12px 15px;\\n  tab-size: 4;\\n  -moz-tab-size: 4;\\n  text-align: left;\\n  white-space: pre-wrap;\\n  word-wrap: break-word;\\n}\\n\\n.ql-editor p,\\n.ql-editor ol,\\n.ql-editor ul,\\n.ql-editor pre,\\n.ql-editor blockquote,\\n.ql-editor h1,\\n.ql-editor h2,\\n.ql-editor h3,\\n.ql-editor h4,\\n.ql-editor h5,\\n.ql-editor h6 {\\n  margin: 0;\\n  padding: 0;\\n  counter-reset: list-1 list-2 list-3 list-4 list-5 list-6 list-7 list-8 list-9;\\n}\\n\\n.ql-editor ol,\\n.ql-editor ul {\\n  padding-left: 1.5em;\\n}\\n\\n.ql-editor ol > li,\\n.ql-editor ul > li {\\n  list-style-type: none;\\n}\\n\\n.ql-editor ul > li::before {\\n  content: '\\\\25CF';\\n}\\n\\n.ql-editor ul[data-checked=true] > li::before,\\n.ql-editor ul[data-checked=false] > li::before {\\n  color: #777;\\n  cursor: pointer;\\n}\\n\\n.ql-editor ul[data-checked=true] > li::before {\\n  content: '\\\\2611';\\n}\\n\\n.ql-editor ul[data-checked=false] > li::before {\\n  content: '\\\\2610';\\n}\\n\\n.ql-editor li::before {\\n  display: inline-block;\\n  margin-right: 0.3em;\\n  text-align: right;\\n  white-space: nowrap;\\n  width: 1.2em;\\n}\\n\\n.ql-editor li:not(.ql-direction-rtl)::before {\\n  margin-left: -1.5em;\\n}\\n\\n.ql-editor ol li,\\n.ql-editor ul li {\\n  padding-left: 1.5em;\\n}\\n\\n.ql-editor ol li {\\n  counter-reset: list-1 list-2 list-3 list-4 list-5 list-6 list-7 list-8 list-9;\\n  counter-increment: list-num;\\n}\\n\\n.ql-editor ol li:before {\\n  content: counter(list-num, decimal) '. ';\\n}\\n\\n.ql-editor ol li.ql-indent-1 {\\n  counter-increment: list-1;\\n}\\n\\n.ql-editor ol li.ql-indent-1:before {\\n  content: counter(list-1, lower-alpha) '. ';\\n}\\n\\n.ql-editor ol li.ql-indent-1 {\\n  counter-reset: list-2 list-3 list-4 list-5 list-6 list-7 list-8 list-9;\\n}\\n\\n.ql-editor ol li.ql-indent-2 {\\n  counter-increment: list-2;\\n}\\n\\n.ql-editor ol li.ql-indent-2:before {\\n  content: counter(list-2, lower-roman) '. ';\\n}\\n\\n.ql-editor ol li.ql-indent-2 {\\n  counter-reset: list-3 list-4 list-5 list-6 list-7 list-8 list-9;\\n}\\n\\n.ql-editor ol li.ql-indent-3 {\\n  counter-increment: list-3;\\n}\\n\\n.ql-editor ol li.ql-indent-3:before {\\n  content: counter(list-3, decimal) '. ';\\n}\\n\\n.ql-editor ol li.ql-indent-3 {\\n  counter-reset: list-4 list-5 list-6 list-7 list-8 list-9;\\n}\\n\\n.ql-editor ol li.ql-indent-4 {\\n  counter-increment: list-4;\\n}\\n\\n.ql-editor ol li.ql-indent-4:before {\\n  content: counter(list-4, lower-alpha) '. ';\\n}\\n\\n.ql-editor ol li.ql-indent-4 {\\n  counter-reset: list-5 list-6 list-7 list-8 list-9;\\n}\\n\\n.ql-editor ol li.ql-indent-5 {\\n  counter-increment: list-5;\\n}\\n\\n.ql-editor ol li.ql-indent-5:before {\\n  content: counter(list-5, lower-roman) '. ';\\n}\\n\\n.ql-editor ol li.ql-indent-5 {\\n  counter-reset: list-6 list-7 list-8 list-9;\\n}\\n\\n.ql-editor ol li.ql-indent-6 {\\n  counter-increment: list-6;\\n}\\n\\n.ql-editor ol li.ql-indent-6:before {\\n  content: counter(list-6, decimal) '. ';\\n}\\n\\n.ql-editor ol li.ql-indent-6 {\\n  counter-reset: list-7 list-8 list-9;\\n}\\n\\n.ql-editor ol li.ql-indent-7 {\\n  counter-increment: list-7;\\n}\\n\\n.ql-editor ol li.ql-indent-7:before {\\n  content: counter(list-7, lower-alpha) '. ';\\n}\\n\\n.ql-editor ol li.ql-indent-7 {\\n  counter-reset: list-8 list-9;\\n}\\n\\n.ql-editor ol li.ql-indent-8 {\\n  counter-increment: list-8;\\n}\\n\\n.ql-editor ol li.ql-indent-8:before {\\n  content: counter(list-8, lower-roman) '. ';\\n}\\n\\n.ql-editor ol li.ql-indent-8 {\\n  counter-reset: list-9;\\n}\\n\\n.ql-editor ol li.ql-indent-9 {\\n  counter-increment: list-9;\\n}\\n\\n.ql-editor ol li.ql-indent-9:before {\\n  content: counter(list-9, decimal) '. ';\\n}\\n\\n.ql-editor .ql-indent-1:not(.ql-direction-rtl) {\\n  padding-left: 3em;\\n}\\n\\n.ql-editor li.ql-indent-1:not(.ql-direction-rtl) {\\n  padding-left: 4.5em;\\n}\\n\\n.ql-editor .ql-indent-1.ql-direction-rtl.ql-align-right {\\n  padding-right: 3em;\\n}\\n\\n.ql-editor li.ql-indent-1.ql-direction-rtl.ql-align-right {\\n  padding-right: 4.5em;\\n}\\n\\n.ql-editor .ql-indent-2:not(.ql-direction-rtl) {\\n  padding-left: 6em;\\n}\\n\\n.ql-editor li.ql-indent-2:not(.ql-direction-rtl) {\\n  padding-left: 7.5em;\\n}\\n\\n.ql-editor .ql-indent-2.ql-direction-rtl.ql-align-right {\\n  padding-right: 6em;\\n}\\n\\n.ql-editor li.ql-indent-2.ql-direction-rtl.ql-align-right {\\n  padding-right: 7.5em;\\n}\\n\\n.ql-editor .ql-indent-3:not(.ql-direction-rtl) {\\n  padding-left: 9em;\\n}\\n\\n.ql-editor li.ql-indent-3:not(.ql-direction-rtl) {\\n  padding-left: 10.5em;\\n}\\n\\n.ql-editor .ql-indent-3.ql-direction-rtl.ql-align-right {\\n  padding-right: 9em;\\n}\\n\\n.ql-editor li.ql-indent-3.ql-direction-rtl.ql-align-right {\\n  padding-right: 10.5em;\\n}\\n\\n.ql-editor .ql-indent-4:not(.ql-direction-rtl) {\\n  padding-left: 12em;\\n}\\n\\n.ql-editor li.ql-indent-4:not(.ql-direction-rtl) {\\n  padding-left: 13.5em;\\n}\\n\\n.ql-editor .ql-indent-4.ql-direction-rtl.ql-align-right {\\n  padding-right: 12em;\\n}\\n\\n.ql-editor li.ql-indent-4.ql-direction-rtl.ql-align-right {\\n  padding-right: 13.5em;\\n}\\n\\n.ql-editor .ql-indent-5:not(.ql-direction-rtl) {\\n  padding-left: 15em;\\n}\\n\\n.ql-editor li.ql-indent-5:not(.ql-direction-rtl) {\\n  padding-left: 16.5em;\\n}\\n\\n.ql-editor .ql-indent-5.ql-direction-rtl.ql-align-right {\\n  padding-right: 15em;\\n}\\n\\n.ql-editor li.ql-indent-5.ql-direction-rtl.ql-align-right {\\n  padding-right: 16.5em;\\n}\\n\\n.ql-editor .ql-indent-6:not(.ql-direction-rtl) {\\n  padding-left: 18em;\\n}\\n\\n.ql-editor li.ql-indent-6:not(.ql-direction-rtl) {\\n  padding-left: 19.5em;\\n}\\n\\n.ql-editor .ql-indent-6.ql-direction-rtl.ql-align-right {\\n  padding-right: 18em;\\n}\\n\\n.ql-editor li.ql-indent-6.ql-direction-rtl.ql-align-right {\\n  padding-right: 19.5em;\\n}\\n\\n.ql-editor .ql-indent-7:not(.ql-direction-rtl) {\\n  padding-left: 21em;\\n}\\n\\n.ql-editor li.ql-indent-7:not(.ql-direction-rtl) {\\n  padding-left: 22.5em;\\n}\\n\\n.ql-editor .ql-indent-7.ql-direction-rtl.ql-align-right {\\n  padding-right: 21em;\\n}\\n\\n.ql-editor li.ql-indent-7.ql-direction-rtl.ql-align-right {\\n  padding-right: 22.5em;\\n}\\n\\n.ql-editor .ql-indent-8:not(.ql-direction-rtl) {\\n  padding-left: 24em;\\n}\\n\\n.ql-editor li.ql-indent-8:not(.ql-direction-rtl) {\\n  padding-left: 25.5em;\\n}\\n\\n.ql-editor .ql-indent-8.ql-direction-rtl.ql-align-right {\\n  padding-right: 24em;\\n}\\n\\n.ql-editor li.ql-indent-8.ql-direction-rtl.ql-align-right {\\n  padding-right: 25.5em;\\n}\\n\\n.ql-editor .ql-indent-9:not(.ql-direction-rtl) {\\n  padding-left: 27em;\\n}\\n\\n.ql-editor li.ql-indent-9:not(.ql-direction-rtl) {\\n  padding-left: 28.5em;\\n}\\n\\n.ql-editor .ql-indent-9.ql-direction-rtl.ql-align-right {\\n  padding-right: 27em;\\n}\\n\\n.ql-editor li.ql-indent-9.ql-direction-rtl.ql-align-right {\\n  padding-right: 28.5em;\\n}\\n\\n.ql-editor .ql-video {\\n  display: block;\\n  max-width: 100%;\\n}\\n\\n.ql-editor .ql-video.ql-align-center {\\n  margin: 0 auto;\\n}\\n\\n.ql-editor .ql-video.ql-align-right {\\n  margin: 0 0 0 auto;\\n}\\n\\n.ql-editor .ql-bg-black {\\n  background-color: #000;\\n}\\n\\n.ql-editor .ql-bg-red {\\n  background-color: #e60000;\\n}\\n\\n.ql-editor .ql-bg-orange {\\n  background-color: #f90;\\n}\\n\\n.ql-editor .ql-bg-yellow {\\n  background-color: #ff0;\\n}\\n\\n.ql-editor .ql-bg-green {\\n  background-color: #008a00;\\n}\\n\\n.ql-editor .ql-bg-blue {\\n  background-color: #06c;\\n}\\n\\n.ql-editor .ql-bg-purple {\\n  background-color: #93f;\\n}\\n\\n.ql-editor .ql-color-white {\\n  color: #fff;\\n}\\n\\n.ql-editor .ql-color-red {\\n  color: #e60000;\\n}\\n\\n.ql-editor .ql-color-orange {\\n  color: #f90;\\n}\\n\\n.ql-editor .ql-color-yellow {\\n  color: #ff0;\\n}\\n\\n.ql-editor .ql-color-green {\\n  color: #008a00;\\n}\\n\\n.ql-editor .ql-color-blue {\\n  color: #06c;\\n}\\n\\n.ql-editor .ql-color-purple {\\n  color: #93f;\\n}\\n\\n.ql-editor .ql-font-serif {\\n  font-family: Georgia, Times New Roman, serif;\\n}\\n\\n.ql-editor .ql-font-monospace {\\n  font-family: Monaco, Courier New, monospace;\\n}\\n\\n.ql-editor .ql-size-small {\\n  font-size: 0.75em;\\n}\\n\\n.ql-editor .ql-size-large {\\n  font-size: 1.5em;\\n}\\n\\n.ql-editor .ql-size-huge {\\n  font-size: 2.5em;\\n}\\n\\n.ql-editor .ql-direction-rtl {\\n  direction: rtl;\\n  text-align: inherit;\\n}\\n\\n.ql-editor .ql-align-center {\\n  text-align: center;\\n}\\n\\n.ql-editor .ql-align-justify {\\n  text-align: justify;\\n}\\n\\n.ql-editor .ql-align-right {\\n  text-align: right;\\n}\\n\\n.ql-editor.ql-blank::before {\\n  color: rgba(0,0,0,0.6);\\n  content: attr(data-placeholder);\\n  font-style: italic;\\n  pointer-events: none;\\n  position: absolute;\\n}\\n\\n.ql-snow.ql-toolbar:after,\\n.ql-snow .ql-toolbar:after {\\n  clear: both;\\n  content: '';\\n  display: table;\\n}\\n\\n.ql-snow.ql-toolbar button,\\n.ql-snow .ql-toolbar button {\\n  background: none;\\n  border: none;\\n  cursor: pointer;\\n  display: inline-block;\\n  float: left;\\n  height: 24px;\\n  padding: 3px 5px;\\n  width: 28px;\\n}\\n\\n.ql-snow.ql-toolbar button svg,\\n.ql-snow .ql-toolbar button svg {\\n  float: left;\\n  height: 100%;\\n}\\n\\n.ql-snow.ql-toolbar button:active:hover,\\n.ql-snow .ql-toolbar button:active:hover {\\n  outline: none;\\n}\\n\\n.ql-snow.ql-toolbar input.ql-image[type=file],\\n.ql-snow .ql-toolbar input.ql-image[type=file] {\\n  display: none;\\n}\\n\\n.ql-snow.ql-toolbar button:hover,\\n.ql-snow .ql-toolbar button:hover,\\n.ql-snow.ql-toolbar button.ql-active,\\n.ql-snow .ql-toolbar button.ql-active,\\n.ql-snow.ql-toolbar .ql-picker-label:hover,\\n.ql-snow .ql-toolbar .ql-picker-label:hover,\\n.ql-snow.ql-toolbar .ql-picker-label.ql-active,\\n.ql-snow .ql-toolbar .ql-picker-label.ql-active,\\n.ql-snow.ql-toolbar .ql-picker-item:hover,\\n.ql-snow .ql-toolbar .ql-picker-item:hover,\\n.ql-snow.ql-toolbar .ql-picker-item.ql-selected,\\n.ql-snow .ql-toolbar .ql-picker-item.ql-selected {\\n  color: #06c;\\n}\\n\\n.ql-snow.ql-toolbar button:hover .ql-fill,\\n.ql-snow .ql-toolbar button:hover .ql-fill,\\n.ql-snow.ql-toolbar button.ql-active .ql-fill,\\n.ql-snow .ql-toolbar button.ql-active .ql-fill,\\n.ql-snow.ql-toolbar .ql-picker-label:hover .ql-fill,\\n.ql-snow .ql-toolbar .ql-picker-label:hover .ql-fill,\\n.ql-snow.ql-toolbar .ql-picker-label.ql-active .ql-fill,\\n.ql-snow .ql-toolbar .ql-picker-label.ql-active .ql-fill,\\n.ql-snow.ql-toolbar .ql-picker-item:hover .ql-fill,\\n.ql-snow .ql-toolbar .ql-picker-item:hover .ql-fill,\\n.ql-snow.ql-toolbar .ql-picker-item.ql-selected .ql-fill,\\n.ql-snow .ql-toolbar .ql-picker-item.ql-selected .ql-fill,\\n.ql-snow.ql-toolbar button:hover .ql-stroke.ql-fill,\\n.ql-snow .ql-toolbar button:hover .ql-stroke.ql-fill,\\n.ql-snow.ql-toolbar button.ql-active .ql-stroke.ql-fill,\\n.ql-snow .ql-toolbar button.ql-active .ql-stroke.ql-fill,\\n.ql-snow.ql-toolbar .ql-picker-label:hover .ql-stroke.ql-fill,\\n.ql-snow .ql-toolbar .ql-picker-label:hover .ql-stroke.ql-fill,\\n.ql-snow.ql-toolbar .ql-picker-label.ql-active .ql-stroke.ql-fill,\\n.ql-snow .ql-toolbar .ql-picker-label.ql-active .ql-stroke.ql-fill,\\n.ql-snow.ql-toolbar .ql-picker-item:hover .ql-stroke.ql-fill,\\n.ql-snow .ql-toolbar .ql-picker-item:hover .ql-stroke.ql-fill,\\n.ql-snow.ql-toolbar .ql-picker-item.ql-selected .ql-stroke.ql-fill,\\n.ql-snow .ql-toolbar .ql-picker-item.ql-selected .ql-stroke.ql-fill {\\n  fill: #06c;\\n}\\n\\n.ql-snow.ql-toolbar button:hover .ql-stroke,\\n.ql-snow .ql-toolbar button:hover .ql-stroke,\\n.ql-snow.ql-toolbar button.ql-active .ql-stroke,\\n.ql-snow .ql-toolbar button.ql-active .ql-stroke,\\n.ql-snow.ql-toolbar .ql-picker-label:hover .ql-stroke,\\n.ql-snow .ql-toolbar .ql-picker-label:hover .ql-stroke,\\n.ql-snow.ql-toolbar .ql-picker-label.ql-active .ql-stroke,\\n.ql-snow .ql-toolbar .ql-picker-label.ql-active .ql-stroke,\\n.ql-snow.ql-toolbar .ql-picker-item:hover .ql-stroke,\\n.ql-snow .ql-toolbar .ql-picker-item:hover .ql-stroke,\\n.ql-snow.ql-toolbar .ql-picker-item.ql-selected .ql-stroke,\\n.ql-snow .ql-toolbar .ql-picker-item.ql-selected .ql-stroke,\\n.ql-snow.ql-toolbar button:hover .ql-stroke-miter,\\n.ql-snow .ql-toolbar button:hover .ql-stroke-miter,\\n.ql-snow.ql-toolbar button.ql-active .ql-stroke-miter,\\n.ql-snow .ql-toolbar button.ql-active .ql-stroke-miter,\\n.ql-snow.ql-toolbar .ql-picker-label:hover .ql-stroke-miter,\\n.ql-snow .ql-toolbar .ql-picker-label:hover .ql-stroke-miter,\\n.ql-snow.ql-toolbar .ql-picker-label.ql-active .ql-stroke-miter,\\n.ql-snow .ql-toolbar .ql-picker-label.ql-active .ql-stroke-miter,\\n.ql-snow.ql-toolbar .ql-picker-item:hover .ql-stroke-miter,\\n.ql-snow .ql-toolbar .ql-picker-item:hover .ql-stroke-miter,\\n.ql-snow.ql-toolbar .ql-picker-item.ql-selected .ql-stroke-miter,\\n.ql-snow .ql-toolbar .ql-picker-item.ql-selected .ql-stroke-miter {\\n  stroke: #06c;\\n}\\n\\n.ql-snow {\\n  box-sizing: border-box;\\n}\\n\\n.ql-snow * {\\n  box-sizing: border-box;\\n}\\n\\n.ql-snow .ql-hidden {\\n  display: none;\\n}\\n\\n.ql-snow .ql-out-bottom,\\n.ql-snow .ql-out-top {\\n  visibility: hidden;\\n}\\n\\n.ql-snow .ql-tooltip {\\n  position: absolute;\\n  transform: translateY(10px);\\n}\\n\\n.ql-snow .ql-tooltip a {\\n  cursor: pointer;\\n  text-decoration: none;\\n}\\n\\n.ql-snow .ql-tooltip.ql-flip {\\n  transform: translateY(-10px);\\n}\\n\\n.ql-snow .ql-formats {\\n  display: inline-block;\\n  vertical-align: middle;\\n}\\n\\n.ql-snow .ql-formats:after {\\n  clear: both;\\n  content: '';\\n  display: table;\\n}\\n\\n.ql-snow .ql-stroke {\\n  fill: none;\\n  stroke: #444;\\n  stroke-linecap: round;\\n  stroke-linejoin: round;\\n  stroke-width: 2;\\n}\\n\\n.ql-snow .ql-stroke-miter {\\n  fill: none;\\n  stroke: #444;\\n  stroke-miterlimit: 10;\\n  stroke-width: 2;\\n}\\n\\n.ql-snow .ql-fill,\\n.ql-snow .ql-stroke.ql-fill {\\n  fill: #444;\\n}\\n\\n.ql-snow .ql-empty {\\n  fill: none;\\n}\\n\\n.ql-snow .ql-even {\\n  fill-rule: evenodd;\\n}\\n\\n.ql-snow .ql-thin,\\n.ql-snow .ql-stroke.ql-thin {\\n  stroke-width: 1;\\n}\\n\\n.ql-snow .ql-transparent {\\n  opacity: 0.4;\\n}\\n\\n.ql-snow .ql-direction svg:last-child {\\n  display: none;\\n}\\n\\n.ql-snow .ql-direction.ql-active svg:last-child {\\n  display: inline;\\n}\\n\\n.ql-snow .ql-direction.ql-active svg:first-child {\\n  display: none;\\n}\\n\\n.ql-snow .ql-editor h1 {\\n  font-size: 2em;\\n}\\n\\n.ql-snow .ql-editor h2 {\\n  font-size: 1.5em;\\n}\\n\\n.ql-snow .ql-editor h3 {\\n  font-size: 1.17em;\\n}\\n\\n.ql-snow .ql-editor h4 {\\n  font-size: 1em;\\n}\\n\\n.ql-snow .ql-editor h5 {\\n  font-size: 0.83em;\\n}\\n\\n.ql-snow .ql-editor h6 {\\n  font-size: 0.67em;\\n}\\n\\n.ql-snow .ql-editor a {\\n  text-decoration: underline;\\n}\\n\\n.ql-snow .ql-editor blockquote {\\n  border-left: 4px solid #ccc;\\n  margin-bottom: 5px;\\n  margin-top: 5px;\\n  padding-left: 16px;\\n}\\n\\n.ql-snow .ql-editor code,\\n.ql-snow .ql-editor pre {\\n  background-color: #f0f0f0;\\n  border-radius: 3px;\\n}\\n\\n.ql-snow .ql-editor pre {\\n  white-space: pre-wrap;\\n  margin-bottom: 5px;\\n  margin-top: 5px;\\n  padding: 5px 10px;\\n}\\n\\n.ql-snow .ql-editor code {\\n  font-size: 85%;\\n  padding-bottom: 2px;\\n  padding-top: 2px;\\n}\\n\\n.ql-snow .ql-editor code:before,\\n.ql-snow .ql-editor code:after {\\n  content: \\\"\\\\A0\\\";\\n  letter-spacing: -2px;\\n}\\n\\n.ql-snow .ql-editor pre.ql-syntax {\\n  background-color: #23241f;\\n  color: #f8f8f2;\\n  overflow: visible;\\n}\\n\\n.ql-snow .ql-editor img {\\n  max-width: 100%;\\n}\\n\\n.ql-snow .ql-picker {\\n  color: #444;\\n  display: inline-block;\\n  float: left;\\n  font-size: 14px;\\n  font-weight: 500;\\n  height: 24px;\\n  position: relative;\\n  vertical-align: middle;\\n}\\n\\n.ql-snow .ql-picker-label {\\n  cursor: pointer;\\n  display: inline-block;\\n  height: 100%;\\n  padding-left: 8px;\\n  padding-right: 2px;\\n  position: relative;\\n  width: 100%;\\n}\\n\\n.ql-snow .ql-picker-label::before {\\n  display: inline-block;\\n  line-height: 22px;\\n}\\n\\n.ql-snow .ql-picker-options {\\n  background-color: #fff;\\n  display: none;\\n  min-width: 100%;\\n  padding: 4px 8px;\\n  position: absolute;\\n  white-space: nowrap;\\n}\\n\\n.ql-snow .ql-picker-options .ql-picker-item {\\n  cursor: pointer;\\n  display: block;\\n  padding-bottom: 5px;\\n  padding-top: 5px;\\n}\\n\\n.ql-snow .ql-picker.ql-expanded .ql-picker-label {\\n  color: #ccc;\\n  z-index: 2;\\n}\\n\\n.ql-snow .ql-picker.ql-expanded .ql-picker-label .ql-fill {\\n  fill: #ccc;\\n}\\n\\n.ql-snow .ql-picker.ql-expanded .ql-picker-label .ql-stroke {\\n  stroke: #ccc;\\n}\\n\\n.ql-snow .ql-picker.ql-expanded .ql-picker-options {\\n  display: block;\\n  margin-top: -1px;\\n  top: 100%;\\n  z-index: 1;\\n}\\n\\n.ql-snow .ql-color-picker,\\n.ql-snow .ql-icon-picker {\\n  width: 28px;\\n}\\n\\n.ql-snow .ql-color-picker .ql-picker-label,\\n.ql-snow .ql-icon-picker .ql-picker-label {\\n  padding: 2px 4px;\\n}\\n\\n.ql-snow .ql-color-picker .ql-picker-label svg,\\n.ql-snow .ql-icon-picker .ql-picker-label svg {\\n  right: 4px;\\n}\\n\\n.ql-snow .ql-icon-picker .ql-picker-options {\\n  padding: 4px 0px;\\n}\\n\\n.ql-snow .ql-icon-picker .ql-picker-item {\\n  height: 24px;\\n  width: 24px;\\n  padding: 2px 4px;\\n}\\n\\n.ql-snow .ql-color-picker .ql-picker-options {\\n  padding: 3px 5px;\\n  width: 152px;\\n}\\n\\n.ql-snow .ql-color-picker .ql-picker-item {\\n  border: 1px solid transparent;\\n  float: left;\\n  height: 16px;\\n  margin: 2px;\\n  padding: 0px;\\n  width: 16px;\\n}\\n\\n.ql-snow .ql-picker:not(.ql-color-picker):not(.ql-icon-picker) svg {\\n  position: absolute;\\n  margin-top: -9px;\\n  right: 0;\\n  top: 50%;\\n  width: 18px;\\n}\\n\\n.ql-snow .ql-picker.ql-header .ql-picker-label[data-label]:not([data-label=''])::before,\\n.ql-snow .ql-picker.ql-font .ql-picker-label[data-label]:not([data-label=''])::before,\\n.ql-snow .ql-picker.ql-size .ql-picker-label[data-label]:not([data-label=''])::before,\\n.ql-snow .ql-picker.ql-header .ql-picker-item[data-label]:not([data-label=''])::before,\\n.ql-snow .ql-picker.ql-font .ql-picker-item[data-label]:not([data-label=''])::before,\\n.ql-snow .ql-picker.ql-size .ql-picker-item[data-label]:not([data-label=''])::before {\\n  content: attr(data-label);\\n}\\n\\n.ql-snow .ql-picker.ql-header {\\n  width: 98px;\\n}\\n\\n.ql-snow .ql-picker.ql-header .ql-picker-label::before,\\n.ql-snow .ql-picker.ql-header .ql-picker-item::before {\\n  content: 'Normal';\\n}\\n\\n.ql-snow .ql-picker.ql-header .ql-picker-label[data-value=\\\"1\\\"]::before,\\n.ql-snow .ql-picker.ql-header .ql-picker-item[data-value=\\\"1\\\"]::before {\\n  content: 'Heading 1';\\n}\\n\\n.ql-snow .ql-picker.ql-header .ql-picker-label[data-value=\\\"2\\\"]::before,\\n.ql-snow .ql-picker.ql-header .ql-picker-item[data-value=\\\"2\\\"]::before {\\n  content: 'Heading 2';\\n}\\n\\n.ql-snow .ql-picker.ql-header .ql-picker-label[data-value=\\\"3\\\"]::before,\\n.ql-snow .ql-picker.ql-header .ql-picker-item[data-value=\\\"3\\\"]::before {\\n  content: 'Heading 3';\\n}\\n\\n.ql-snow .ql-picker.ql-header .ql-picker-label[data-value=\\\"4\\\"]::before,\\n.ql-snow .ql-picker.ql-header .ql-picker-item[data-value=\\\"4\\\"]::before {\\n  content: 'Heading 4';\\n}\\n\\n.ql-snow .ql-picker.ql-header .ql-picker-label[data-value=\\\"5\\\"]::before,\\n.ql-snow .ql-picker.ql-header .ql-picker-item[data-value=\\\"5\\\"]::before {\\n  content: 'Heading 5';\\n}\\n\\n.ql-snow .ql-picker.ql-header .ql-picker-label[data-value=\\\"6\\\"]::before,\\n.ql-snow .ql-picker.ql-header .ql-picker-item[data-value=\\\"6\\\"]::before {\\n  content: 'Heading 6';\\n}\\n\\n.ql-snow .ql-picker.ql-header .ql-picker-item[data-value=\\\"1\\\"]::before {\\n  font-size: 2em;\\n}\\n\\n.ql-snow .ql-picker.ql-header .ql-picker-item[data-value=\\\"2\\\"]::before {\\n  font-size: 1.5em;\\n}\\n\\n.ql-snow .ql-picker.ql-header .ql-picker-item[data-value=\\\"3\\\"]::before {\\n  font-size: 1.17em;\\n}\\n\\n.ql-snow .ql-picker.ql-header .ql-picker-item[data-value=\\\"4\\\"]::before {\\n  font-size: 1em;\\n}\\n\\n.ql-snow .ql-picker.ql-header .ql-picker-item[data-value=\\\"5\\\"]::before {\\n  font-size: 0.83em;\\n}\\n\\n.ql-snow .ql-picker.ql-header .ql-picker-item[data-value=\\\"6\\\"]::before {\\n  font-size: 0.67em;\\n}\\n\\n.ql-snow .ql-picker.ql-font {\\n  width: 108px;\\n}\\n\\n.ql-snow .ql-picker.ql-font .ql-picker-label::before,\\n.ql-snow .ql-picker.ql-font .ql-picker-item::before {\\n  content: 'Sans Serif';\\n}\\n\\n.ql-snow .ql-picker.ql-font .ql-picker-label[data-value=serif]::before,\\n.ql-snow .ql-picker.ql-font .ql-picker-item[data-value=serif]::before {\\n  content: 'Serif';\\n}\\n\\n.ql-snow .ql-picker.ql-font .ql-picker-label[data-value=monospace]::before,\\n.ql-snow .ql-picker.ql-font .ql-picker-item[data-value=monospace]::before {\\n  content: 'Monospace';\\n}\\n\\n.ql-snow .ql-picker.ql-font .ql-picker-item[data-value=serif]::before {\\n  font-family: Georgia, Times New Roman, serif;\\n}\\n\\n.ql-snow .ql-picker.ql-font .ql-picker-item[data-value=monospace]::before {\\n  font-family: Monaco, Courier New, monospace;\\n}\\n\\n.ql-snow .ql-picker.ql-size {\\n  width: 98px;\\n}\\n\\n.ql-snow .ql-picker.ql-size .ql-picker-label::before,\\n.ql-snow .ql-picker.ql-size .ql-picker-item::before {\\n  content: 'Normal';\\n}\\n\\n.ql-snow .ql-picker.ql-size .ql-picker-label[data-value=small]::before,\\n.ql-snow .ql-picker.ql-size .ql-picker-item[data-value=small]::before {\\n  content: 'Small';\\n}\\n\\n.ql-snow .ql-picker.ql-size .ql-picker-label[data-value=large]::before,\\n.ql-snow .ql-picker.ql-size .ql-picker-item[data-value=large]::before {\\n  content: 'Large';\\n}\\n\\n.ql-snow .ql-picker.ql-size .ql-picker-label[data-value=huge]::before,\\n.ql-snow .ql-picker.ql-size .ql-picker-item[data-value=huge]::before {\\n  content: 'Huge';\\n}\\n\\n.ql-snow .ql-picker.ql-size .ql-picker-item[data-value=small]::before {\\n  font-size: 10px;\\n}\\n\\n.ql-snow .ql-picker.ql-size .ql-picker-item[data-value=large]::before {\\n  font-size: 18px;\\n}\\n\\n.ql-snow .ql-picker.ql-size .ql-picker-item[data-value=huge]::before {\\n  font-size: 32px;\\n}\\n\\n.ql-snow .ql-color-picker.ql-background .ql-picker-item {\\n  background-color: #fff;\\n}\\n\\n.ql-snow .ql-color-picker.ql-color .ql-picker-item {\\n  background-color: #000;\\n}\\n\\n.ql-toolbar.ql-snow {\\n  border: 1px solid #ccc;\\n  box-sizing: border-box;\\n  font-family: 'Helvetica Neue', 'Helvetica', 'Arial', sans-serif;\\n  padding: 8px;\\n}\\n\\n.ql-toolbar.ql-snow .ql-formats {\\n  margin-right: 15px;\\n}\\n\\n.ql-toolbar.ql-snow .ql-picker-label {\\n  border: 1px solid transparent;\\n}\\n\\n.ql-toolbar.ql-snow .ql-picker-options {\\n  border: 1px solid transparent;\\n  box-shadow: rgba(0,0,0,0.2) 0 2px 8px;\\n}\\n\\n.ql-toolbar.ql-snow .ql-picker.ql-expanded .ql-picker-label {\\n  border-color: #ccc;\\n}\\n\\n.ql-toolbar.ql-snow .ql-picker.ql-expanded .ql-picker-options {\\n  border-color: #ccc;\\n}\\n\\n.ql-toolbar.ql-snow .ql-color-picker .ql-picker-item.ql-selected,\\n.ql-toolbar.ql-snow .ql-color-picker .ql-picker-item:hover {\\n  border-color: #000;\\n}\\n\\n.ql-toolbar.ql-snow + .ql-container.ql-snow {\\n  border-top: 0px;\\n}\\n\\n.ql-snow .ql-tooltip {\\n  background-color: #fff;\\n  border: 1px solid #ccc;\\n  box-shadow: 0px 0px 5px #ddd;\\n  color: #444;\\n  padding: 5px 12px;\\n  white-space: nowrap;\\n}\\n\\n.ql-snow .ql-tooltip::before {\\n  content: \\\"Visit URL:\\\";\\n  line-height: 26px;\\n  margin-right: 8px;\\n}\\n\\n.ql-snow .ql-tooltip input[type=text] {\\n  display: none;\\n  border: 1px solid #ccc;\\n  font-size: 13px;\\n  height: 26px;\\n  margin: 0px;\\n  padding: 3px 5px;\\n  width: 170px;\\n}\\n\\n.ql-snow .ql-tooltip a.ql-preview {\\n  display: inline-block;\\n  max-width: 200px;\\n  overflow-x: hidden;\\n  text-overflow: ellipsis;\\n  vertical-align: top;\\n}\\n\\n.ql-snow .ql-tooltip a.ql-action::after {\\n  border-right: 1px solid #ccc;\\n  content: 'Edit';\\n  margin-left: 16px;\\n  padding-right: 8px;\\n}\\n\\n.ql-snow .ql-tooltip a.ql-remove::before {\\n  content: 'Remove';\\n  margin-left: 8px;\\n}\\n\\n.ql-snow .ql-tooltip a {\\n  line-height: 26px;\\n}\\n\\n.ql-snow .ql-tooltip.ql-editing a.ql-preview,\\n.ql-snow .ql-tooltip.ql-editing a.ql-remove {\\n  display: none;\\n}\\n\\n.ql-snow .ql-tooltip.ql-editing input[type=text] {\\n  display: inline-block;\\n}\\n\\n.ql-snow .ql-tooltip.ql-editing a.ql-action::after {\\n  border-right: 0px;\\n  content: 'Save';\\n  padding-right: 0px;\\n}\\n\\n.ql-snow .ql-tooltip[data-mode=link]::before {\\n  content: \\\"Enter link:\\\";\\n}\\n\\n.ql-snow .ql-tooltip[data-mode=formula]::before {\\n  content: \\\"Enter formula:\\\";\\n}\\n\\n.ql-snow .ql-tooltip[data-mode=video]::before {\\n  content: \\\"Enter video:\\\";\\n}\\n\\n.ql-snow a {\\n  color: #06c;\\n}\\n\\n.ql-container.ql-snow {\\n  border: 1px solid #ccc;\\n}\\n\\n\", \"\"]);\n\n// exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/css-loader!./~/resolve-url-loader!./~/postcss-loader!./~/quill/dist/quill.snow.css\n// module id = 24\n// module chunks = 0","/*!\n * Quill Editor v1.1.9\n * https://quilljs.com/\n * Copyright (c) 2014, Jason Chen\n * Copyright (c) 2013, salesforce.com\n */\n(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"Quill\"] = factory();\n\telse\n\t\troot[\"Quill\"] = factory();\n})(this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n\n\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tmodule.exports = __webpack_require__(53);\n\n\n/***/ },\n/* 1 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\tvar _parchment = __webpack_require__(2);\n\n\tvar _parchment2 = _interopRequireDefault(_parchment);\n\n\tvar _quill = __webpack_require__(18);\n\n\tvar _quill2 = _interopRequireDefault(_quill);\n\n\tvar _block = __webpack_require__(29);\n\n\tvar _block2 = _interopRequireDefault(_block);\n\n\tvar _break = __webpack_require__(30);\n\n\tvar _break2 = _interopRequireDefault(_break);\n\n\tvar _container = __webpack_require__(42);\n\n\tvar _container2 = _interopRequireDefault(_container);\n\n\tvar _cursor = __webpack_require__(34);\n\n\tvar _cursor2 = _interopRequireDefault(_cursor);\n\n\tvar _embed = __webpack_require__(31);\n\n\tvar _embed2 = _interopRequireDefault(_embed);\n\n\tvar _inline = __webpack_require__(32);\n\n\tvar _inline2 = _interopRequireDefault(_inline);\n\n\tvar _scroll = __webpack_require__(43);\n\n\tvar _scroll2 = _interopRequireDefault(_scroll);\n\n\tvar _text = __webpack_require__(33);\n\n\tvar _text2 = _interopRequireDefault(_text);\n\n\tvar _clipboard = __webpack_require__(44);\n\n\tvar _clipboard2 = _interopRequireDefault(_clipboard);\n\n\tvar _history = __webpack_require__(51);\n\n\tvar _history2 = _interopRequireDefault(_history);\n\n\tvar _keyboard = __webpack_require__(52);\n\n\tvar _keyboard2 = _interopRequireDefault(_keyboard);\n\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n\t_quill2.default.register({\n\t  'blots/block': _block2.default,\n\t  'blots/block/embed': _block.BlockEmbed,\n\t  'blots/break': _break2.default,\n\t  'blots/container': _container2.default,\n\t  'blots/cursor': _cursor2.default,\n\t  'blots/embed': _embed2.default,\n\t  'blots/inline': _inline2.default,\n\t  'blots/scroll': _scroll2.default,\n\t  'blots/text': _text2.default,\n\n\t  'modules/clipboard': _clipboard2.default,\n\t  'modules/history': _history2.default,\n\t  'modules/keyboard': _keyboard2.default\n\t});\n\n\t_parchment2.default.register(_block2.default, _break2.default, _cursor2.default, _inline2.default, _scroll2.default, _text2.default);\n\n\tmodule.exports = _quill2.default;\n\n/***/ },\n/* 2 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar container_1 = __webpack_require__(3);\n\tvar format_1 = __webpack_require__(7);\n\tvar leaf_1 = __webpack_require__(12);\n\tvar scroll_1 = __webpack_require__(13);\n\tvar inline_1 = __webpack_require__(14);\n\tvar block_1 = __webpack_require__(15);\n\tvar embed_1 = __webpack_require__(16);\n\tvar text_1 = __webpack_require__(17);\n\tvar attributor_1 = __webpack_require__(8);\n\tvar class_1 = __webpack_require__(10);\n\tvar style_1 = __webpack_require__(11);\n\tvar store_1 = __webpack_require__(9);\n\tvar Registry = __webpack_require__(6);\n\tvar Parchment = {\n\t    Scope: Registry.Scope,\n\t    create: Registry.create,\n\t    find: Registry.find,\n\t    query: Registry.query,\n\t    register: Registry.register,\n\t    Container: container_1.default,\n\t    Format: format_1.default,\n\t    Leaf: leaf_1.default,\n\t    Embed: embed_1.default,\n\t    Scroll: scroll_1.default,\n\t    Block: block_1.default,\n\t    Inline: inline_1.default,\n\t    Text: text_1.default,\n\t    Attributor: {\n\t        Attribute: attributor_1.default,\n\t        Class: class_1.default,\n\t        Style: style_1.default,\n\t        Store: store_1.default\n\t    }\n\t};\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\texports.default = Parchment;\n\n\n/***/ },\n/* 3 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar linked_list_1 = __webpack_require__(4);\n\tvar shadow_1 = __webpack_require__(5);\n\tvar Registry = __webpack_require__(6);\n\tvar ContainerBlot = (function (_super) {\n\t    __extends(ContainerBlot, _super);\n\t    function ContainerBlot() {\n\t        return _super.apply(this, arguments) || this;\n\t    }\n\t    ContainerBlot.prototype.appendChild = function (other) {\n\t        this.insertBefore(other);\n\t    };\n\t    ContainerBlot.prototype.attach = function () {\n\t        var _this = this;\n\t        _super.prototype.attach.call(this);\n\t        this.children = new linked_list_1.default();\n\t        // Need to be reversed for if DOM nodes already in order\n\t        [].slice.call(this.domNode.childNodes).reverse().forEach(function (node) {\n\t            try {\n\t                var child = makeBlot(node);\n\t                _this.insertBefore(child, _this.children.head);\n\t            }\n\t            catch (err) {\n\t                if (err instanceof Registry.ParchmentError)\n\t                    return;\n\t                else\n\t                    throw err;\n\t            }\n\t        });\n\t    };\n\t    ContainerBlot.prototype.deleteAt = function (index, length) {\n\t        if (index === 0 && length === this.length()) {\n\t            return this.remove();\n\t        }\n\t        this.children.forEachAt(index, length, function (child, offset, length) {\n\t            child.deleteAt(offset, length);\n\t        });\n\t    };\n\t    ContainerBlot.prototype.descendant = function (criteria, index) {\n\t        var _a = this.children.find(index), child = _a[0], offset = _a[1];\n\t        if ((criteria.blotName == null && criteria(child)) ||\n\t            (criteria.blotName != null && child instanceof criteria)) {\n\t            return [child, offset];\n\t        }\n\t        else if (child instanceof ContainerBlot) {\n\t            return child.descendant(criteria, offset);\n\t        }\n\t        else {\n\t            return [null, -1];\n\t        }\n\t    };\n\t    ContainerBlot.prototype.descendants = function (criteria, index, length) {\n\t        if (index === void 0) { index = 0; }\n\t        if (length === void 0) { length = Number.MAX_VALUE; }\n\t        var descendants = [], lengthLeft = length;\n\t        this.children.forEachAt(index, length, function (child, index, length) {\n\t            if ((criteria.blotName == null && criteria(child)) ||\n\t                (criteria.blotName != null && child instanceof criteria)) {\n\t                descendants.push(child);\n\t            }\n\t            if (child instanceof ContainerBlot) {\n\t                descendants = descendants.concat(child.descendants(criteria, index, lengthLeft));\n\t            }\n\t            lengthLeft -= length;\n\t        });\n\t        return descendants;\n\t    };\n\t    ContainerBlot.prototype.detach = function () {\n\t        this.children.forEach(function (child) {\n\t            child.detach();\n\t        });\n\t        _super.prototype.detach.call(this);\n\t    };\n\t    ContainerBlot.prototype.formatAt = function (index, length, name, value) {\n\t        this.children.forEachAt(index, length, function (child, offset, length) {\n\t            child.formatAt(offset, length, name, value);\n\t        });\n\t    };\n\t    ContainerBlot.prototype.insertAt = function (index, value, def) {\n\t        var _a = this.children.find(index), child = _a[0], offset = _a[1];\n\t        if (child) {\n\t            child.insertAt(offset, value, def);\n\t        }\n\t        else {\n\t            var blot = (def == null) ? Registry.create('text', value) : Registry.create(value, def);\n\t            this.appendChild(blot);\n\t        }\n\t    };\n\t    ContainerBlot.prototype.insertBefore = function (childBlot, refBlot) {\n\t        if (this.statics.allowedChildren != null && !this.statics.allowedChildren.some(function (child) {\n\t            return childBlot instanceof child;\n\t        })) {\n\t            throw new Registry.ParchmentError(\"Cannot insert \" + childBlot.statics.blotName + \" into \" + this.statics.blotName);\n\t        }\n\t        childBlot.insertInto(this, refBlot);\n\t    };\n\t    ContainerBlot.prototype.length = function () {\n\t        return this.children.reduce(function (memo, child) {\n\t            return memo + child.length();\n\t        }, 0);\n\t    };\n\t    ContainerBlot.prototype.moveChildren = function (targetParent, refNode) {\n\t        this.children.forEach(function (child) {\n\t            targetParent.insertBefore(child, refNode);\n\t        });\n\t    };\n\t    ContainerBlot.prototype.optimize = function () {\n\t        _super.prototype.optimize.call(this);\n\t        if (this.children.length === 0) {\n\t            if (this.statics.defaultChild != null) {\n\t                var child = Registry.create(this.statics.defaultChild);\n\t                this.appendChild(child);\n\t                child.optimize();\n\t            }\n\t            else {\n\t                this.remove();\n\t            }\n\t        }\n\t    };\n\t    ContainerBlot.prototype.path = function (index, inclusive) {\n\t        if (inclusive === void 0) { inclusive = false; }\n\t        var _a = this.children.find(index, inclusive), child = _a[0], offset = _a[1];\n\t        var position = [[this, index]];\n\t        if (child instanceof ContainerBlot) {\n\t            return position.concat(child.path(offset, inclusive));\n\t        }\n\t        else if (child != null) {\n\t            position.push([child, offset]);\n\t        }\n\t        return position;\n\t    };\n\t    ContainerBlot.prototype.removeChild = function (child) {\n\t        this.children.remove(child);\n\t    };\n\t    ContainerBlot.prototype.replace = function (target) {\n\t        if (target instanceof ContainerBlot) {\n\t            target.moveChildren(this);\n\t        }\n\t        _super.prototype.replace.call(this, target);\n\t    };\n\t    ContainerBlot.prototype.split = function (index, force) {\n\t        if (force === void 0) { force = false; }\n\t        if (!force) {\n\t            if (index === 0)\n\t                return this;\n\t            if (index === this.length())\n\t                return this.next;\n\t        }\n\t        var after = this.clone();\n\t        this.parent.insertBefore(after, this.next);\n\t        this.children.forEachAt(index, this.length(), function (child, offset, length) {\n\t            child = child.split(offset, force);\n\t            after.appendChild(child);\n\t        });\n\t        return after;\n\t    };\n\t    ContainerBlot.prototype.unwrap = function () {\n\t        this.moveChildren(this.parent, this.next);\n\t        this.remove();\n\t    };\n\t    ContainerBlot.prototype.update = function (mutations) {\n\t        var _this = this;\n\t        var addedNodes = [], removedNodes = [];\n\t        mutations.forEach(function (mutation) {\n\t            if (mutation.target === _this.domNode && mutation.type === 'childList') {\n\t                addedNodes.push.apply(addedNodes, mutation.addedNodes);\n\t                removedNodes.push.apply(removedNodes, mutation.removedNodes);\n\t            }\n\t        });\n\t        removedNodes.forEach(function (node) {\n\t            // Check node has actually been removed\n\t            // One exception is Chrome does not immediately remove IFRAMEs\n\t            // from DOM but MutationRecord is correct in its reported removal\n\t            if (node.parentNode != null && node.tagName !== 'IFRAME' &&\n\t                (document.body.compareDocumentPosition(node) & Node.DOCUMENT_POSITION_CONTAINED_BY)) {\n\t                return;\n\t            }\n\t            var blot = Registry.find(node);\n\t            if (blot == null)\n\t                return;\n\t            if (blot.domNode.parentNode == null || blot.domNode.parentNode === _this.domNode) {\n\t                blot.detach();\n\t            }\n\t        });\n\t        addedNodes.filter(function (node) {\n\t            return node.parentNode == _this.domNode;\n\t        }).sort(function (a, b) {\n\t            if (a === b)\n\t                return 0;\n\t            if (a.compareDocumentPosition(b) & Node.DOCUMENT_POSITION_FOLLOWING) {\n\t                return 1;\n\t            }\n\t            return -1;\n\t        }).forEach(function (node) {\n\t            var refBlot = null;\n\t            if (node.nextSibling != null) {\n\t                refBlot = Registry.find(node.nextSibling);\n\t            }\n\t            var blot = makeBlot(node);\n\t            if (blot.next != refBlot || blot.next == null) {\n\t                if (blot.parent != null) {\n\t                    blot.parent.removeChild(_this);\n\t                }\n\t                _this.insertBefore(blot, refBlot);\n\t            }\n\t        });\n\t    };\n\t    return ContainerBlot;\n\t}(shadow_1.default));\n\tfunction makeBlot(node) {\n\t    var blot = Registry.find(node);\n\t    if (blot == null) {\n\t        try {\n\t            blot = Registry.create(node);\n\t        }\n\t        catch (e) {\n\t            blot = Registry.create(Registry.Scope.INLINE);\n\t            [].slice.call(node.childNodes).forEach(function (child) {\n\t                blot.domNode.appendChild(child);\n\t            });\n\t            node.parentNode.replaceChild(blot.domNode, node);\n\t            blot.attach();\n\t        }\n\t    }\n\t    return blot;\n\t}\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\texports.default = ContainerBlot;\n\n\n/***/ },\n/* 4 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\tvar LinkedList = (function () {\n\t    function LinkedList() {\n\t        this.head = this.tail = undefined;\n\t        this.length = 0;\n\t    }\n\t    LinkedList.prototype.append = function () {\n\t        var nodes = [];\n\t        for (var _i = 0; _i < arguments.length; _i++) {\n\t            nodes[_i] = arguments[_i];\n\t        }\n\t        this.insertBefore(nodes[0], undefined);\n\t        if (nodes.length > 1) {\n\t            this.append.apply(this, nodes.slice(1));\n\t        }\n\t    };\n\t    LinkedList.prototype.contains = function (node) {\n\t        var cur, next = this.iterator();\n\t        while (cur = next()) {\n\t            if (cur === node)\n\t                return true;\n\t        }\n\t        return false;\n\t    };\n\t    LinkedList.prototype.insertBefore = function (node, refNode) {\n\t        node.next = refNode;\n\t        if (refNode != null) {\n\t            node.prev = refNode.prev;\n\t            if (refNode.prev != null) {\n\t                refNode.prev.next = node;\n\t            }\n\t            refNode.prev = node;\n\t            if (refNode === this.head) {\n\t                this.head = node;\n\t            }\n\t        }\n\t        else if (this.tail != null) {\n\t            this.tail.next = node;\n\t            node.prev = this.tail;\n\t            this.tail = node;\n\t        }\n\t        else {\n\t            node.prev = undefined;\n\t            this.head = this.tail = node;\n\t        }\n\t        this.length += 1;\n\t    };\n\t    LinkedList.prototype.offset = function (target) {\n\t        var index = 0, cur = this.head;\n\t        while (cur != null) {\n\t            if (cur === target)\n\t                return index;\n\t            index += cur.length();\n\t            cur = cur.next;\n\t        }\n\t        return -1;\n\t    };\n\t    LinkedList.prototype.remove = function (node) {\n\t        if (!this.contains(node))\n\t            return;\n\t        if (node.prev != null)\n\t            node.prev.next = node.next;\n\t        if (node.next != null)\n\t            node.next.prev = node.prev;\n\t        if (node === this.head)\n\t            this.head = node.next;\n\t        if (node === this.tail)\n\t            this.tail = node.prev;\n\t        this.length -= 1;\n\t    };\n\t    LinkedList.prototype.iterator = function (curNode) {\n\t        if (curNode === void 0) { curNode = this.head; }\n\t        // TODO use yield when we can\n\t        return function () {\n\t            var ret = curNode;\n\t            if (curNode != null)\n\t                curNode = curNode.next;\n\t            return ret;\n\t        };\n\t    };\n\t    LinkedList.prototype.find = function (index, inclusive) {\n\t        if (inclusive === void 0) { inclusive = false; }\n\t        var cur, next = this.iterator();\n\t        while (cur = next()) {\n\t            var length_1 = cur.length();\n\t            if (index < length_1 || (inclusive && index === length_1 && (cur.next == null || cur.next.length() !== 0))) {\n\t                return [cur, index];\n\t            }\n\t            index -= length_1;\n\t        }\n\t        return [null, 0];\n\t    };\n\t    LinkedList.prototype.forEach = function (callback) {\n\t        var cur, next = this.iterator();\n\t        while (cur = next()) {\n\t            callback(cur);\n\t        }\n\t    };\n\t    LinkedList.prototype.forEachAt = function (index, length, callback) {\n\t        if (length <= 0)\n\t            return;\n\t        var _a = this.find(index), startNode = _a[0], offset = _a[1];\n\t        var cur, curIndex = index - offset, next = this.iterator(startNode);\n\t        while ((cur = next()) && curIndex < index + length) {\n\t            var curLength = cur.length();\n\t            if (index > curIndex) {\n\t                callback(cur, index - curIndex, Math.min(length, curIndex + curLength - index));\n\t            }\n\t            else {\n\t                callback(cur, 0, Math.min(curLength, index + length - curIndex));\n\t            }\n\t            curIndex += curLength;\n\t        }\n\t    };\n\t    LinkedList.prototype.map = function (callback) {\n\t        return this.reduce(function (memo, cur) {\n\t            memo.push(callback(cur));\n\t            return memo;\n\t        }, []);\n\t    };\n\t    LinkedList.prototype.reduce = function (callback, memo) {\n\t        var cur, next = this.iterator();\n\t        while (cur = next()) {\n\t            memo = callback(memo, cur);\n\t        }\n\t        return memo;\n\t    };\n\t    return LinkedList;\n\t}());\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\texports.default = LinkedList;\n\n\n/***/ },\n/* 5 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Registry = __webpack_require__(6);\n\tvar ShadowBlot = (function () {\n\t    function ShadowBlot(domNode) {\n\t        this.domNode = domNode;\n\t        this.attach();\n\t    }\n\t    Object.defineProperty(ShadowBlot.prototype, \"statics\", {\n\t        // Hack for accessing inherited static methods\n\t        get: function () {\n\t            return this.constructor;\n\t        },\n\t        enumerable: true,\n\t        configurable: true\n\t    });\n\t    ShadowBlot.create = function (value) {\n\t        if (this.tagName == null) {\n\t            throw new Registry.ParchmentError('Blot definition missing tagName');\n\t        }\n\t        var node;\n\t        if (Array.isArray(this.tagName)) {\n\t            if (typeof value === 'string') {\n\t                value = value.toUpperCase();\n\t                if (parseInt(value).toString() === value) {\n\t                    value = parseInt(value);\n\t                }\n\t            }\n\t            if (typeof value === 'number') {\n\t                node = document.createElement(this.tagName[value - 1]);\n\t            }\n\t            else if (this.tagName.indexOf(value) > -1) {\n\t                node = document.createElement(value);\n\t            }\n\t            else {\n\t                node = document.createElement(this.tagName[0]);\n\t            }\n\t        }\n\t        else {\n\t            node = document.createElement(this.tagName);\n\t        }\n\t        if (this.className) {\n\t            node.classList.add(this.className);\n\t        }\n\t        return node;\n\t    };\n\t    ShadowBlot.prototype.attach = function () {\n\t        this.domNode[Registry.DATA_KEY] = { blot: this };\n\t    };\n\t    ShadowBlot.prototype.clone = function () {\n\t        var domNode = this.domNode.cloneNode();\n\t        return Registry.create(domNode);\n\t    };\n\t    ShadowBlot.prototype.detach = function () {\n\t        if (this.parent != null)\n\t            this.parent.removeChild(this);\n\t        delete this.domNode[Registry.DATA_KEY];\n\t    };\n\t    ShadowBlot.prototype.deleteAt = function (index, length) {\n\t        var blot = this.isolate(index, length);\n\t        blot.remove();\n\t    };\n\t    ShadowBlot.prototype.formatAt = function (index, length, name, value) {\n\t        var blot = this.isolate(index, length);\n\t        if (Registry.query(name, Registry.Scope.BLOT) != null && value) {\n\t            blot.wrap(name, value);\n\t        }\n\t        else if (Registry.query(name, Registry.Scope.ATTRIBUTE) != null) {\n\t            var parent_1 = Registry.create(this.statics.scope);\n\t            blot.wrap(parent_1);\n\t            parent_1.format(name, value);\n\t        }\n\t    };\n\t    ShadowBlot.prototype.insertAt = function (index, value, def) {\n\t        var blot = (def == null) ? Registry.create('text', value) : Registry.create(value, def);\n\t        var ref = this.split(index);\n\t        this.parent.insertBefore(blot, ref);\n\t    };\n\t    ShadowBlot.prototype.insertInto = function (parentBlot, refBlot) {\n\t        if (this.parent != null) {\n\t            this.parent.children.remove(this);\n\t        }\n\t        parentBlot.children.insertBefore(this, refBlot);\n\t        if (refBlot != null) {\n\t            var refDomNode = refBlot.domNode;\n\t        }\n\t        if (this.next == null || this.domNode.nextSibling != refDomNode) {\n\t            parentBlot.domNode.insertBefore(this.domNode, (typeof refDomNode !== 'undefined') ? refDomNode : null);\n\t        }\n\t        this.parent = parentBlot;\n\t    };\n\t    ShadowBlot.prototype.isolate = function (index, length) {\n\t        var target = this.split(index);\n\t        target.split(length);\n\t        return target;\n\t    };\n\t    ShadowBlot.prototype.length = function () {\n\t        return 1;\n\t    };\n\t    ;\n\t    ShadowBlot.prototype.offset = function (root) {\n\t        if (root === void 0) { root = this.parent; }\n\t        if (this.parent == null || this == root)\n\t            return 0;\n\t        return this.parent.children.offset(this) + this.parent.offset(root);\n\t    };\n\t    ShadowBlot.prototype.optimize = function () {\n\t        // TODO clean up once we use WeakMap\n\t        if (this.domNode[Registry.DATA_KEY] != null) {\n\t            delete this.domNode[Registry.DATA_KEY].mutations;\n\t        }\n\t    };\n\t    ShadowBlot.prototype.remove = function () {\n\t        if (this.domNode.parentNode != null) {\n\t            this.domNode.parentNode.removeChild(this.domNode);\n\t        }\n\t        this.detach();\n\t    };\n\t    ShadowBlot.prototype.replace = function (target) {\n\t        if (target.parent == null)\n\t            return;\n\t        target.parent.insertBefore(this, target.next);\n\t        target.remove();\n\t    };\n\t    ShadowBlot.prototype.replaceWith = function (name, value) {\n\t        var replacement = typeof name === 'string' ? Registry.create(name, value) : name;\n\t        replacement.replace(this);\n\t        return replacement;\n\t    };\n\t    ShadowBlot.prototype.split = function (index, force) {\n\t        return index === 0 ? this : this.next;\n\t    };\n\t    ShadowBlot.prototype.update = function (mutations) {\n\t        if (mutations === void 0) { mutations = []; }\n\t        // Nothing to do by default\n\t    };\n\t    ShadowBlot.prototype.wrap = function (name, value) {\n\t        var wrapper = typeof name === 'string' ? Registry.create(name, value) : name;\n\t        if (this.parent != null) {\n\t            this.parent.insertBefore(wrapper, this.next);\n\t        }\n\t        wrapper.appendChild(this);\n\t        return wrapper;\n\t    };\n\t    return ShadowBlot;\n\t}());\n\tShadowBlot.blotName = 'abstract';\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\texports.default = ShadowBlot;\n\n\n/***/ },\n/* 6 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar ParchmentError = (function (_super) {\n\t    __extends(ParchmentError, _super);\n\t    function ParchmentError(message) {\n\t        var _this;\n\t        message = '[Parchment] ' + message;\n\t        _this = _super.call(this, message) || this;\n\t        _this.message = message;\n\t        _this.name = _this.constructor.name;\n\t        return _this;\n\t    }\n\t    return ParchmentError;\n\t}(Error));\n\texports.ParchmentError = ParchmentError;\n\tvar attributes = {};\n\tvar classes = {};\n\tvar tags = {};\n\tvar types = {};\n\texports.DATA_KEY = '__blot';\n\tvar Scope;\n\t(function (Scope) {\n\t    Scope[Scope[\"TYPE\"] = 3] = \"TYPE\";\n\t    Scope[Scope[\"LEVEL\"] = 12] = \"LEVEL\";\n\t    Scope[Scope[\"ATTRIBUTE\"] = 13] = \"ATTRIBUTE\";\n\t    Scope[Scope[\"BLOT\"] = 14] = \"BLOT\";\n\t    Scope[Scope[\"INLINE\"] = 7] = \"INLINE\";\n\t    Scope[Scope[\"BLOCK\"] = 11] = \"BLOCK\";\n\t    Scope[Scope[\"BLOCK_BLOT\"] = 10] = \"BLOCK_BLOT\";\n\t    Scope[Scope[\"INLINE_BLOT\"] = 6] = \"INLINE_BLOT\";\n\t    Scope[Scope[\"BLOCK_ATTRIBUTE\"] = 9] = \"BLOCK_ATTRIBUTE\";\n\t    Scope[Scope[\"INLINE_ATTRIBUTE\"] = 5] = \"INLINE_ATTRIBUTE\";\n\t    Scope[Scope[\"ANY\"] = 15] = \"ANY\";\n\t})(Scope = exports.Scope || (exports.Scope = {}));\n\t;\n\tfunction create(input, value) {\n\t    var match = query(input);\n\t    if (match == null) {\n\t        throw new ParchmentError(\"Unable to create \" + input + \" blot\");\n\t    }\n\t    var BlotClass = match;\n\t    var node = input instanceof Node ? input : BlotClass.create(value);\n\t    return new BlotClass(node, value);\n\t}\n\texports.create = create;\n\tfunction find(node, bubble) {\n\t    if (bubble === void 0) { bubble = false; }\n\t    if (node == null)\n\t        return null;\n\t    if (node[exports.DATA_KEY] != null)\n\t        return node[exports.DATA_KEY].blot;\n\t    if (bubble)\n\t        return find(node.parentNode, bubble);\n\t    return null;\n\t}\n\texports.find = find;\n\tfunction query(query, scope) {\n\t    if (scope === void 0) { scope = Scope.ANY; }\n\t    var match;\n\t    if (typeof query === 'string') {\n\t        match = types[query] || attributes[query];\n\t    }\n\t    else if (query instanceof Text) {\n\t        match = types['text'];\n\t    }\n\t    else if (typeof query === 'number') {\n\t        if (query & Scope.LEVEL & Scope.BLOCK) {\n\t            match = types['block'];\n\t        }\n\t        else if (query & Scope.LEVEL & Scope.INLINE) {\n\t            match = types['inline'];\n\t        }\n\t    }\n\t    else if (query instanceof HTMLElement) {\n\t        var names = (query.getAttribute('class') || '').split(/\\s+/);\n\t        for (var i in names) {\n\t            match = classes[names[i]];\n\t            if (match)\n\t                break;\n\t        }\n\t        match = match || tags[query.tagName];\n\t    }\n\t    if (match == null)\n\t        return null;\n\t    if ((scope & Scope.LEVEL & match.scope) && (scope & Scope.TYPE & match.scope))\n\t        return match;\n\t    return null;\n\t}\n\texports.query = query;\n\tfunction register() {\n\t    var Definitions = [];\n\t    for (var _i = 0; _i < arguments.length; _i++) {\n\t        Definitions[_i] = arguments[_i];\n\t    }\n\t    if (Definitions.length > 1) {\n\t        return Definitions.map(function (d) {\n\t            return register(d);\n\t        });\n\t    }\n\t    var Definition = Definitions[0];\n\t    if (typeof Definition.blotName !== 'string' && typeof Definition.attrName !== 'string') {\n\t        throw new ParchmentError('Invalid definition');\n\t    }\n\t    else if (Definition.blotName === 'abstract') {\n\t        throw new ParchmentError('Cannot register abstract class');\n\t    }\n\t    types[Definition.blotName || Definition.attrName] = Definition;\n\t    if (typeof Definition.keyName === 'string') {\n\t        attributes[Definition.keyName] = Definition;\n\t    }\n\t    else {\n\t        if (Definition.className != null) {\n\t            classes[Definition.className] = Definition;\n\t        }\n\t        if (Definition.tagName != null) {\n\t            if (Array.isArray(Definition.tagName)) {\n\t                Definition.tagName = Definition.tagName.map(function (tagName) {\n\t                    return tagName.toUpperCase();\n\t                });\n\t            }\n\t            else {\n\t                Definition.tagName = Definition.tagName.toUpperCase();\n\t            }\n\t            var tagNames = Array.isArray(Definition.tagName) ? Definition.tagName : [Definition.tagName];\n\t            tagNames.forEach(function (tag) {\n\t                if (tags[tag] == null || Definition.className == null) {\n\t                    tags[tag] = Definition;\n\t                }\n\t            });\n\t        }\n\t    }\n\t    return Definition;\n\t}\n\texports.register = register;\n\n\n/***/ },\n/* 7 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar attributor_1 = __webpack_require__(8);\n\tvar store_1 = __webpack_require__(9);\n\tvar container_1 = __webpack_require__(3);\n\tvar Registry = __webpack_require__(6);\n\tvar FormatBlot = (function (_super) {\n\t    __extends(FormatBlot, _super);\n\t    function FormatBlot() {\n\t        return _super.apply(this, arguments) || this;\n\t    }\n\t    FormatBlot.formats = function (domNode) {\n\t        if (typeof this.tagName === 'string') {\n\t            return true;\n\t        }\n\t        else if (Array.isArray(this.tagName)) {\n\t            return domNode.tagName.toLowerCase();\n\t        }\n\t        return undefined;\n\t    };\n\t    FormatBlot.prototype.attach = function () {\n\t        _super.prototype.attach.call(this);\n\t        this.attributes = new store_1.default(this.domNode);\n\t    };\n\t    FormatBlot.prototype.format = function (name, value) {\n\t        var format = Registry.query(name);\n\t        if (format instanceof attributor_1.default) {\n\t            this.attributes.attribute(format, value);\n\t        }\n\t        else if (value) {\n\t            if (format != null && (name !== this.statics.blotName || this.formats()[name] !== value)) {\n\t                this.replaceWith(name, value);\n\t            }\n\t        }\n\t    };\n\t    FormatBlot.prototype.formats = function () {\n\t        var formats = this.attributes.values();\n\t        var format = this.statics.formats(this.domNode);\n\t        if (format != null) {\n\t            formats[this.statics.blotName] = format;\n\t        }\n\t        return formats;\n\t    };\n\t    FormatBlot.prototype.replaceWith = function (name, value) {\n\t        var replacement = _super.prototype.replaceWith.call(this, name, value);\n\t        this.attributes.copy(replacement);\n\t        return replacement;\n\t    };\n\t    FormatBlot.prototype.update = function (mutations) {\n\t        var _this = this;\n\t        _super.prototype.update.call(this, mutations);\n\t        if (mutations.some(function (mutation) {\n\t            return mutation.target === _this.domNode && mutation.type === 'attributes';\n\t        })) {\n\t            this.attributes.build();\n\t        }\n\t    };\n\t    FormatBlot.prototype.wrap = function (name, value) {\n\t        var wrapper = _super.prototype.wrap.call(this, name, value);\n\t        if (wrapper instanceof FormatBlot && wrapper.statics.scope === this.statics.scope) {\n\t            this.attributes.move(wrapper);\n\t        }\n\t        return wrapper;\n\t    };\n\t    return FormatBlot;\n\t}(container_1.default));\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\texports.default = FormatBlot;\n\n\n/***/ },\n/* 8 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Registry = __webpack_require__(6);\n\tvar Attributor = (function () {\n\t    function Attributor(attrName, keyName, options) {\n\t        if (options === void 0) { options = {}; }\n\t        this.attrName = attrName;\n\t        this.keyName = keyName;\n\t        var attributeBit = Registry.Scope.TYPE & Registry.Scope.ATTRIBUTE;\n\t        if (options.scope != null) {\n\t            // Ignore type bits, force attribute bit\n\t            this.scope = (options.scope & Registry.Scope.LEVEL) | attributeBit;\n\t        }\n\t        else {\n\t            this.scope = Registry.Scope.ATTRIBUTE;\n\t        }\n\t        if (options.whitelist != null)\n\t            this.whitelist = options.whitelist;\n\t    }\n\t    Attributor.keys = function (node) {\n\t        return [].map.call(node.attributes, function (item) {\n\t            return item.name;\n\t        });\n\t    };\n\t    Attributor.prototype.add = function (node, value) {\n\t        if (!this.canAdd(node, value))\n\t            return false;\n\t        node.setAttribute(this.keyName, value);\n\t        return true;\n\t    };\n\t    Attributor.prototype.canAdd = function (node, value) {\n\t        var match = Registry.query(node, Registry.Scope.BLOT & (this.scope | Registry.Scope.TYPE));\n\t        if (match != null && (this.whitelist == null || this.whitelist.indexOf(value) > -1)) {\n\t            return true;\n\t        }\n\t        return false;\n\t    };\n\t    Attributor.prototype.remove = function (node) {\n\t        node.removeAttribute(this.keyName);\n\t    };\n\t    Attributor.prototype.value = function (node) {\n\t        var value = node.getAttribute(this.keyName);\n\t        return this.canAdd(node, value) ? value : '';\n\t    };\n\t    return Attributor;\n\t}());\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\texports.default = Attributor;\n\n\n/***/ },\n/* 9 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar attributor_1 = __webpack_require__(8);\n\tvar class_1 = __webpack_require__(10);\n\tvar style_1 = __webpack_require__(11);\n\tvar Registry = __webpack_require__(6);\n\tvar AttributorStore = (function () {\n\t    function AttributorStore(domNode) {\n\t        this.attributes = {};\n\t        this.domNode = domNode;\n\t        this.build();\n\t    }\n\t    AttributorStore.prototype.attribute = function (attribute, value) {\n\t        if (value) {\n\t            if (attribute.add(this.domNode, value)) {\n\t                if (attribute.value(this.domNode) != null) {\n\t                    this.attributes[attribute.attrName] = attribute;\n\t                }\n\t                else {\n\t                    delete this.attributes[attribute.attrName];\n\t                }\n\t            }\n\t        }\n\t        else {\n\t            attribute.remove(this.domNode);\n\t            delete this.attributes[attribute.attrName];\n\t        }\n\t    };\n\t    AttributorStore.prototype.build = function () {\n\t        var _this = this;\n\t        this.attributes = {};\n\t        var attributes = attributor_1.default.keys(this.domNode);\n\t        var classes = class_1.default.keys(this.domNode);\n\t        var styles = style_1.default.keys(this.domNode);\n\t        attributes.concat(classes).concat(styles).forEach(function (name) {\n\t            var attr = Registry.query(name, Registry.Scope.ATTRIBUTE);\n\t            if (attr instanceof attributor_1.default) {\n\t                _this.attributes[attr.attrName] = attr;\n\t            }\n\t        });\n\t    };\n\t    AttributorStore.prototype.copy = function (target) {\n\t        var _this = this;\n\t        Object.keys(this.attributes).forEach(function (key) {\n\t            var value = _this.attributes[key].value(_this.domNode);\n\t            target.format(key, value);\n\t        });\n\t    };\n\t    AttributorStore.prototype.move = function (target) {\n\t        var _this = this;\n\t        this.copy(target);\n\t        Object.keys(this.attributes).forEach(function (key) {\n\t            _this.attributes[key].remove(_this.domNode);\n\t        });\n\t        this.attributes = {};\n\t    };\n\t    AttributorStore.prototype.values = function () {\n\t        var _this = this;\n\t        return Object.keys(this.attributes).reduce(function (attributes, name) {\n\t            attributes[name] = _this.attributes[name].value(_this.domNode);\n\t            return attributes;\n\t        }, {});\n\t    };\n\t    return AttributorStore;\n\t}());\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\texports.default = AttributorStore;\n\n\n/***/ },\n/* 10 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar attributor_1 = __webpack_require__(8);\n\tfunction match(node, prefix) {\n\t    var className = node.getAttribute('class') || '';\n\t    return className.split(/\\s+/).filter(function (name) {\n\t        return name.indexOf(prefix + \"-\") === 0;\n\t    });\n\t}\n\tvar ClassAttributor = (function (_super) {\n\t    __extends(ClassAttributor, _super);\n\t    function ClassAttributor() {\n\t        return _super.apply(this, arguments) || this;\n\t    }\n\t    ClassAttributor.keys = function (node) {\n\t        return (node.getAttribute('class') || '').split(/\\s+/).map(function (name) {\n\t            return name.split('-').slice(0, -1).join('-');\n\t        });\n\t    };\n\t    ClassAttributor.prototype.add = function (node, value) {\n\t        if (!this.canAdd(node, value))\n\t            return false;\n\t        this.remove(node);\n\t        node.classList.add(this.keyName + \"-\" + value);\n\t        return true;\n\t    };\n\t    ClassAttributor.prototype.remove = function (node) {\n\t        var matches = match(node, this.keyName);\n\t        matches.forEach(function (name) {\n\t            node.classList.remove(name);\n\t        });\n\t        if (node.classList.length === 0) {\n\t            node.removeAttribute('class');\n\t        }\n\t    };\n\t    ClassAttributor.prototype.value = function (node) {\n\t        var result = match(node, this.keyName)[0] || '';\n\t        var value = result.slice(this.keyName.length + 1); // +1 for hyphen\n\t        return this.canAdd(node, value) ? value : '';\n\t    };\n\t    return ClassAttributor;\n\t}(attributor_1.default));\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\texports.default = ClassAttributor;\n\n\n/***/ },\n/* 11 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar attributor_1 = __webpack_require__(8);\n\tfunction camelize(name) {\n\t    var parts = name.split('-');\n\t    var rest = parts.slice(1).map(function (part) {\n\t        return part[0].toUpperCase() + part.slice(1);\n\t    }).join('');\n\t    return parts[0] + rest;\n\t}\n\tvar StyleAttributor = (function (_super) {\n\t    __extends(StyleAttributor, _super);\n\t    function StyleAttributor() {\n\t        return _super.apply(this, arguments) || this;\n\t    }\n\t    StyleAttributor.keys = function (node) {\n\t        return (node.getAttribute('style') || '').split(';').map(function (value) {\n\t            var arr = value.split(':');\n\t            return arr[0].trim();\n\t        });\n\t    };\n\t    StyleAttributor.prototype.add = function (node, value) {\n\t        if (!this.canAdd(node, value))\n\t            return false;\n\t        node.style[camelize(this.keyName)] = value;\n\t        return true;\n\t    };\n\t    StyleAttributor.prototype.remove = function (node) {\n\t        node.style[camelize(this.keyName)] = '';\n\t        if (!node.getAttribute('style')) {\n\t            node.removeAttribute('style');\n\t        }\n\t    };\n\t    StyleAttributor.prototype.value = function (node) {\n\t        var value = node.style[camelize(this.keyName)];\n\t        return this.canAdd(node, value) ? value : '';\n\t    };\n\t    return StyleAttributor;\n\t}(attributor_1.default));\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\texports.default = StyleAttributor;\n\n\n/***/ },\n/* 12 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar shadow_1 = __webpack_require__(5);\n\tvar Registry = __webpack_require__(6);\n\tvar LeafBlot = (function (_super) {\n\t    __extends(LeafBlot, _super);\n\t    function LeafBlot() {\n\t        return _super.apply(this, arguments) || this;\n\t    }\n\t    LeafBlot.value = function (domNode) {\n\t        return true;\n\t    };\n\t    LeafBlot.prototype.index = function (node, offset) {\n\t        if (node !== this.domNode)\n\t            return -1;\n\t        return Math.min(offset, 1);\n\t    };\n\t    LeafBlot.prototype.position = function (index, inclusive) {\n\t        var offset = [].indexOf.call(this.parent.domNode.childNodes, this.domNode);\n\t        if (index > 0)\n\t            offset += 1;\n\t        return [this.parent.domNode, offset];\n\t    };\n\t    LeafBlot.prototype.value = function () {\n\t        return _a = {}, _a[this.statics.blotName] = this.statics.value(this.domNode) || true, _a;\n\t        var _a;\n\t    };\n\t    return LeafBlot;\n\t}(shadow_1.default));\n\tLeafBlot.scope = Registry.Scope.INLINE_BLOT;\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\texports.default = LeafBlot;\n\n\n/***/ },\n/* 13 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar container_1 = __webpack_require__(3);\n\tvar Registry = __webpack_require__(6);\n\tvar OBSERVER_CONFIG = {\n\t    attributes: true,\n\t    characterData: true,\n\t    characterDataOldValue: true,\n\t    childList: true,\n\t    subtree: true\n\t};\n\tvar MAX_OPTIMIZE_ITERATIONS = 100;\n\tvar ScrollBlot = (function (_super) {\n\t    __extends(ScrollBlot, _super);\n\t    function ScrollBlot(node) {\n\t        var _this = _super.call(this, node) || this;\n\t        _this.parent = null;\n\t        _this.observer = new MutationObserver(function (mutations) {\n\t            _this.update(mutations);\n\t        });\n\t        _this.observer.observe(_this.domNode, OBSERVER_CONFIG);\n\t        return _this;\n\t    }\n\t    ScrollBlot.prototype.detach = function () {\n\t        _super.prototype.detach.call(this);\n\t        this.observer.disconnect();\n\t    };\n\t    ScrollBlot.prototype.deleteAt = function (index, length) {\n\t        this.update();\n\t        if (index === 0 && length === this.length()) {\n\t            this.children.forEach(function (child) {\n\t                child.remove();\n\t            });\n\t        }\n\t        else {\n\t            _super.prototype.deleteAt.call(this, index, length);\n\t        }\n\t    };\n\t    ScrollBlot.prototype.formatAt = function (index, length, name, value) {\n\t        this.update();\n\t        _super.prototype.formatAt.call(this, index, length, name, value);\n\t    };\n\t    ScrollBlot.prototype.insertAt = function (index, value, def) {\n\t        this.update();\n\t        _super.prototype.insertAt.call(this, index, value, def);\n\t    };\n\t    ScrollBlot.prototype.optimize = function (mutations) {\n\t        var _this = this;\n\t        if (mutations === void 0) { mutations = []; }\n\t        _super.prototype.optimize.call(this);\n\t        // We must modify mutations directly, cannot make copy and then modify\n\t        var records = [].slice.call(this.observer.takeRecords());\n\t        // Array.push currently seems to be implemented by a non-tail recursive function\n\t        // so we cannot just mutations.push.apply(mutations, this.observer.takeRecords());\n\t        while (records.length > 0)\n\t            mutations.push(records.pop());\n\t        // TODO use WeakMap\n\t        var mark = function (blot, markParent) {\n\t            if (markParent === void 0) { markParent = true; }\n\t            if (blot == null || blot === _this)\n\t                return;\n\t            if (blot.domNode.parentNode == null)\n\t                return;\n\t            if (blot.domNode[Registry.DATA_KEY].mutations == null) {\n\t                blot.domNode[Registry.DATA_KEY].mutations = [];\n\t            }\n\t            if (markParent)\n\t                mark(blot.parent);\n\t        };\n\t        var optimize = function (blot) {\n\t            if (blot.domNode[Registry.DATA_KEY] == null || blot.domNode[Registry.DATA_KEY].mutations == null) {\n\t                return;\n\t            }\n\t            if (blot instanceof container_1.default) {\n\t                blot.children.forEach(optimize);\n\t            }\n\t            blot.optimize();\n\t        };\n\t        var remaining = mutations;\n\t        for (var i = 0; remaining.length > 0; i += 1) {\n\t            if (i >= MAX_OPTIMIZE_ITERATIONS) {\n\t                throw new Error('[Parchment] Maximum optimize iterations reached');\n\t            }\n\t            remaining.forEach(function (mutation) {\n\t                var blot = Registry.find(mutation.target, true);\n\t                if (blot == null)\n\t                    return;\n\t                if (blot.domNode === mutation.target) {\n\t                    if (mutation.type === 'childList') {\n\t                        mark(Registry.find(mutation.previousSibling, false));\n\t                        [].forEach.call(mutation.addedNodes, function (node) {\n\t                            var child = Registry.find(node, false);\n\t                            mark(child, false);\n\t                            if (child instanceof container_1.default) {\n\t                                child.children.forEach(function (grandChild) {\n\t                                    mark(grandChild, false);\n\t                                });\n\t                            }\n\t                        });\n\t                    }\n\t                    else if (mutation.type === 'attributes') {\n\t                        mark(blot.prev);\n\t                    }\n\t                }\n\t                mark(blot);\n\t            });\n\t            this.children.forEach(optimize);\n\t            remaining = [].slice.call(this.observer.takeRecords());\n\t            records = remaining.slice();\n\t            while (records.length > 0)\n\t                mutations.push(records.pop());\n\t        }\n\t    };\n\t    ScrollBlot.prototype.update = function (mutations) {\n\t        var _this = this;\n\t        mutations = mutations || this.observer.takeRecords();\n\t        // TODO use WeakMap\n\t        mutations.map(function (mutation) {\n\t            var blot = Registry.find(mutation.target, true);\n\t            if (blot == null)\n\t                return;\n\t            if (blot.domNode[Registry.DATA_KEY].mutations == null) {\n\t                blot.domNode[Registry.DATA_KEY].mutations = [mutation];\n\t                return blot;\n\t            }\n\t            else {\n\t                blot.domNode[Registry.DATA_KEY].mutations.push(mutation);\n\t                return null;\n\t            }\n\t        }).forEach(function (blot) {\n\t            if (blot == null || blot === _this || blot.domNode[Registry.DATA_KEY] == null)\n\t                return;\n\t            blot.update(blot.domNode[Registry.DATA_KEY].mutations || []);\n\t        });\n\t        if (this.domNode[Registry.DATA_KEY].mutations != null) {\n\t            _super.prototype.update.call(this, this.domNode[Registry.DATA_KEY].mutations);\n\t        }\n\t        this.optimize(mutations);\n\t    };\n\t    return ScrollBlot;\n\t}(container_1.default));\n\tScrollBlot.blotName = 'scroll';\n\tScrollBlot.defaultChild = 'block';\n\tScrollBlot.scope = Registry.Scope.BLOCK_BLOT;\n\tScrollBlot.tagName = 'DIV';\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\texports.default = ScrollBlot;\n\n\n/***/ },\n/* 14 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar format_1 = __webpack_require__(7);\n\tvar Registry = __webpack_require__(6);\n\t// Shallow object comparison\n\tfunction isEqual(obj1, obj2) {\n\t    if (Object.keys(obj1).length !== Object.keys(obj2).length)\n\t        return false;\n\t    for (var prop in obj1) {\n\t        if (obj1[prop] !== obj2[prop])\n\t            return false;\n\t    }\n\t    return true;\n\t}\n\tvar InlineBlot = (function (_super) {\n\t    __extends(InlineBlot, _super);\n\t    function InlineBlot() {\n\t        return _super.apply(this, arguments) || this;\n\t    }\n\t    InlineBlot.formats = function (domNode) {\n\t        if (domNode.tagName === InlineBlot.tagName)\n\t            return undefined;\n\t        return _super.formats.call(this, domNode);\n\t    };\n\t    InlineBlot.prototype.format = function (name, value) {\n\t        var _this = this;\n\t        if (name === this.statics.blotName && !value) {\n\t            this.children.forEach(function (child) {\n\t                if (!(child instanceof format_1.default)) {\n\t                    child = child.wrap(InlineBlot.blotName, true);\n\t                }\n\t                _this.attributes.copy(child);\n\t            });\n\t            this.unwrap();\n\t        }\n\t        else {\n\t            _super.prototype.format.call(this, name, value);\n\t        }\n\t    };\n\t    InlineBlot.prototype.formatAt = function (index, length, name, value) {\n\t        if (this.formats()[name] != null || Registry.query(name, Registry.Scope.ATTRIBUTE)) {\n\t            var blot = this.isolate(index, length);\n\t            blot.format(name, value);\n\t        }\n\t        else {\n\t            _super.prototype.formatAt.call(this, index, length, name, value);\n\t        }\n\t    };\n\t    InlineBlot.prototype.optimize = function () {\n\t        _super.prototype.optimize.call(this);\n\t        var formats = this.formats();\n\t        if (Object.keys(formats).length === 0) {\n\t            return this.unwrap(); // unformatted span\n\t        }\n\t        var next = this.next;\n\t        if (next instanceof InlineBlot && next.prev === this && isEqual(formats, next.formats())) {\n\t            next.moveChildren(this);\n\t            next.remove();\n\t        }\n\t    };\n\t    return InlineBlot;\n\t}(format_1.default));\n\tInlineBlot.blotName = 'inline';\n\tInlineBlot.scope = Registry.Scope.INLINE_BLOT;\n\tInlineBlot.tagName = 'SPAN';\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\texports.default = InlineBlot;\n\n\n/***/ },\n/* 15 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar format_1 = __webpack_require__(7);\n\tvar Registry = __webpack_require__(6);\n\tvar BlockBlot = (function (_super) {\n\t    __extends(BlockBlot, _super);\n\t    function BlockBlot() {\n\t        return _super.apply(this, arguments) || this;\n\t    }\n\t    BlockBlot.formats = function (domNode) {\n\t        var tagName = Registry.query(BlockBlot.blotName).tagName;\n\t        if (domNode.tagName === tagName)\n\t            return undefined;\n\t        return _super.formats.call(this, domNode);\n\t    };\n\t    BlockBlot.prototype.format = function (name, value) {\n\t        if (Registry.query(name, Registry.Scope.BLOCK) == null) {\n\t            return;\n\t        }\n\t        else if (name === this.statics.blotName && !value) {\n\t            this.replaceWith(BlockBlot.blotName);\n\t        }\n\t        else {\n\t            _super.prototype.format.call(this, name, value);\n\t        }\n\t    };\n\t    BlockBlot.prototype.formatAt = function (index, length, name, value) {\n\t        if (Registry.query(name, Registry.Scope.BLOCK) != null) {\n\t            this.format(name, value);\n\t        }\n\t        else {\n\t            _super.prototype.formatAt.call(this, index, length, name, value);\n\t        }\n\t    };\n\t    BlockBlot.prototype.insertAt = function (index, value, def) {\n\t        if (def == null || Registry.query(value, Registry.Scope.INLINE) != null) {\n\t            // Insert text or inline\n\t            _super.prototype.insertAt.call(this, index, value, def);\n\t        }\n\t        else {\n\t            var after = this.split(index);\n\t            var blot = Registry.create(value, def);\n\t            after.parent.insertBefore(blot, after);\n\t        }\n\t    };\n\t    BlockBlot.prototype.update = function (mutations) {\n\t        if (navigator.userAgent.match(/Trident/)) {\n\t            this.attach();\n\t        }\n\t        else {\n\t            _super.prototype.update.call(this, mutations);\n\t        }\n\t    };\n\t    return BlockBlot;\n\t}(format_1.default));\n\tBlockBlot.blotName = 'block';\n\tBlockBlot.scope = Registry.Scope.BLOCK_BLOT;\n\tBlockBlot.tagName = 'P';\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\texports.default = BlockBlot;\n\n\n/***/ },\n/* 16 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar leaf_1 = __webpack_require__(12);\n\tvar EmbedBlot = (function (_super) {\n\t    __extends(EmbedBlot, _super);\n\t    function EmbedBlot() {\n\t        return _super.apply(this, arguments) || this;\n\t    }\n\t    EmbedBlot.formats = function (domNode) {\n\t        return undefined;\n\t    };\n\t    EmbedBlot.prototype.format = function (name, value) {\n\t        // super.formatAt wraps, which is what we want in general,\n\t        // but this allows subclasses to overwrite for formats\n\t        // that just apply to particular embeds\n\t        _super.prototype.formatAt.call(this, 0, this.length(), name, value);\n\t    };\n\t    EmbedBlot.prototype.formatAt = function (index, length, name, value) {\n\t        if (index === 0 && length === this.length()) {\n\t            this.format(name, value);\n\t        }\n\t        else {\n\t            _super.prototype.formatAt.call(this, index, length, name, value);\n\t        }\n\t    };\n\t    EmbedBlot.prototype.formats = function () {\n\t        return this.statics.formats(this.domNode);\n\t    };\n\t    return EmbedBlot;\n\t}(leaf_1.default));\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\texports.default = EmbedBlot;\n\n\n/***/ },\n/* 17 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar leaf_1 = __webpack_require__(12);\n\tvar Registry = __webpack_require__(6);\n\tvar TextBlot = (function (_super) {\n\t    __extends(TextBlot, _super);\n\t    function TextBlot(node) {\n\t        var _this = _super.call(this, node) || this;\n\t        _this.text = _this.statics.value(_this.domNode);\n\t        return _this;\n\t    }\n\t    TextBlot.create = function (value) {\n\t        return document.createTextNode(value);\n\t    };\n\t    TextBlot.value = function (domNode) {\n\t        return domNode.data;\n\t    };\n\t    TextBlot.prototype.deleteAt = function (index, length) {\n\t        this.domNode.data = this.text = this.text.slice(0, index) + this.text.slice(index + length);\n\t    };\n\t    TextBlot.prototype.index = function (node, offset) {\n\t        if (this.domNode === node) {\n\t            return offset;\n\t        }\n\t        return -1;\n\t    };\n\t    TextBlot.prototype.insertAt = function (index, value, def) {\n\t        if (def == null) {\n\t            this.text = this.text.slice(0, index) + value + this.text.slice(index);\n\t            this.domNode.data = this.text;\n\t        }\n\t        else {\n\t            _super.prototype.insertAt.call(this, index, value, def);\n\t        }\n\t    };\n\t    TextBlot.prototype.length = function () {\n\t        return this.text.length;\n\t    };\n\t    TextBlot.prototype.optimize = function () {\n\t        _super.prototype.optimize.call(this);\n\t        this.text = this.statics.value(this.domNode);\n\t        if (this.text.length === 0) {\n\t            this.remove();\n\t        }\n\t        else if (this.next instanceof TextBlot && this.next.prev === this) {\n\t            this.insertAt(this.length(), this.next.value());\n\t            this.next.remove();\n\t        }\n\t    };\n\t    TextBlot.prototype.position = function (index, inclusive) {\n\t        if (inclusive === void 0) { inclusive = false; }\n\t        return [this.domNode, index];\n\t    };\n\t    TextBlot.prototype.split = function (index, force) {\n\t        if (force === void 0) { force = false; }\n\t        if (!force) {\n\t            if (index === 0)\n\t                return this;\n\t            if (index === this.length())\n\t                return this.next;\n\t        }\n\t        var after = Registry.create(this.domNode.splitText(index));\n\t        this.parent.insertBefore(after, this.next);\n\t        this.text = this.statics.value(this.domNode);\n\t        return after;\n\t    };\n\t    TextBlot.prototype.update = function (mutations) {\n\t        var _this = this;\n\t        if (mutations.some(function (mutation) {\n\t            return mutation.type === 'characterData' && mutation.target === _this.domNode;\n\t        })) {\n\t            this.text = this.statics.value(this.domNode);\n\t        }\n\t    };\n\t    TextBlot.prototype.value = function () {\n\t        return this.text;\n\t    };\n\t    return TextBlot;\n\t}(leaf_1.default));\n\tTextBlot.blotName = 'text';\n\tTextBlot.scope = Registry.Scope.INLINE_BLOT;\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\texports.default = TextBlot;\n\n\n/***/ },\n/* 18 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\texports.default = exports.overload = exports.expandConfig = undefined;\n\n\tvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\n\tvar _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"]) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); } }; }();\n\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\n\t__webpack_require__(19);\n\n\tvar _quillDelta = __webpack_require__(20);\n\n\tvar _quillDelta2 = _interopRequireDefault(_quillDelta);\n\n\tvar _editor = __webpack_require__(27);\n\n\tvar _editor2 = _interopRequireDefault(_editor);\n\n\tvar _emitter3 = __webpack_require__(35);\n\n\tvar _emitter4 = _interopRequireDefault(_emitter3);\n\n\tvar _module = __webpack_require__(39);\n\n\tvar _module2 = _interopRequireDefault(_module);\n\n\tvar _parchment = __webpack_require__(2);\n\n\tvar _parchment2 = _interopRequireDefault(_parchment);\n\n\tvar _selection = __webpack_require__(40);\n\n\tvar _selection2 = _interopRequireDefault(_selection);\n\n\tvar _extend = __webpack_require__(25);\n\n\tvar _extend2 = _interopRequireDefault(_extend);\n\n\tvar _logger = __webpack_require__(37);\n\n\tvar _logger2 = _interopRequireDefault(_logger);\n\n\tvar _theme = __webpack_require__(41);\n\n\tvar _theme2 = _interopRequireDefault(_theme);\n\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n\tfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n\tvar debug = (0, _logger2.default)('quill');\n\n\tvar Quill = function () {\n\t  _createClass(Quill, null, [{\n\t    key: 'debug',\n\t    value: function debug(limit) {\n\t      if (limit === true) {\n\t        limit = 'log';\n\t      }\n\t      _logger2.default.level(limit);\n\t    }\n\t  }, {\n\t    key: 'import',\n\t    value: function _import(name) {\n\t      if (this.imports[name] == null) {\n\t        debug.error('Cannot import ' + name + '. Are you sure it was registered?');\n\t      }\n\t      return this.imports[name];\n\t    }\n\t  }, {\n\t    key: 'register',\n\t    value: function register(path, target) {\n\t      var _this = this;\n\n\t      var overwrite = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n\t      if (typeof path !== 'string') {\n\t        var name = path.attrName || path.blotName;\n\t        if (typeof name === 'string') {\n\t          // register(Blot | Attributor, overwrite)\n\t          this.register('formats/' + name, path, target);\n\t        } else {\n\t          Object.keys(path).forEach(function (key) {\n\t            _this.register(key, path[key], target);\n\t          });\n\t        }\n\t      } else {\n\t        if (this.imports[path] != null && !overwrite) {\n\t          debug.warn('Overwriting ' + path + ' with', target);\n\t        }\n\t        this.imports[path] = target;\n\t        if ((path.startsWith('blots/') || path.startsWith('formats/')) && target.blotName !== 'abstract') {\n\t          _parchment2.default.register(target);\n\t        }\n\t      }\n\t    }\n\t  }]);\n\n\t  function Quill(container) {\n\t    var _this2 = this;\n\n\t    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n\t    _classCallCheck(this, Quill);\n\n\t    this.options = expandConfig(container, options);\n\t    this.container = this.options.container;\n\t    this.scrollingContainer = this.options.scrollingContainer || document.body;\n\t    if (this.container == null) {\n\t      return debug.error('Invalid Quill container', container);\n\t    }\n\t    if (this.options.debug) {\n\t      Quill.debug(this.options.debug);\n\t    }\n\t    var html = this.container.innerHTML.trim();\n\t    this.container.classList.add('ql-container');\n\t    this.container.innerHTML = '';\n\t    this.root = this.addContainer('ql-editor');\n\t    this.root.classList.add('ql-blank');\n\t    this.emitter = new _emitter4.default();\n\t    this.scroll = _parchment2.default.create(this.root, {\n\t      emitter: this.emitter,\n\t      whitelist: this.options.formats\n\t    });\n\t    this.editor = new _editor2.default(this.scroll);\n\t    this.selection = new _selection2.default(this.scroll, this.emitter);\n\t    this.theme = new this.options.theme(this, this.options);\n\t    this.keyboard = this.theme.addModule('keyboard');\n\t    this.clipboard = this.theme.addModule('clipboard');\n\t    this.history = this.theme.addModule('history');\n\t    this.theme.init();\n\t    this.emitter.on(_emitter4.default.events.EDITOR_CHANGE, function (type) {\n\t      if (type === _emitter4.default.events.TEXT_CHANGE) {\n\t        _this2.root.classList.toggle('ql-blank', _this2.editor.isBlank());\n\t      }\n\t    });\n\t    this.emitter.on(_emitter4.default.events.SCROLL_UPDATE, function (source, mutations) {\n\t      var range = _this2.selection.lastRange;\n\t      var index = range && range.length === 0 ? range.index : undefined;\n\t      modify.call(_this2, function () {\n\t        return _this2.editor.update(null, mutations, index);\n\t      }, source);\n\t    });\n\t    var contents = this.clipboard.convert('<div class=\\'ql-editor\\' style=\"white-space: normal;\">' + html + '<p><br></p></div>');\n\t    this.setContents(contents);\n\t    this.history.clear();\n\t    if (this.options.placeholder) {\n\t      this.root.setAttribute('data-placeholder', this.options.placeholder);\n\t    }\n\t    if (this.options.readOnly) {\n\t      this.disable();\n\t    }\n\t  }\n\n\t  _createClass(Quill, [{\n\t    key: 'addContainer',\n\t    value: function addContainer(container) {\n\t      var refNode = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n\n\t      if (typeof container === 'string') {\n\t        var className = container;\n\t        container = document.createElement('div');\n\t        container.classList.add(className);\n\t      }\n\t      this.container.insertBefore(container, refNode);\n\t      return container;\n\t    }\n\t  }, {\n\t    key: 'blur',\n\t    value: function blur() {\n\t      this.selection.setRange(null);\n\t    }\n\t  }, {\n\t    key: 'deleteText',\n\t    value: function deleteText(index, length, source) {\n\t      var _this3 = this;\n\n\t      var _overload = overload(index, length, source);\n\n\t      var _overload2 = _slicedToArray(_overload, 4);\n\n\t      index = _overload2[0];\n\t      length = _overload2[1];\n\t      source = _overload2[3];\n\n\t      return modify.call(this, function () {\n\t        return _this3.editor.deleteText(index, length);\n\t      }, source, index, -1 * length);\n\t    }\n\t  }, {\n\t    key: 'disable',\n\t    value: function disable() {\n\t      this.enable(false);\n\t    }\n\t  }, {\n\t    key: 'enable',\n\t    value: function enable() {\n\t      var enabled = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n\n\t      this.scroll.enable(enabled);\n\t      this.container.classList.toggle('ql-disabled', !enabled);\n\t      if (!enabled) {\n\t        this.blur();\n\t      }\n\t    }\n\t  }, {\n\t    key: 'focus',\n\t    value: function focus() {\n\t      var scrollTop = this.scrollingContainer.scrollTop;\n\t      this.selection.focus();\n\t      this.scrollingContainer.scrollTop = scrollTop;\n\t      this.selection.scrollIntoView();\n\t    }\n\t  }, {\n\t    key: 'format',\n\t    value: function format(name, value) {\n\t      var _this4 = this;\n\n\t      var source = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : _emitter4.default.sources.API;\n\n\t      return modify.call(this, function () {\n\t        var range = _this4.getSelection(true);\n\t        var change = new _quillDelta2.default();\n\t        if (range == null) {\n\t          return change;\n\t        } else if (_parchment2.default.query(name, _parchment2.default.Scope.BLOCK)) {\n\t          change = _this4.editor.formatLine(range.index, range.length, _defineProperty({}, name, value));\n\t        } else if (range.length === 0) {\n\t          _this4.selection.format(name, value);\n\t          return change;\n\t        } else {\n\t          change = _this4.editor.formatText(range.index, range.length, _defineProperty({}, name, value));\n\t        }\n\t        _this4.setSelection(range, _emitter4.default.sources.SILENT);\n\t        return change;\n\t      }, source);\n\t    }\n\t  }, {\n\t    key: 'formatLine',\n\t    value: function formatLine(index, length, name, value, source) {\n\t      var _this5 = this;\n\n\t      var formats = void 0;\n\n\t      var _overload3 = overload(index, length, name, value, source);\n\n\t      var _overload4 = _slicedToArray(_overload3, 4);\n\n\t      index = _overload4[0];\n\t      length = _overload4[1];\n\t      formats = _overload4[2];\n\t      source = _overload4[3];\n\n\t      return modify.call(this, function () {\n\t        return _this5.editor.formatLine(index, length, formats);\n\t      }, source, index, 0);\n\t    }\n\t  }, {\n\t    key: 'formatText',\n\t    value: function formatText(index, length, name, value, source) {\n\t      var _this6 = this;\n\n\t      var formats = void 0;\n\n\t      var _overload5 = overload(index, length, name, value, source);\n\n\t      var _overload6 = _slicedToArray(_overload5, 4);\n\n\t      index = _overload6[0];\n\t      length = _overload6[1];\n\t      formats = _overload6[2];\n\t      source = _overload6[3];\n\n\t      return modify.call(this, function () {\n\t        return _this6.editor.formatText(index, length, formats);\n\t      }, source, index, 0);\n\t    }\n\t  }, {\n\t    key: 'getBounds',\n\t    value: function getBounds(index) {\n\t      var length = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n\n\t      if (typeof index === 'number') {\n\t        return this.selection.getBounds(index, length);\n\t      } else {\n\t        return this.selection.getBounds(index.index, index.length);\n\t      }\n\t    }\n\t  }, {\n\t    key: 'getContents',\n\t    value: function getContents() {\n\t      var index = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n\t      var length = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.getLength() - index;\n\n\t      var _overload7 = overload(index, length);\n\n\t      var _overload8 = _slicedToArray(_overload7, 2);\n\n\t      index = _overload8[0];\n\t      length = _overload8[1];\n\n\t      return this.editor.getContents(index, length);\n\t    }\n\t  }, {\n\t    key: 'getFormat',\n\t    value: function getFormat() {\n\t      var index = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.getSelection();\n\t      var length = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n\n\t      if (typeof index === 'number') {\n\t        return this.editor.getFormat(index, length);\n\t      } else {\n\t        return this.editor.getFormat(index.index, index.length);\n\t      }\n\t    }\n\t  }, {\n\t    key: 'getLength',\n\t    value: function getLength() {\n\t      return this.scroll.length();\n\t    }\n\t  }, {\n\t    key: 'getModule',\n\t    value: function getModule(name) {\n\t      return this.theme.modules[name];\n\t    }\n\t  }, {\n\t    key: 'getSelection',\n\t    value: function getSelection() {\n\t      var focus = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n\n\t      if (focus) this.focus();\n\t      this.update(); // Make sure we access getRange with editor in consistent state\n\t      return this.selection.getRange()[0];\n\t    }\n\t  }, {\n\t    key: 'getText',\n\t    value: function getText() {\n\t      var index = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n\t      var length = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.getLength() - index;\n\n\t      var _overload9 = overload(index, length);\n\n\t      var _overload10 = _slicedToArray(_overload9, 2);\n\n\t      index = _overload10[0];\n\t      length = _overload10[1];\n\n\t      return this.editor.getText(index, length);\n\t    }\n\t  }, {\n\t    key: 'hasFocus',\n\t    value: function hasFocus() {\n\t      return this.selection.hasFocus();\n\t    }\n\t  }, {\n\t    key: 'insertEmbed',\n\t    value: function insertEmbed(index, embed, value) {\n\t      var _this7 = this;\n\n\t      var source = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : Quill.sources.API;\n\n\t      return modify.call(this, function () {\n\t        return _this7.editor.insertEmbed(index, embed, value);\n\t      }, source, index);\n\t    }\n\t  }, {\n\t    key: 'insertText',\n\t    value: function insertText(index, text, name, value, source) {\n\t      var _this8 = this;\n\n\t      var formats = void 0;\n\n\t      var _overload11 = overload(index, 0, name, value, source);\n\n\t      var _overload12 = _slicedToArray(_overload11, 4);\n\n\t      index = _overload12[0];\n\t      formats = _overload12[2];\n\t      source = _overload12[3];\n\n\t      return modify.call(this, function () {\n\t        return _this8.editor.insertText(index, text, formats);\n\t      }, source, index, text.length);\n\t    }\n\t  }, {\n\t    key: 'isEnabled',\n\t    value: function isEnabled() {\n\t      return !this.container.classList.contains('ql-disabled');\n\t    }\n\t  }, {\n\t    key: 'off',\n\t    value: function off() {\n\t      return this.emitter.off.apply(this.emitter, arguments);\n\t    }\n\t  }, {\n\t    key: 'on',\n\t    value: function on() {\n\t      return this.emitter.on.apply(this.emitter, arguments);\n\t    }\n\t  }, {\n\t    key: 'once',\n\t    value: function once() {\n\t      return this.emitter.once.apply(this.emitter, arguments);\n\t    }\n\t  }, {\n\t    key: 'pasteHTML',\n\t    value: function pasteHTML(index, html, source) {\n\t      this.clipboard.dangerouslyPasteHTML(index, html, source);\n\t    }\n\t  }, {\n\t    key: 'removeFormat',\n\t    value: function removeFormat(index, length, source) {\n\t      var _this9 = this;\n\n\t      var _overload13 = overload(index, length, source);\n\n\t      var _overload14 = _slicedToArray(_overload13, 4);\n\n\t      index = _overload14[0];\n\t      length = _overload14[1];\n\t      source = _overload14[3];\n\n\t      return modify.call(this, function () {\n\t        return _this9.editor.removeFormat(index, length);\n\t      }, source, index);\n\t    }\n\t  }, {\n\t    key: 'setContents',\n\t    value: function setContents(delta) {\n\t      var _this10 = this;\n\n\t      var source = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _emitter4.default.sources.API;\n\n\t      return modify.call(this, function () {\n\t        delta = new _quillDelta2.default(delta);\n\t        var length = _this10.getLength();\n\t        var deleted = _this10.editor.deleteText(0, length);\n\t        var applied = _this10.editor.applyDelta(delta);\n\t        var lastOp = applied.ops[applied.ops.length - 1];\n\t        if (lastOp != null && typeof lastOp.insert === 'string' && lastOp.insert[lastOp.insert.length - 1] === '\\n') {\n\t          _this10.editor.deleteText(_this10.getLength() - 1, 1);\n\t          applied.delete(1);\n\t        }\n\t        var ret = deleted.compose(applied);\n\t        return ret;\n\t      }, source);\n\t    }\n\t  }, {\n\t    key: 'setSelection',\n\t    value: function setSelection(index, length, source) {\n\t      if (index == null) {\n\t        this.selection.setRange(null, length || Quill.sources.API);\n\t      } else {\n\t        var _overload15 = overload(index, length, source);\n\n\t        var _overload16 = _slicedToArray(_overload15, 4);\n\n\t        index = _overload16[0];\n\t        length = _overload16[1];\n\t        source = _overload16[3];\n\n\t        this.selection.setRange(new _selection.Range(index, length), source);\n\t      }\n\t      this.selection.scrollIntoView();\n\t    }\n\t  }, {\n\t    key: 'setText',\n\t    value: function setText(text) {\n\t      var source = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _emitter4.default.sources.API;\n\n\t      var delta = new _quillDelta2.default().insert(text);\n\t      return this.setContents(delta, source);\n\t    }\n\t  }, {\n\t    key: 'update',\n\t    value: function update() {\n\t      var source = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _emitter4.default.sources.USER;\n\n\t      var change = this.scroll.update(source); // Will update selection before selection.update() does if text changes\n\t      this.selection.update(source);\n\t      return change;\n\t    }\n\t  }, {\n\t    key: 'updateContents',\n\t    value: function updateContents(delta) {\n\t      var _this11 = this;\n\n\t      var source = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _emitter4.default.sources.API;\n\n\t      return modify.call(this, function () {\n\t        delta = new _quillDelta2.default(delta);\n\t        return _this11.editor.applyDelta(delta, source);\n\t      }, source, true);\n\t    }\n\t  }]);\n\n\t  return Quill;\n\t}();\n\n\tQuill.DEFAULTS = {\n\t  bounds: null,\n\t  formats: null,\n\t  modules: {},\n\t  placeholder: '',\n\t  readOnly: false,\n\t  scrollingContainer: null,\n\t  strict: true,\n\t  theme: 'default'\n\t};\n\tQuill.events = _emitter4.default.events;\n\tQuill.sources = _emitter4.default.sources;\n\t// eslint-disable-next-line no-undef\n\tQuill.version =  false ? 'dev' : (\"1.1.9\");\n\n\tQuill.imports = {\n\t  'delta': _quillDelta2.default,\n\t  'parchment': _parchment2.default,\n\t  'core/module': _module2.default,\n\t  'core/theme': _theme2.default\n\t};\n\n\tfunction expandConfig(container, userConfig) {\n\t  userConfig = (0, _extend2.default)(true, {\n\t    container: container,\n\t    modules: {\n\t      clipboard: true,\n\t      keyboard: true,\n\t      history: true\n\t    }\n\t  }, userConfig);\n\t  if (!userConfig.theme || userConfig.theme === Quill.DEFAULTS.theme) {\n\t    userConfig.theme = _theme2.default;\n\t  } else {\n\t    userConfig.theme = Quill.import('themes/' + userConfig.theme);\n\t    if (userConfig.theme == null) {\n\t      throw new Error('Invalid theme ' + userConfig.theme + '. Did you register it?');\n\t    }\n\t  }\n\t  var themeConfig = (0, _extend2.default)(true, {}, userConfig.theme.DEFAULTS);\n\t  [themeConfig, userConfig].forEach(function (config) {\n\t    config.modules = config.modules || {};\n\t    Object.keys(config.modules).forEach(function (module) {\n\t      if (config.modules[module] === true) {\n\t        config.modules[module] = {};\n\t      }\n\t    });\n\t  });\n\t  var moduleNames = Object.keys(themeConfig.modules).concat(Object.keys(userConfig.modules));\n\t  var moduleConfig = moduleNames.reduce(function (config, name) {\n\t    var moduleClass = Quill.import('modules/' + name);\n\t    if (moduleClass == null) {\n\t      debug.error('Cannot load ' + name + ' module. Are you sure you registered it?');\n\t    } else {\n\t      config[name] = moduleClass.DEFAULTS || {};\n\t    }\n\t    return config;\n\t  }, {});\n\t  // Special case toolbar shorthand\n\t  if (userConfig.modules != null && userConfig.modules.toolbar && userConfig.modules.toolbar.constructor !== Object) {\n\t    userConfig.modules.toolbar = {\n\t      container: userConfig.modules.toolbar\n\t    };\n\t  }\n\t  userConfig = (0, _extend2.default)(true, {}, Quill.DEFAULTS, { modules: moduleConfig }, themeConfig, userConfig);\n\t  ['bounds', 'container', 'scrollingContainer'].forEach(function (key) {\n\t    if (typeof userConfig[key] === 'string') {\n\t      userConfig[key] = document.querySelector(userConfig[key]);\n\t    }\n\t  });\n\t  userConfig.modules = Object.keys(userConfig.modules).reduce(function (config, name) {\n\t    if (userConfig.modules[name]) {\n\t      config[name] = userConfig.modules[name];\n\t    }\n\t    return config;\n\t  }, {});\n\t  return userConfig;\n\t}\n\n\t// Handle selection preservation and TEXT_CHANGE emission\n\t// common to modification APIs\n\tfunction modify(modifier, source, index, shift) {\n\t  if (this.options.strict && !this.isEnabled() && source === _emitter4.default.sources.USER) {\n\t    return new _quillDelta2.default();\n\t  }\n\t  var range = index == null ? null : this.getSelection();\n\t  var oldDelta = this.editor.delta;\n\t  var change = modifier();\n\t  if (range != null && source === _emitter4.default.sources.USER) {\n\t    if (index === true) index = range.index;\n\t    if (shift == null) {\n\t      range = shiftRange(range, change, source);\n\t    } else if (shift !== 0) {\n\t      range = shiftRange(range, index, shift, source);\n\t    }\n\t    this.setSelection(range, _emitter4.default.sources.SILENT);\n\t  }\n\t  if (change.length() > 0) {\n\t    var _emitter;\n\n\t    var args = [_emitter4.default.events.TEXT_CHANGE, change, oldDelta, source];\n\t    (_emitter = this.emitter).emit.apply(_emitter, [_emitter4.default.events.EDITOR_CHANGE].concat(args));\n\t    if (source !== _emitter4.default.sources.SILENT) {\n\t      var _emitter2;\n\n\t      (_emitter2 = this.emitter).emit.apply(_emitter2, args);\n\t    }\n\t  }\n\t  return change;\n\t}\n\n\tfunction overload(index, length, name, value, source) {\n\t  var formats = {};\n\t  if (typeof index.index === 'number' && typeof index.length === 'number') {\n\t    // Allow for throwaway end (used by insertText/insertEmbed)\n\t    if (typeof length !== 'number') {\n\t      source = value, value = name, name = length, length = index.length, index = index.index;\n\t    } else {\n\t      length = index.length, index = index.index;\n\t    }\n\t  } else if (typeof length !== 'number') {\n\t    source = value, value = name, name = length, length = 0;\n\t  }\n\t  // Handle format being object, two format name/value strings or excluded\n\t  if ((typeof name === 'undefined' ? 'undefined' : _typeof(name)) === 'object') {\n\t    formats = name;\n\t    source = value;\n\t  } else if (typeof name === 'string') {\n\t    if (value != null) {\n\t      formats[name] = value;\n\t    } else {\n\t      source = name;\n\t    }\n\t  }\n\t  // Handle optional source\n\t  source = source || _emitter4.default.sources.API;\n\t  return [index, length, formats, source];\n\t}\n\n\tfunction shiftRange(range, index, length, source) {\n\t  if (range == null) return null;\n\t  var start = void 0,\n\t      end = void 0;\n\t  if (index instanceof _quillDelta2.default) {\n\t    var _map = [range.index, range.index + range.length].map(function (pos) {\n\t      return index.transformPosition(pos, source === _emitter4.default.sources.USER);\n\t    });\n\n\t    var _map2 = _slicedToArray(_map, 2);\n\n\t    start = _map2[0];\n\t    end = _map2[1];\n\t  } else {\n\t    var _map3 = [range.index, range.index + range.length].map(function (pos) {\n\t      if (pos < index || pos === index && source !== _emitter4.default.sources.USER) return pos;\n\t      if (length >= 0) {\n\t        return pos + length;\n\t      } else {\n\t        return Math.max(index, pos + length);\n\t      }\n\t    });\n\n\t    var _map4 = _slicedToArray(_map3, 2);\n\n\t    start = _map4[0];\n\t    end = _map4[1];\n\t  }\n\t  return new _selection.Range(start, end - start);\n\t}\n\n\texports.expandConfig = expandConfig;\n\texports.overload = overload;\n\texports.default = Quill;\n\n/***/ },\n/* 19 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\n\tvar elem = document.createElement('div');\n\telem.classList.toggle('test-class', false);\n\tif (elem.classList.contains('test-class')) {\n\t  (function () {\n\t    var _toggle = DOMTokenList.prototype.toggle;\n\t    DOMTokenList.prototype.toggle = function (token, force) {\n\t      if (arguments.length > 1 && !this.contains(token) === !force) {\n\t        return force;\n\t      } else {\n\t        return _toggle.call(this, token);\n\t      }\n\t    };\n\t  })();\n\t}\n\n\tif (!String.prototype.startsWith) {\n\t  String.prototype.startsWith = function (searchString, position) {\n\t    position = position || 0;\n\t    return this.substr(position, searchString.length) === searchString;\n\t  };\n\t}\n\n\tif (!String.prototype.endsWith) {\n\t  String.prototype.endsWith = function (searchString, position) {\n\t    var subjectString = this.toString();\n\t    if (typeof position !== 'number' || !isFinite(position) || Math.floor(position) !== position || position > subjectString.length) {\n\t      position = subjectString.length;\n\t    }\n\t    position -= searchString.length;\n\t    var lastIndex = subjectString.indexOf(searchString, position);\n\t    return lastIndex !== -1 && lastIndex === position;\n\t  };\n\t}\n\n\tif (!Array.prototype.find) {\n\t  Object.defineProperty(Array.prototype, \"find\", {\n\t    value: function value(predicate) {\n\t      if (this === null) {\n\t        throw new TypeError('Array.prototype.find called on null or undefined');\n\t      }\n\t      if (typeof predicate !== 'function') {\n\t        throw new TypeError('predicate must be a function');\n\t      }\n\t      var list = Object(this);\n\t      var length = list.length >>> 0;\n\t      var thisArg = arguments[1];\n\t      var value;\n\n\t      for (var i = 0; i < length; i++) {\n\t        value = list[i];\n\t        if (predicate.call(thisArg, value, i, list)) {\n\t          return value;\n\t        }\n\t      }\n\t      return undefined;\n\t    }\n\t  });\n\t}\n\n\t// Disable resizing in Firefox\n\tdocument.addEventListener(\"DOMContentLoaded\", function () {\n\t  document.execCommand(\"enableObjectResizing\", false, false);\n\t});\n\n/***/ },\n/* 20 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar diff = __webpack_require__(21);\n\tvar equal = __webpack_require__(22);\n\tvar extend = __webpack_require__(25);\n\tvar op = __webpack_require__(26);\n\n\n\tvar NULL_CHARACTER = String.fromCharCode(0);  // Placeholder char for embed in diff()\n\n\n\tvar Delta = function (ops) {\n\t  // Assume we are given a well formed ops\n\t  if (Array.isArray(ops)) {\n\t    this.ops = ops;\n\t  } else if (ops != null && Array.isArray(ops.ops)) {\n\t    this.ops = ops.ops;\n\t  } else {\n\t    this.ops = [];\n\t  }\n\t};\n\n\n\tDelta.prototype.insert = function (text, attributes) {\n\t  var newOp = {};\n\t  if (text.length === 0) return this;\n\t  newOp.insert = text;\n\t  if (attributes != null && typeof attributes === 'object' && Object.keys(attributes).length > 0) {\n\t    newOp.attributes = attributes;\n\t  }\n\t  return this.push(newOp);\n\t};\n\n\tDelta.prototype['delete'] = function (length) {\n\t  if (length <= 0) return this;\n\t  return this.push({ 'delete': length });\n\t};\n\n\tDelta.prototype.retain = function (length, attributes) {\n\t  if (length <= 0) return this;\n\t  var newOp = { retain: length };\n\t  if (attributes != null && typeof attributes === 'object' && Object.keys(attributes).length > 0) {\n\t    newOp.attributes = attributes;\n\t  }\n\t  return this.push(newOp);\n\t};\n\n\tDelta.prototype.push = function (newOp) {\n\t  var index = this.ops.length;\n\t  var lastOp = this.ops[index - 1];\n\t  newOp = extend(true, {}, newOp);\n\t  if (typeof lastOp === 'object') {\n\t    if (typeof newOp['delete'] === 'number' && typeof lastOp['delete'] === 'number') {\n\t      this.ops[index - 1] = { 'delete': lastOp['delete'] + newOp['delete'] };\n\t      return this;\n\t    }\n\t    // Since it does not matter if we insert before or after deleting at the same index,\n\t    // always prefer to insert first\n\t    if (typeof lastOp['delete'] === 'number' && newOp.insert != null) {\n\t      index -= 1;\n\t      lastOp = this.ops[index - 1];\n\t      if (typeof lastOp !== 'object') {\n\t        this.ops.unshift(newOp);\n\t        return this;\n\t      }\n\t    }\n\t    if (equal(newOp.attributes, lastOp.attributes)) {\n\t      if (typeof newOp.insert === 'string' && typeof lastOp.insert === 'string') {\n\t        this.ops[index - 1] = { insert: lastOp.insert + newOp.insert };\n\t        if (typeof newOp.attributes === 'object') this.ops[index - 1].attributes = newOp.attributes\n\t        return this;\n\t      } else if (typeof newOp.retain === 'number' && typeof lastOp.retain === 'number') {\n\t        this.ops[index - 1] = { retain: lastOp.retain + newOp.retain };\n\t        if (typeof newOp.attributes === 'object') this.ops[index - 1].attributes = newOp.attributes\n\t        return this;\n\t      }\n\t    }\n\t  }\n\t  if (index === this.ops.length) {\n\t    this.ops.push(newOp);\n\t  } else {\n\t    this.ops.splice(index, 0, newOp);\n\t  }\n\t  return this;\n\t};\n\n\tDelta.prototype.filter = function (predicate) {\n\t  return this.ops.filter(predicate);\n\t};\n\n\tDelta.prototype.forEach = function (predicate) {\n\t  this.ops.forEach(predicate);\n\t};\n\n\tDelta.prototype.map = function (predicate) {\n\t  return this.ops.map(predicate);\n\t};\n\n\tDelta.prototype.partition = function (predicate) {\n\t  var passed = [], failed = [];\n\t  this.forEach(function(op) {\n\t    var target = predicate(op) ? passed : failed;\n\t    target.push(op);\n\t  });\n\t  return [passed, failed];\n\t};\n\n\tDelta.prototype.reduce = function (predicate, initial) {\n\t  return this.ops.reduce(predicate, initial);\n\t};\n\n\tDelta.prototype.chop = function () {\n\t  var lastOp = this.ops[this.ops.length - 1];\n\t  if (lastOp && lastOp.retain && !lastOp.attributes) {\n\t    this.ops.pop();\n\t  }\n\t  return this;\n\t};\n\n\tDelta.prototype.length = function () {\n\t  return this.reduce(function (length, elem) {\n\t    return length + op.length(elem);\n\t  }, 0);\n\t};\n\n\tDelta.prototype.slice = function (start, end) {\n\t  start = start || 0;\n\t  if (typeof end !== 'number') end = Infinity;\n\t  var ops = [];\n\t  var iter = op.iterator(this.ops);\n\t  var index = 0;\n\t  while (index < end && iter.hasNext()) {\n\t    var nextOp;\n\t    if (index < start) {\n\t      nextOp = iter.next(start - index);\n\t    } else {\n\t      nextOp = iter.next(end - index);\n\t      ops.push(nextOp);\n\t    }\n\t    index += op.length(nextOp);\n\t  }\n\t  return new Delta(ops);\n\t};\n\n\n\tDelta.prototype.compose = function (other) {\n\t  var thisIter = op.iterator(this.ops);\n\t  var otherIter = op.iterator(other.ops);\n\t  var delta = new Delta();\n\t  while (thisIter.hasNext() || otherIter.hasNext()) {\n\t    if (otherIter.peekType() === 'insert') {\n\t      delta.push(otherIter.next());\n\t    } else if (thisIter.peekType() === 'delete') {\n\t      delta.push(thisIter.next());\n\t    } else {\n\t      var length = Math.min(thisIter.peekLength(), otherIter.peekLength());\n\t      var thisOp = thisIter.next(length);\n\t      var otherOp = otherIter.next(length);\n\t      if (typeof otherOp.retain === 'number') {\n\t        var newOp = {};\n\t        if (typeof thisOp.retain === 'number') {\n\t          newOp.retain = length;\n\t        } else {\n\t          newOp.insert = thisOp.insert;\n\t        }\n\t        // Preserve null when composing with a retain, otherwise remove it for inserts\n\t        var attributes = op.attributes.compose(thisOp.attributes, otherOp.attributes, typeof thisOp.retain === 'number');\n\t        if (attributes) newOp.attributes = attributes;\n\t        delta.push(newOp);\n\t      // Other op should be delete, we could be an insert or retain\n\t      // Insert + delete cancels out\n\t      } else if (typeof otherOp['delete'] === 'number' && typeof thisOp.retain === 'number') {\n\t        delta.push(otherOp);\n\t      }\n\t    }\n\t  }\n\t  return delta.chop();\n\t};\n\n\tDelta.prototype.concat = function (other) {\n\t  var delta = new Delta(this.ops.slice());\n\t  if (other.ops.length > 0) {\n\t    delta.push(other.ops[0]);\n\t    delta.ops = delta.ops.concat(other.ops.slice(1));\n\t  }\n\t  return delta;\n\t};\n\n\tDelta.prototype.diff = function (other, index) {\n\t  if (this.ops === other.ops) {\n\t    return new Delta();\n\t  }\n\t  var strings = [this, other].map(function (delta) {\n\t    return delta.map(function (op) {\n\t      if (op.insert != null) {\n\t        return typeof op.insert === 'string' ? op.insert : NULL_CHARACTER;\n\t      }\n\t      var prep = (ops === other.ops) ? 'on' : 'with';\n\t      throw new Error('diff() called ' + prep + ' non-document');\n\t    }).join('');\n\t  });\n\t  var delta = new Delta();\n\t  var diffResult = diff(strings[0], strings[1], index);\n\t  var thisIter = op.iterator(this.ops);\n\t  var otherIter = op.iterator(other.ops);\n\t  diffResult.forEach(function (component) {\n\t    var length = component[1].length;\n\t    while (length > 0) {\n\t      var opLength = 0;\n\t      switch (component[0]) {\n\t        case diff.INSERT:\n\t          opLength = Math.min(otherIter.peekLength(), length);\n\t          delta.push(otherIter.next(opLength));\n\t          break;\n\t        case diff.DELETE:\n\t          opLength = Math.min(length, thisIter.peekLength());\n\t          thisIter.next(opLength);\n\t          delta['delete'](opLength);\n\t          break;\n\t        case diff.EQUAL:\n\t          opLength = Math.min(thisIter.peekLength(), otherIter.peekLength(), length);\n\t          var thisOp = thisIter.next(opLength);\n\t          var otherOp = otherIter.next(opLength);\n\t          if (equal(thisOp.insert, otherOp.insert)) {\n\t            delta.retain(opLength, op.attributes.diff(thisOp.attributes, otherOp.attributes));\n\t          } else {\n\t            delta.push(otherOp)['delete'](opLength);\n\t          }\n\t          break;\n\t      }\n\t      length -= opLength;\n\t    }\n\t  });\n\t  return delta.chop();\n\t};\n\n\tDelta.prototype.eachLine = function (predicate, newline) {\n\t  newline = newline || '\\n';\n\t  var iter = op.iterator(this.ops);\n\t  var line = new Delta();\n\t  while (iter.hasNext()) {\n\t    if (iter.peekType() !== 'insert') return;\n\t    var thisOp = iter.peek();\n\t    var start = op.length(thisOp) - iter.peekLength();\n\t    var index = typeof thisOp.insert === 'string' ?\n\t      thisOp.insert.indexOf(newline, start) - start : -1;\n\t    if (index < 0) {\n\t      line.push(iter.next());\n\t    } else if (index > 0) {\n\t      line.push(iter.next(index));\n\t    } else {\n\t      predicate(line, iter.next(1).attributes || {});\n\t      line = new Delta();\n\t    }\n\t  }\n\t  if (line.length() > 0) {\n\t    predicate(line, {});\n\t  }\n\t};\n\n\tDelta.prototype.transform = function (other, priority) {\n\t  priority = !!priority;\n\t  if (typeof other === 'number') {\n\t    return this.transformPosition(other, priority);\n\t  }\n\t  var thisIter = op.iterator(this.ops);\n\t  var otherIter = op.iterator(other.ops);\n\t  var delta = new Delta();\n\t  while (thisIter.hasNext() || otherIter.hasNext()) {\n\t    if (thisIter.peekType() === 'insert' && (priority || otherIter.peekType() !== 'insert')) {\n\t      delta.retain(op.length(thisIter.next()));\n\t    } else if (otherIter.peekType() === 'insert') {\n\t      delta.push(otherIter.next());\n\t    } else {\n\t      var length = Math.min(thisIter.peekLength(), otherIter.peekLength());\n\t      var thisOp = thisIter.next(length);\n\t      var otherOp = otherIter.next(length);\n\t      if (thisOp['delete']) {\n\t        // Our delete either makes their delete redundant or removes their retain\n\t        continue;\n\t      } else if (otherOp['delete']) {\n\t        delta.push(otherOp);\n\t      } else {\n\t        // We retain either their retain or insert\n\t        delta.retain(length, op.attributes.transform(thisOp.attributes, otherOp.attributes, priority));\n\t      }\n\t    }\n\t  }\n\t  return delta.chop();\n\t};\n\n\tDelta.prototype.transformPosition = function (index, priority) {\n\t  priority = !!priority;\n\t  var thisIter = op.iterator(this.ops);\n\t  var offset = 0;\n\t  while (thisIter.hasNext() && offset <= index) {\n\t    var length = thisIter.peekLength();\n\t    var nextType = thisIter.peekType();\n\t    thisIter.next();\n\t    if (nextType === 'delete') {\n\t      index -= Math.min(length, index - offset);\n\t      continue;\n\t    } else if (nextType === 'insert' && (offset < index || !priority)) {\n\t      index += length;\n\t    }\n\t    offset += length;\n\t  }\n\t  return index;\n\t};\n\n\n\tmodule.exports = Delta;\n\n\n/***/ },\n/* 21 */\n/***/ function(module, exports) {\n\n\t/**\n\t * This library modifies the diff-patch-match library by Neil Fraser\n\t * by removing the patch and match functionality and certain advanced\n\t * options in the diff function. The original license is as follows:\n\t *\n\t * ===\n\t *\n\t * Diff Match and Patch\n\t *\n\t * Copyright 2006 Google Inc.\n\t * http://code.google.com/p/google-diff-match-patch/\n\t *\n\t * Licensed under the Apache License, Version 2.0 (the \"License\");\n\t * you may not use this file except in compliance with the License.\n\t * You may obtain a copy of the License at\n\t *\n\t *   http://www.apache.org/licenses/LICENSE-2.0\n\t *\n\t * Unless required by applicable law or agreed to in writing, software\n\t * distributed under the License is distributed on an \"AS IS\" BASIS,\n\t * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t * See the License for the specific language governing permissions and\n\t * limitations under the License.\n\t */\n\n\n\t/**\n\t * The data structure representing a diff is an array of tuples:\n\t * [[DIFF_DELETE, 'Hello'], [DIFF_INSERT, 'Goodbye'], [DIFF_EQUAL, ' world.']]\n\t * which means: delete 'Hello', add 'Goodbye' and keep ' world.'\n\t */\n\tvar DIFF_DELETE = -1;\n\tvar DIFF_INSERT = 1;\n\tvar DIFF_EQUAL = 0;\n\n\n\t/**\n\t * Find the differences between two texts.  Simplifies the problem by stripping\n\t * any common prefix or suffix off the texts before diffing.\n\t * @param {string} text1 Old string to be diffed.\n\t * @param {string} text2 New string to be diffed.\n\t * @param {Int} cursor_pos Expected edit position in text1 (optional)\n\t * @return {Array} Array of diff tuples.\n\t */\n\tfunction diff_main(text1, text2, cursor_pos) {\n\t  // Check for equality (speedup).\n\t  if (text1 == text2) {\n\t    if (text1) {\n\t      return [[DIFF_EQUAL, text1]];\n\t    }\n\t    return [];\n\t  }\n\n\t  // Check cursor_pos within bounds\n\t  if (cursor_pos < 0 || text1.length < cursor_pos) {\n\t    cursor_pos = null;\n\t  }\n\n\t  // Trim off common prefix (speedup).\n\t  var commonlength = diff_commonPrefix(text1, text2);\n\t  var commonprefix = text1.substring(0, commonlength);\n\t  text1 = text1.substring(commonlength);\n\t  text2 = text2.substring(commonlength);\n\n\t  // Trim off common suffix (speedup).\n\t  commonlength = diff_commonSuffix(text1, text2);\n\t  var commonsuffix = text1.substring(text1.length - commonlength);\n\t  text1 = text1.substring(0, text1.length - commonlength);\n\t  text2 = text2.substring(0, text2.length - commonlength);\n\n\t  // Compute the diff on the middle block.\n\t  var diffs = diff_compute_(text1, text2);\n\n\t  // Restore the prefix and suffix.\n\t  if (commonprefix) {\n\t    diffs.unshift([DIFF_EQUAL, commonprefix]);\n\t  }\n\t  if (commonsuffix) {\n\t    diffs.push([DIFF_EQUAL, commonsuffix]);\n\t  }\n\t  diff_cleanupMerge(diffs);\n\t  if (cursor_pos != null) {\n\t    diffs = fix_cursor(diffs, cursor_pos);\n\t  }\n\t  return diffs;\n\t};\n\n\n\t/**\n\t * Find the differences between two texts.  Assumes that the texts do not\n\t * have any common prefix or suffix.\n\t * @param {string} text1 Old string to be diffed.\n\t * @param {string} text2 New string to be diffed.\n\t * @return {Array} Array of diff tuples.\n\t */\n\tfunction diff_compute_(text1, text2) {\n\t  var diffs;\n\n\t  if (!text1) {\n\t    // Just add some text (speedup).\n\t    return [[DIFF_INSERT, text2]];\n\t  }\n\n\t  if (!text2) {\n\t    // Just delete some text (speedup).\n\t    return [[DIFF_DELETE, text1]];\n\t  }\n\n\t  var longtext = text1.length > text2.length ? text1 : text2;\n\t  var shorttext = text1.length > text2.length ? text2 : text1;\n\t  var i = longtext.indexOf(shorttext);\n\t  if (i != -1) {\n\t    // Shorter text is inside the longer text (speedup).\n\t    diffs = [[DIFF_INSERT, longtext.substring(0, i)],\n\t             [DIFF_EQUAL, shorttext],\n\t             [DIFF_INSERT, longtext.substring(i + shorttext.length)]];\n\t    // Swap insertions for deletions if diff is reversed.\n\t    if (text1.length > text2.length) {\n\t      diffs[0][0] = diffs[2][0] = DIFF_DELETE;\n\t    }\n\t    return diffs;\n\t  }\n\n\t  if (shorttext.length == 1) {\n\t    // Single character string.\n\t    // After the previous speedup, the character can't be an equality.\n\t    return [[DIFF_DELETE, text1], [DIFF_INSERT, text2]];\n\t  }\n\n\t  // Check to see if the problem can be split in two.\n\t  var hm = diff_halfMatch_(text1, text2);\n\t  if (hm) {\n\t    // A half-match was found, sort out the return data.\n\t    var text1_a = hm[0];\n\t    var text1_b = hm[1];\n\t    var text2_a = hm[2];\n\t    var text2_b = hm[3];\n\t    var mid_common = hm[4];\n\t    // Send both pairs off for separate processing.\n\t    var diffs_a = diff_main(text1_a, text2_a);\n\t    var diffs_b = diff_main(text1_b, text2_b);\n\t    // Merge the results.\n\t    return diffs_a.concat([[DIFF_EQUAL, mid_common]], diffs_b);\n\t  }\n\n\t  return diff_bisect_(text1, text2);\n\t};\n\n\n\t/**\n\t * Find the 'middle snake' of a diff, split the problem in two\n\t * and return the recursively constructed diff.\n\t * See Myers 1986 paper: An O(ND) Difference Algorithm and Its Variations.\n\t * @param {string} text1 Old string to be diffed.\n\t * @param {string} text2 New string to be diffed.\n\t * @return {Array} Array of diff tuples.\n\t * @private\n\t */\n\tfunction diff_bisect_(text1, text2) {\n\t  // Cache the text lengths to prevent multiple calls.\n\t  var text1_length = text1.length;\n\t  var text2_length = text2.length;\n\t  var max_d = Math.ceil((text1_length + text2_length) / 2);\n\t  var v_offset = max_d;\n\t  var v_length = 2 * max_d;\n\t  var v1 = new Array(v_length);\n\t  var v2 = new Array(v_length);\n\t  // Setting all elements to -1 is faster in Chrome & Firefox than mixing\n\t  // integers and undefined.\n\t  for (var x = 0; x < v_length; x++) {\n\t    v1[x] = -1;\n\t    v2[x] = -1;\n\t  }\n\t  v1[v_offset + 1] = 0;\n\t  v2[v_offset + 1] = 0;\n\t  var delta = text1_length - text2_length;\n\t  // If the total number of characters is odd, then the front path will collide\n\t  // with the reverse path.\n\t  var front = (delta % 2 != 0);\n\t  // Offsets for start and end of k loop.\n\t  // Prevents mapping of space beyond the grid.\n\t  var k1start = 0;\n\t  var k1end = 0;\n\t  var k2start = 0;\n\t  var k2end = 0;\n\t  for (var d = 0; d < max_d; d++) {\n\t    // Walk the front path one step.\n\t    for (var k1 = -d + k1start; k1 <= d - k1end; k1 += 2) {\n\t      var k1_offset = v_offset + k1;\n\t      var x1;\n\t      if (k1 == -d || (k1 != d && v1[k1_offset - 1] < v1[k1_offset + 1])) {\n\t        x1 = v1[k1_offset + 1];\n\t      } else {\n\t        x1 = v1[k1_offset - 1] + 1;\n\t      }\n\t      var y1 = x1 - k1;\n\t      while (x1 < text1_length && y1 < text2_length &&\n\t             text1.charAt(x1) == text2.charAt(y1)) {\n\t        x1++;\n\t        y1++;\n\t      }\n\t      v1[k1_offset] = x1;\n\t      if (x1 > text1_length) {\n\t        // Ran off the right of the graph.\n\t        k1end += 2;\n\t      } else if (y1 > text2_length) {\n\t        // Ran off the bottom of the graph.\n\t        k1start += 2;\n\t      } else if (front) {\n\t        var k2_offset = v_offset + delta - k1;\n\t        if (k2_offset >= 0 && k2_offset < v_length && v2[k2_offset] != -1) {\n\t          // Mirror x2 onto top-left coordinate system.\n\t          var x2 = text1_length - v2[k2_offset];\n\t          if (x1 >= x2) {\n\t            // Overlap detected.\n\t            return diff_bisectSplit_(text1, text2, x1, y1);\n\t          }\n\t        }\n\t      }\n\t    }\n\n\t    // Walk the reverse path one step.\n\t    for (var k2 = -d + k2start; k2 <= d - k2end; k2 += 2) {\n\t      var k2_offset = v_offset + k2;\n\t      var x2;\n\t      if (k2 == -d || (k2 != d && v2[k2_offset - 1] < v2[k2_offset + 1])) {\n\t        x2 = v2[k2_offset + 1];\n\t      } else {\n\t        x2 = v2[k2_offset - 1] + 1;\n\t      }\n\t      var y2 = x2 - k2;\n\t      while (x2 < text1_length && y2 < text2_length &&\n\t             text1.charAt(text1_length - x2 - 1) ==\n\t             text2.charAt(text2_length - y2 - 1)) {\n\t        x2++;\n\t        y2++;\n\t      }\n\t      v2[k2_offset] = x2;\n\t      if (x2 > text1_length) {\n\t        // Ran off the left of the graph.\n\t        k2end += 2;\n\t      } else if (y2 > text2_length) {\n\t        // Ran off the top of the graph.\n\t        k2start += 2;\n\t      } else if (!front) {\n\t        var k1_offset = v_offset + delta - k2;\n\t        if (k1_offset >= 0 && k1_offset < v_length && v1[k1_offset] != -1) {\n\t          var x1 = v1[k1_offset];\n\t          var y1 = v_offset + x1 - k1_offset;\n\t          // Mirror x2 onto top-left coordinate system.\n\t          x2 = text1_length - x2;\n\t          if (x1 >= x2) {\n\t            // Overlap detected.\n\t            return diff_bisectSplit_(text1, text2, x1, y1);\n\t          }\n\t        }\n\t      }\n\t    }\n\t  }\n\t  // Diff took too long and hit the deadline or\n\t  // number of diffs equals number of characters, no commonality at all.\n\t  return [[DIFF_DELETE, text1], [DIFF_INSERT, text2]];\n\t};\n\n\n\t/**\n\t * Given the location of the 'middle snake', split the diff in two parts\n\t * and recurse.\n\t * @param {string} text1 Old string to be diffed.\n\t * @param {string} text2 New string to be diffed.\n\t * @param {number} x Index of split point in text1.\n\t * @param {number} y Index of split point in text2.\n\t * @return {Array} Array of diff tuples.\n\t */\n\tfunction diff_bisectSplit_(text1, text2, x, y) {\n\t  var text1a = text1.substring(0, x);\n\t  var text2a = text2.substring(0, y);\n\t  var text1b = text1.substring(x);\n\t  var text2b = text2.substring(y);\n\n\t  // Compute both diffs serially.\n\t  var diffs = diff_main(text1a, text2a);\n\t  var diffsb = diff_main(text1b, text2b);\n\n\t  return diffs.concat(diffsb);\n\t};\n\n\n\t/**\n\t * Determine the common prefix of two strings.\n\t * @param {string} text1 First string.\n\t * @param {string} text2 Second string.\n\t * @return {number} The number of characters common to the start of each\n\t *     string.\n\t */\n\tfunction diff_commonPrefix(text1, text2) {\n\t  // Quick check for common null cases.\n\t  if (!text1 || !text2 || text1.charAt(0) != text2.charAt(0)) {\n\t    return 0;\n\t  }\n\t  // Binary search.\n\t  // Performance analysis: http://neil.fraser.name/news/2007/10/09/\n\t  var pointermin = 0;\n\t  var pointermax = Math.min(text1.length, text2.length);\n\t  var pointermid = pointermax;\n\t  var pointerstart = 0;\n\t  while (pointermin < pointermid) {\n\t    if (text1.substring(pointerstart, pointermid) ==\n\t        text2.substring(pointerstart, pointermid)) {\n\t      pointermin = pointermid;\n\t      pointerstart = pointermin;\n\t    } else {\n\t      pointermax = pointermid;\n\t    }\n\t    pointermid = Math.floor((pointermax - pointermin) / 2 + pointermin);\n\t  }\n\t  return pointermid;\n\t};\n\n\n\t/**\n\t * Determine the common suffix of two strings.\n\t * @param {string} text1 First string.\n\t * @param {string} text2 Second string.\n\t * @return {number} The number of characters common to the end of each string.\n\t */\n\tfunction diff_commonSuffix(text1, text2) {\n\t  // Quick check for common null cases.\n\t  if (!text1 || !text2 ||\n\t      text1.charAt(text1.length - 1) != text2.charAt(text2.length - 1)) {\n\t    return 0;\n\t  }\n\t  // Binary search.\n\t  // Performance analysis: http://neil.fraser.name/news/2007/10/09/\n\t  var pointermin = 0;\n\t  var pointermax = Math.min(text1.length, text2.length);\n\t  var pointermid = pointermax;\n\t  var pointerend = 0;\n\t  while (pointermin < pointermid) {\n\t    if (text1.substring(text1.length - pointermid, text1.length - pointerend) ==\n\t        text2.substring(text2.length - pointermid, text2.length - pointerend)) {\n\t      pointermin = pointermid;\n\t      pointerend = pointermin;\n\t    } else {\n\t      pointermax = pointermid;\n\t    }\n\t    pointermid = Math.floor((pointermax - pointermin) / 2 + pointermin);\n\t  }\n\t  return pointermid;\n\t};\n\n\n\t/**\n\t * Do the two texts share a substring which is at least half the length of the\n\t * longer text?\n\t * This speedup can produce non-minimal diffs.\n\t * @param {string} text1 First string.\n\t * @param {string} text2 Second string.\n\t * @return {Array.<string>} Five element Array, containing the prefix of\n\t *     text1, the suffix of text1, the prefix of text2, the suffix of\n\t *     text2 and the common middle.  Or null if there was no match.\n\t */\n\tfunction diff_halfMatch_(text1, text2) {\n\t  var longtext = text1.length > text2.length ? text1 : text2;\n\t  var shorttext = text1.length > text2.length ? text2 : text1;\n\t  if (longtext.length < 4 || shorttext.length * 2 < longtext.length) {\n\t    return null;  // Pointless.\n\t  }\n\n\t  /**\n\t   * Does a substring of shorttext exist within longtext such that the substring\n\t   * is at least half the length of longtext?\n\t   * Closure, but does not reference any external variables.\n\t   * @param {string} longtext Longer string.\n\t   * @param {string} shorttext Shorter string.\n\t   * @param {number} i Start index of quarter length substring within longtext.\n\t   * @return {Array.<string>} Five element Array, containing the prefix of\n\t   *     longtext, the suffix of longtext, the prefix of shorttext, the suffix\n\t   *     of shorttext and the common middle.  Or null if there was no match.\n\t   * @private\n\t   */\n\t  function diff_halfMatchI_(longtext, shorttext, i) {\n\t    // Start with a 1/4 length substring at position i as a seed.\n\t    var seed = longtext.substring(i, i + Math.floor(longtext.length / 4));\n\t    var j = -1;\n\t    var best_common = '';\n\t    var best_longtext_a, best_longtext_b, best_shorttext_a, best_shorttext_b;\n\t    while ((j = shorttext.indexOf(seed, j + 1)) != -1) {\n\t      var prefixLength = diff_commonPrefix(longtext.substring(i),\n\t                                           shorttext.substring(j));\n\t      var suffixLength = diff_commonSuffix(longtext.substring(0, i),\n\t                                           shorttext.substring(0, j));\n\t      if (best_common.length < suffixLength + prefixLength) {\n\t        best_common = shorttext.substring(j - suffixLength, j) +\n\t            shorttext.substring(j, j + prefixLength);\n\t        best_longtext_a = longtext.substring(0, i - suffixLength);\n\t        best_longtext_b = longtext.substring(i + prefixLength);\n\t        best_shorttext_a = shorttext.substring(0, j - suffixLength);\n\t        best_shorttext_b = shorttext.substring(j + prefixLength);\n\t      }\n\t    }\n\t    if (best_common.length * 2 >= longtext.length) {\n\t      return [best_longtext_a, best_longtext_b,\n\t              best_shorttext_a, best_shorttext_b, best_common];\n\t    } else {\n\t      return null;\n\t    }\n\t  }\n\n\t  // First check if the second quarter is the seed for a half-match.\n\t  var hm1 = diff_halfMatchI_(longtext, shorttext,\n\t                             Math.ceil(longtext.length / 4));\n\t  // Check again based on the third quarter.\n\t  var hm2 = diff_halfMatchI_(longtext, shorttext,\n\t                             Math.ceil(longtext.length / 2));\n\t  var hm;\n\t  if (!hm1 && !hm2) {\n\t    return null;\n\t  } else if (!hm2) {\n\t    hm = hm1;\n\t  } else if (!hm1) {\n\t    hm = hm2;\n\t  } else {\n\t    // Both matched.  Select the longest.\n\t    hm = hm1[4].length > hm2[4].length ? hm1 : hm2;\n\t  }\n\n\t  // A half-match was found, sort out the return data.\n\t  var text1_a, text1_b, text2_a, text2_b;\n\t  if (text1.length > text2.length) {\n\t    text1_a = hm[0];\n\t    text1_b = hm[1];\n\t    text2_a = hm[2];\n\t    text2_b = hm[3];\n\t  } else {\n\t    text2_a = hm[0];\n\t    text2_b = hm[1];\n\t    text1_a = hm[2];\n\t    text1_b = hm[3];\n\t  }\n\t  var mid_common = hm[4];\n\t  return [text1_a, text1_b, text2_a, text2_b, mid_common];\n\t};\n\n\n\t/**\n\t * Reorder and merge like edit sections.  Merge equalities.\n\t * Any edit section can move as long as it doesn't cross an equality.\n\t * @param {Array} diffs Array of diff tuples.\n\t */\n\tfunction diff_cleanupMerge(diffs) {\n\t  diffs.push([DIFF_EQUAL, '']);  // Add a dummy entry at the end.\n\t  var pointer = 0;\n\t  var count_delete = 0;\n\t  var count_insert = 0;\n\t  var text_delete = '';\n\t  var text_insert = '';\n\t  var commonlength;\n\t  while (pointer < diffs.length) {\n\t    switch (diffs[pointer][0]) {\n\t      case DIFF_INSERT:\n\t        count_insert++;\n\t        text_insert += diffs[pointer][1];\n\t        pointer++;\n\t        break;\n\t      case DIFF_DELETE:\n\t        count_delete++;\n\t        text_delete += diffs[pointer][1];\n\t        pointer++;\n\t        break;\n\t      case DIFF_EQUAL:\n\t        // Upon reaching an equality, check for prior redundancies.\n\t        if (count_delete + count_insert > 1) {\n\t          if (count_delete !== 0 && count_insert !== 0) {\n\t            // Factor out any common prefixies.\n\t            commonlength = diff_commonPrefix(text_insert, text_delete);\n\t            if (commonlength !== 0) {\n\t              if ((pointer - count_delete - count_insert) > 0 &&\n\t                  diffs[pointer - count_delete - count_insert - 1][0] ==\n\t                  DIFF_EQUAL) {\n\t                diffs[pointer - count_delete - count_insert - 1][1] +=\n\t                    text_insert.substring(0, commonlength);\n\t              } else {\n\t                diffs.splice(0, 0, [DIFF_EQUAL,\n\t                                    text_insert.substring(0, commonlength)]);\n\t                pointer++;\n\t              }\n\t              text_insert = text_insert.substring(commonlength);\n\t              text_delete = text_delete.substring(commonlength);\n\t            }\n\t            // Factor out any common suffixies.\n\t            commonlength = diff_commonSuffix(text_insert, text_delete);\n\t            if (commonlength !== 0) {\n\t              diffs[pointer][1] = text_insert.substring(text_insert.length -\n\t                  commonlength) + diffs[pointer][1];\n\t              text_insert = text_insert.substring(0, text_insert.length -\n\t                  commonlength);\n\t              text_delete = text_delete.substring(0, text_delete.length -\n\t                  commonlength);\n\t            }\n\t          }\n\t          // Delete the offending records and add the merged ones.\n\t          if (count_delete === 0) {\n\t            diffs.splice(pointer - count_insert,\n\t                count_delete + count_insert, [DIFF_INSERT, text_insert]);\n\t          } else if (count_insert === 0) {\n\t            diffs.splice(pointer - count_delete,\n\t                count_delete + count_insert, [DIFF_DELETE, text_delete]);\n\t          } else {\n\t            diffs.splice(pointer - count_delete - count_insert,\n\t                count_delete + count_insert, [DIFF_DELETE, text_delete],\n\t                [DIFF_INSERT, text_insert]);\n\t          }\n\t          pointer = pointer - count_delete - count_insert +\n\t                    (count_delete ? 1 : 0) + (count_insert ? 1 : 0) + 1;\n\t        } else if (pointer !== 0 && diffs[pointer - 1][0] == DIFF_EQUAL) {\n\t          // Merge this equality with the previous one.\n\t          diffs[pointer - 1][1] += diffs[pointer][1];\n\t          diffs.splice(pointer, 1);\n\t        } else {\n\t          pointer++;\n\t        }\n\t        count_insert = 0;\n\t        count_delete = 0;\n\t        text_delete = '';\n\t        text_insert = '';\n\t        break;\n\t    }\n\t  }\n\t  if (diffs[diffs.length - 1][1] === '') {\n\t    diffs.pop();  // Remove the dummy entry at the end.\n\t  }\n\n\t  // Second pass: look for single edits surrounded on both sides by equalities\n\t  // which can be shifted sideways to eliminate an equality.\n\t  // e.g: A<ins>BA</ins>C -> <ins>AB</ins>AC\n\t  var changes = false;\n\t  pointer = 1;\n\t  // Intentionally ignore the first and last element (don't need checking).\n\t  while (pointer < diffs.length - 1) {\n\t    if (diffs[pointer - 1][0] == DIFF_EQUAL &&\n\t        diffs[pointer + 1][0] == DIFF_EQUAL) {\n\t      // This is a single edit surrounded by equalities.\n\t      if (diffs[pointer][1].substring(diffs[pointer][1].length -\n\t          diffs[pointer - 1][1].length) == diffs[pointer - 1][1]) {\n\t        // Shift the edit over the previous equality.\n\t        diffs[pointer][1] = diffs[pointer - 1][1] +\n\t            diffs[pointer][1].substring(0, diffs[pointer][1].length -\n\t                                        diffs[pointer - 1][1].length);\n\t        diffs[pointer + 1][1] = diffs[pointer - 1][1] + diffs[pointer + 1][1];\n\t        diffs.splice(pointer - 1, 1);\n\t        changes = true;\n\t      } else if (diffs[pointer][1].substring(0, diffs[pointer + 1][1].length) ==\n\t          diffs[pointer + 1][1]) {\n\t        // Shift the edit over the next equality.\n\t        diffs[pointer - 1][1] += diffs[pointer + 1][1];\n\t        diffs[pointer][1] =\n\t            diffs[pointer][1].substring(diffs[pointer + 1][1].length) +\n\t            diffs[pointer + 1][1];\n\t        diffs.splice(pointer + 1, 1);\n\t        changes = true;\n\t      }\n\t    }\n\t    pointer++;\n\t  }\n\t  // If shifts were made, the diff needs reordering and another shift sweep.\n\t  if (changes) {\n\t    diff_cleanupMerge(diffs);\n\t  }\n\t};\n\n\n\tvar diff = diff_main;\n\tdiff.INSERT = DIFF_INSERT;\n\tdiff.DELETE = DIFF_DELETE;\n\tdiff.EQUAL = DIFF_EQUAL;\n\n\tmodule.exports = diff;\n\n\t/*\n\t * Modify a diff such that the cursor position points to the start of a change:\n\t * E.g.\n\t *   cursor_normalize_diff([[DIFF_EQUAL, 'abc']], 1)\n\t *     => [1, [[DIFF_EQUAL, 'a'], [DIFF_EQUAL, 'bc']]]\n\t *   cursor_normalize_diff([[DIFF_INSERT, 'new'], [DIFF_DELETE, 'xyz']], 2)\n\t *     => [2, [[DIFF_INSERT, 'new'], [DIFF_DELETE, 'xy'], [DIFF_DELETE, 'z']]]\n\t *\n\t * @param {Array} diffs Array of diff tuples\n\t * @param {Int} cursor_pos Suggested edit position. Must not be out of bounds!\n\t * @return {Array} A tuple [cursor location in the modified diff, modified diff]\n\t */\n\tfunction cursor_normalize_diff (diffs, cursor_pos) {\n\t  if (cursor_pos === 0) {\n\t    return [DIFF_EQUAL, diffs];\n\t  }\n\t  for (var current_pos = 0, i = 0; i < diffs.length; i++) {\n\t    var d = diffs[i];\n\t    if (d[0] === DIFF_DELETE || d[0] === DIFF_EQUAL) {\n\t      var next_pos = current_pos + d[1].length;\n\t      if (cursor_pos === next_pos) {\n\t        return [i + 1, diffs];\n\t      } else if (cursor_pos < next_pos) {\n\t        // copy to prevent side effects\n\t        diffs = diffs.slice();\n\t        // split d into two diff changes\n\t        var split_pos = cursor_pos - current_pos;\n\t        var d_left = [d[0], d[1].slice(0, split_pos)];\n\t        var d_right = [d[0], d[1].slice(split_pos)];\n\t        diffs.splice(i, 1, d_left, d_right);\n\t        return [i + 1, diffs];\n\t      } else {\n\t        current_pos = next_pos;\n\t      }\n\t    }\n\t  }\n\t  throw new Error('cursor_pos is out of bounds!')\n\t}\n\n\t/*\n\t * Modify a diff such that the edit position is \"shifted\" to the proposed edit location (cursor_position).\n\t *\n\t * Case 1)\n\t *   Check if a naive shift is possible:\n\t *     [0, X], [ 1, Y] -> [ 1, Y], [0, X]    (if X + Y === Y + X)\n\t *     [0, X], [-1, Y] -> [-1, Y], [0, X]    (if X + Y === Y + X) - holds same result\n\t * Case 2)\n\t *   Check if the following shifts are possible:\n\t *     [0, 'pre'], [ 1, 'prefix'] -> [ 1, 'pre'], [0, 'pre'], [ 1, 'fix']\n\t *     [0, 'pre'], [-1, 'prefix'] -> [-1, 'pre'], [0, 'pre'], [-1, 'fix']\n\t *         ^            ^\n\t *         d          d_next\n\t *\n\t * @param {Array} diffs Array of diff tuples\n\t * @param {Int} cursor_pos Suggested edit position. Must not be out of bounds!\n\t * @return {Array} Array of diff tuples\n\t */\n\tfunction fix_cursor (diffs, cursor_pos) {\n\t  var norm = cursor_normalize_diff(diffs, cursor_pos);\n\t  var ndiffs = norm[1];\n\t  var cursor_pointer = norm[0];\n\t  var d = ndiffs[cursor_pointer];\n\t  var d_next = ndiffs[cursor_pointer + 1];\n\n\t  if (d == null) {\n\t    // Text was deleted from end of original string,\n\t    // cursor is now out of bounds in new string\n\t    return diffs;\n\t  } else if (d[0] !== DIFF_EQUAL) {\n\t    // A modification happened at the cursor location.\n\t    // This is the expected outcome, so we can return the original diff.\n\t    return diffs;\n\t  } else {\n\t    if (d_next != null && d[1] + d_next[1] === d_next[1] + d[1]) {\n\t      // Case 1)\n\t      // It is possible to perform a naive shift\n\t      ndiffs.splice(cursor_pointer, 2, d_next, d)\n\t      return merge_tuples(ndiffs, cursor_pointer, 2)\n\t    } else if (d_next != null && d_next[1].indexOf(d[1]) === 0) {\n\t      // Case 2)\n\t      // d[1] is a prefix of d_next[1]\n\t      // We can assume that d_next[0] !== 0, since d[0] === 0\n\t      // Shift edit locations..\n\t      ndiffs.splice(cursor_pointer, 2, [d_next[0], d[1]], [0, d[1]]);\n\t      var suffix = d_next[1].slice(d[1].length);\n\t      if (suffix.length > 0) {\n\t        ndiffs.splice(cursor_pointer + 2, 0, [d_next[0], suffix]);\n\t      }\n\t      return merge_tuples(ndiffs, cursor_pointer, 3)\n\t    } else {\n\t      // Not possible to perform any modification\n\t      return diffs;\n\t    }\n\t  }\n\n\t}\n\n\t/*\n\t * Try to merge tuples with their neigbors in a given range.\n\t * E.g. [0, 'a'], [0, 'b'] -> [0, 'ab']\n\t *\n\t * @param {Array} diffs Array of diff tuples.\n\t * @param {Int} start Position of the first element to merge (diffs[start] is also merged with diffs[start - 1]).\n\t * @param {Int} length Number of consecutive elements to check.\n\t * @return {Array} Array of merged diff tuples.\n\t */\n\tfunction merge_tuples (diffs, start, length) {\n\t  // Check from (start-1) to (start+length).\n\t  for (var i = start + length - 1; i >= 0 && i >= start - 1; i--) {\n\t    if (i + 1 < diffs.length) {\n\t      var left_d = diffs[i];\n\t      var right_d = diffs[i+1];\n\t      if (left_d[0] === right_d[1]) {\n\t        diffs.splice(i, 2, [left_d[0], left_d[1] + right_d[1]]);\n\t      }\n\t    }\n\t  }\n\t  return diffs;\n\t}\n\n\n/***/ },\n/* 22 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar pSlice = Array.prototype.slice;\n\tvar objectKeys = __webpack_require__(23);\n\tvar isArguments = __webpack_require__(24);\n\n\tvar deepEqual = module.exports = function (actual, expected, opts) {\n\t  if (!opts) opts = {};\n\t  // 7.1. All identical values are equivalent, as determined by ===.\n\t  if (actual === expected) {\n\t    return true;\n\n\t  } else if (actual instanceof Date && expected instanceof Date) {\n\t    return actual.getTime() === expected.getTime();\n\n\t  // 7.3. Other pairs that do not both pass typeof value == 'object',\n\t  // equivalence is determined by ==.\n\t  } else if (!actual || !expected || typeof actual != 'object' && typeof expected != 'object') {\n\t    return opts.strict ? actual === expected : actual == expected;\n\n\t  // 7.4. For all other Object pairs, including Array objects, equivalence is\n\t  // determined by having the same number of owned properties (as verified\n\t  // with Object.prototype.hasOwnProperty.call), the same set of keys\n\t  // (although not necessarily the same order), equivalent values for every\n\t  // corresponding key, and an identical 'prototype' property. Note: this\n\t  // accounts for both named and indexed properties on Arrays.\n\t  } else {\n\t    return objEquiv(actual, expected, opts);\n\t  }\n\t}\n\n\tfunction isUndefinedOrNull(value) {\n\t  return value === null || value === undefined;\n\t}\n\n\tfunction isBuffer (x) {\n\t  if (!x || typeof x !== 'object' || typeof x.length !== 'number') return false;\n\t  if (typeof x.copy !== 'function' || typeof x.slice !== 'function') {\n\t    return false;\n\t  }\n\t  if (x.length > 0 && typeof x[0] !== 'number') return false;\n\t  return true;\n\t}\n\n\tfunction objEquiv(a, b, opts) {\n\t  var i, key;\n\t  if (isUndefinedOrNull(a) || isUndefinedOrNull(b))\n\t    return false;\n\t  // an identical 'prototype' property.\n\t  if (a.prototype !== b.prototype) return false;\n\t  //~~~I've managed to break Object.keys through screwy arguments passing.\n\t  //   Converting to array solves the problem.\n\t  if (isArguments(a)) {\n\t    if (!isArguments(b)) {\n\t      return false;\n\t    }\n\t    a = pSlice.call(a);\n\t    b = pSlice.call(b);\n\t    return deepEqual(a, b, opts);\n\t  }\n\t  if (isBuffer(a)) {\n\t    if (!isBuffer(b)) {\n\t      return false;\n\t    }\n\t    if (a.length !== b.length) return false;\n\t    for (i = 0; i < a.length; i++) {\n\t      if (a[i] !== b[i]) return false;\n\t    }\n\t    return true;\n\t  }\n\t  try {\n\t    var ka = objectKeys(a),\n\t        kb = objectKeys(b);\n\t  } catch (e) {//happens when one is a string literal and the other isn't\n\t    return false;\n\t  }\n\t  // having the same number of owned properties (keys incorporates\n\t  // hasOwnProperty)\n\t  if (ka.length != kb.length)\n\t    return false;\n\t  //the same set of keys (although not necessarily the same order),\n\t  ka.sort();\n\t  kb.sort();\n\t  //~~~cheap key test\n\t  for (i = ka.length - 1; i >= 0; i--) {\n\t    if (ka[i] != kb[i])\n\t      return false;\n\t  }\n\t  //equivalent values for every corresponding key, and\n\t  //~~~possibly expensive deep test\n\t  for (i = ka.length - 1; i >= 0; i--) {\n\t    key = ka[i];\n\t    if (!deepEqual(a[key], b[key], opts)) return false;\n\t  }\n\t  return typeof a === typeof b;\n\t}\n\n\n/***/ },\n/* 23 */\n/***/ function(module, exports) {\n\n\texports = module.exports = typeof Object.keys === 'function'\n\t  ? Object.keys : shim;\n\n\texports.shim = shim;\n\tfunction shim (obj) {\n\t  var keys = [];\n\t  for (var key in obj) keys.push(key);\n\t  return keys;\n\t}\n\n\n/***/ },\n/* 24 */\n/***/ function(module, exports) {\n\n\tvar supportsArgumentsClass = (function(){\n\t  return Object.prototype.toString.call(arguments)\n\t})() == '[object Arguments]';\n\n\texports = module.exports = supportsArgumentsClass ? supported : unsupported;\n\n\texports.supported = supported;\n\tfunction supported(object) {\n\t  return Object.prototype.toString.call(object) == '[object Arguments]';\n\t};\n\n\texports.unsupported = unsupported;\n\tfunction unsupported(object){\n\t  return object &&\n\t    typeof object == 'object' &&\n\t    typeof object.length == 'number' &&\n\t    Object.prototype.hasOwnProperty.call(object, 'callee') &&\n\t    !Object.prototype.propertyIsEnumerable.call(object, 'callee') ||\n\t    false;\n\t};\n\n\n/***/ },\n/* 25 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\n\tvar hasOwn = Object.prototype.hasOwnProperty;\n\tvar toStr = Object.prototype.toString;\n\n\tvar isArray = function isArray(arr) {\n\t\tif (typeof Array.isArray === 'function') {\n\t\t\treturn Array.isArray(arr);\n\t\t}\n\n\t\treturn toStr.call(arr) === '[object Array]';\n\t};\n\n\tvar isPlainObject = function isPlainObject(obj) {\n\t\tif (!obj || toStr.call(obj) !== '[object Object]') {\n\t\t\treturn false;\n\t\t}\n\n\t\tvar hasOwnConstructor = hasOwn.call(obj, 'constructor');\n\t\tvar hasIsPrototypeOf = obj.constructor && obj.constructor.prototype && hasOwn.call(obj.constructor.prototype, 'isPrototypeOf');\n\t\t// Not own constructor property must be Object\n\t\tif (obj.constructor && !hasOwnConstructor && !hasIsPrototypeOf) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// Own properties are enumerated firstly, so to speed up,\n\t\t// if last one is own, then all properties are own.\n\t\tvar key;\n\t\tfor (key in obj) {/**/}\n\n\t\treturn typeof key === 'undefined' || hasOwn.call(obj, key);\n\t};\n\n\tmodule.exports = function extend() {\n\t\tvar options, name, src, copy, copyIsArray, clone,\n\t\t\ttarget = arguments[0],\n\t\t\ti = 1,\n\t\t\tlength = arguments.length,\n\t\t\tdeep = false;\n\n\t\t// Handle a deep copy situation\n\t\tif (typeof target === 'boolean') {\n\t\t\tdeep = target;\n\t\t\ttarget = arguments[1] || {};\n\t\t\t// skip the boolean and the target\n\t\t\ti = 2;\n\t\t} else if ((typeof target !== 'object' && typeof target !== 'function') || target == null) {\n\t\t\ttarget = {};\n\t\t}\n\n\t\tfor (; i < length; ++i) {\n\t\t\toptions = arguments[i];\n\t\t\t// Only deal with non-null/undefined values\n\t\t\tif (options != null) {\n\t\t\t\t// Extend the base object\n\t\t\t\tfor (name in options) {\n\t\t\t\t\tsrc = target[name];\n\t\t\t\t\tcopy = options[name];\n\n\t\t\t\t\t// Prevent never-ending loop\n\t\t\t\t\tif (target !== copy) {\n\t\t\t\t\t\t// Recurse if we're merging plain objects or arrays\n\t\t\t\t\t\tif (deep && copy && (isPlainObject(copy) || (copyIsArray = isArray(copy)))) {\n\t\t\t\t\t\t\tif (copyIsArray) {\n\t\t\t\t\t\t\t\tcopyIsArray = false;\n\t\t\t\t\t\t\t\tclone = src && isArray(src) ? src : [];\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tclone = src && isPlainObject(src) ? src : {};\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// Never move original objects, clone them\n\t\t\t\t\t\t\ttarget[name] = extend(deep, clone, copy);\n\n\t\t\t\t\t\t// Don't bring in undefined values\n\t\t\t\t\t\t} else if (typeof copy !== 'undefined') {\n\t\t\t\t\t\t\ttarget[name] = copy;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Return the modified object\n\t\treturn target;\n\t};\n\n\n\n/***/ },\n/* 26 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar equal = __webpack_require__(22);\n\tvar extend = __webpack_require__(25);\n\n\n\tvar lib = {\n\t  attributes: {\n\t    compose: function (a, b, keepNull) {\n\t      if (typeof a !== 'object') a = {};\n\t      if (typeof b !== 'object') b = {};\n\t      var attributes = extend(true, {}, b);\n\t      if (!keepNull) {\n\t        attributes = Object.keys(attributes).reduce(function (copy, key) {\n\t          if (attributes[key] != null) {\n\t            copy[key] = attributes[key];\n\t          }\n\t          return copy;\n\t        }, {});\n\t      }\n\t      for (var key in a) {\n\t        if (a[key] !== undefined && b[key] === undefined) {\n\t          attributes[key] = a[key];\n\t        }\n\t      }\n\t      return Object.keys(attributes).length > 0 ? attributes : undefined;\n\t    },\n\n\t    diff: function(a, b) {\n\t      if (typeof a !== 'object') a = {};\n\t      if (typeof b !== 'object') b = {};\n\t      var attributes = Object.keys(a).concat(Object.keys(b)).reduce(function (attributes, key) {\n\t        if (!equal(a[key], b[key])) {\n\t          attributes[key] = b[key] === undefined ? null : b[key];\n\t        }\n\t        return attributes;\n\t      }, {});\n\t      return Object.keys(attributes).length > 0 ? attributes : undefined;\n\t    },\n\n\t    transform: function (a, b, priority) {\n\t      if (typeof a !== 'object') return b;\n\t      if (typeof b !== 'object') return undefined;\n\t      if (!priority) return b;  // b simply overwrites us without priority\n\t      var attributes = Object.keys(b).reduce(function (attributes, key) {\n\t        if (a[key] === undefined) attributes[key] = b[key];  // null is a valid value\n\t        return attributes;\n\t      }, {});\n\t      return Object.keys(attributes).length > 0 ? attributes : undefined;\n\t    }\n\t  },\n\n\t  iterator: function (ops) {\n\t    return new Iterator(ops);\n\t  },\n\n\t  length: function (op) {\n\t    if (typeof op['delete'] === 'number') {\n\t      return op['delete'];\n\t    } else if (typeof op.retain === 'number') {\n\t      return op.retain;\n\t    } else {\n\t      return typeof op.insert === 'string' ? op.insert.length : 1;\n\t    }\n\t  }\n\t};\n\n\n\tfunction Iterator(ops) {\n\t  this.ops = ops;\n\t  this.index = 0;\n\t  this.offset = 0;\n\t};\n\n\tIterator.prototype.hasNext = function () {\n\t  return this.peekLength() < Infinity;\n\t};\n\n\tIterator.prototype.next = function (length) {\n\t  if (!length) length = Infinity;\n\t  var nextOp = this.ops[this.index];\n\t  if (nextOp) {\n\t    var offset = this.offset;\n\t    var opLength = lib.length(nextOp)\n\t    if (length >= opLength - offset) {\n\t      length = opLength - offset;\n\t      this.index += 1;\n\t      this.offset = 0;\n\t    } else {\n\t      this.offset += length;\n\t    }\n\t    if (typeof nextOp['delete'] === 'number') {\n\t      return { 'delete': length };\n\t    } else {\n\t      var retOp = {};\n\t      if (nextOp.attributes) {\n\t        retOp.attributes = nextOp.attributes;\n\t      }\n\t      if (typeof nextOp.retain === 'number') {\n\t        retOp.retain = length;\n\t      } else if (typeof nextOp.insert === 'string') {\n\t        retOp.insert = nextOp.insert.substr(offset, length);\n\t      } else {\n\t        // offset should === 0, length should === 1\n\t        retOp.insert = nextOp.insert;\n\t      }\n\t      return retOp;\n\t    }\n\t  } else {\n\t    return { retain: Infinity };\n\t  }\n\t};\n\n\tIterator.prototype.peek = function () {\n\t  return this.ops[this.index];\n\t};\n\n\tIterator.prototype.peekLength = function () {\n\t  if (this.ops[this.index]) {\n\t    // Should never return 0 if our index is being managed correctly\n\t    return lib.length(this.ops[this.index]) - this.offset;\n\t  } else {\n\t    return Infinity;\n\t  }\n\t};\n\n\tIterator.prototype.peekType = function () {\n\t  if (this.ops[this.index]) {\n\t    if (typeof this.ops[this.index]['delete'] === 'number') {\n\t      return 'delete';\n\t    } else if (typeof this.ops[this.index].retain === 'number') {\n\t      return 'retain';\n\t    } else {\n\t      return 'insert';\n\t    }\n\t  }\n\t  return 'retain';\n\t};\n\n\n\tmodule.exports = lib;\n\n\n/***/ },\n/* 27 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\n\tvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\n\tvar _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"]) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); } }; }();\n\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\n\tvar _quillDelta = __webpack_require__(20);\n\n\tvar _quillDelta2 = _interopRequireDefault(_quillDelta);\n\n\tvar _op = __webpack_require__(26);\n\n\tvar _op2 = _interopRequireDefault(_op);\n\n\tvar _parchment = __webpack_require__(2);\n\n\tvar _parchment2 = _interopRequireDefault(_parchment);\n\n\tvar _code = __webpack_require__(28);\n\n\tvar _code2 = _interopRequireDefault(_code);\n\n\tvar _cursor = __webpack_require__(34);\n\n\tvar _cursor2 = _interopRequireDefault(_cursor);\n\n\tvar _block = __webpack_require__(29);\n\n\tvar _block2 = _interopRequireDefault(_block);\n\n\tvar _clone = __webpack_require__(38);\n\n\tvar _clone2 = _interopRequireDefault(_clone);\n\n\tvar _deepEqual = __webpack_require__(22);\n\n\tvar _deepEqual2 = _interopRequireDefault(_deepEqual);\n\n\tvar _extend = __webpack_require__(25);\n\n\tvar _extend2 = _interopRequireDefault(_extend);\n\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n\tfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n\tvar Editor = function () {\n\t  function Editor(scroll) {\n\t    _classCallCheck(this, Editor);\n\n\t    this.scroll = scroll;\n\t    this.delta = this.getDelta();\n\t  }\n\n\t  _createClass(Editor, [{\n\t    key: 'applyDelta',\n\t    value: function applyDelta(delta) {\n\t      var _this = this;\n\n\t      var consumeNextNewline = false;\n\t      this.scroll.update();\n\t      var scrollLength = this.scroll.length();\n\t      this.scroll.batch = true;\n\t      delta = normalizeDelta(delta);\n\t      delta.reduce(function (index, op) {\n\t        var length = op.retain || op.delete || op.insert.length || 1;\n\t        var attributes = op.attributes || {};\n\t        if (op.insert != null) {\n\t          if (typeof op.insert === 'string') {\n\t            var text = op.insert;\n\t            if (text.endsWith('\\n') && consumeNextNewline) {\n\t              consumeNextNewline = false;\n\t              text = text.slice(0, -1);\n\t            }\n\t            if (index >= scrollLength && !text.endsWith('\\n')) {\n\t              consumeNextNewline = true;\n\t            }\n\t            _this.scroll.insertAt(index, text);\n\n\t            var _scroll$line = _this.scroll.line(index),\n\t                _scroll$line2 = _slicedToArray(_scroll$line, 2),\n\t                line = _scroll$line2[0],\n\t                offset = _scroll$line2[1];\n\n\t            var formats = (0, _extend2.default)({}, (0, _block.bubbleFormats)(line));\n\t            if (line instanceof _block2.default) {\n\t              var _line$descendant = line.descendant(_parchment2.default.Leaf, offset),\n\t                  _line$descendant2 = _slicedToArray(_line$descendant, 1),\n\t                  leaf = _line$descendant2[0];\n\n\t              formats = (0, _extend2.default)(formats, (0, _block.bubbleFormats)(leaf));\n\t            }\n\t            attributes = _op2.default.attributes.diff(formats, attributes) || {};\n\t          } else if (_typeof(op.insert) === 'object') {\n\t            var key = Object.keys(op.insert)[0]; // There should only be one key\n\t            if (key == null) return index;\n\t            _this.scroll.insertAt(index, key, op.insert[key]);\n\t          }\n\t          scrollLength += length;\n\t        }\n\t        Object.keys(attributes).forEach(function (name) {\n\t          _this.scroll.formatAt(index, length, name, attributes[name]);\n\t        });\n\t        return index + length;\n\t      }, 0);\n\t      delta.reduce(function (index, op) {\n\t        if (typeof op.delete === 'number') {\n\t          _this.scroll.deleteAt(index, op.delete);\n\t          return index;\n\t        }\n\t        return index + (op.retain || op.insert.length || 1);\n\t      }, 0);\n\t      this.scroll.batch = false;\n\t      this.scroll.optimize();\n\t      return this.update(delta);\n\t    }\n\t  }, {\n\t    key: 'deleteText',\n\t    value: function deleteText(index, length) {\n\t      this.scroll.deleteAt(index, length);\n\t      return this.update(new _quillDelta2.default().retain(index).delete(length));\n\t    }\n\t  }, {\n\t    key: 'formatLine',\n\t    value: function formatLine(index, length) {\n\t      var _this2 = this;\n\n\t      var formats = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n\t      this.scroll.update();\n\t      Object.keys(formats).forEach(function (format) {\n\t        var lines = _this2.scroll.lines(index, Math.max(length, 1));\n\t        var lengthRemaining = length;\n\t        lines.forEach(function (line) {\n\t          var lineLength = line.length();\n\t          if (!(line instanceof _code2.default)) {\n\t            line.format(format, formats[format]);\n\t          } else {\n\t            var codeIndex = index - line.offset(_this2.scroll);\n\t            var codeLength = line.newlineIndex(codeIndex + lengthRemaining) - codeIndex + 1;\n\t            line.formatAt(codeIndex, codeLength, format, formats[format]);\n\t          }\n\t          lengthRemaining -= lineLength;\n\t        });\n\t      });\n\t      this.scroll.optimize();\n\t      return this.update(new _quillDelta2.default().retain(index).retain(length, (0, _clone2.default)(formats)));\n\t    }\n\t  }, {\n\t    key: 'formatText',\n\t    value: function formatText(index, length) {\n\t      var _this3 = this;\n\n\t      var formats = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n\t      Object.keys(formats).forEach(function (format) {\n\t        _this3.scroll.formatAt(index, length, format, formats[format]);\n\t      });\n\t      return this.update(new _quillDelta2.default().retain(index).retain(length, (0, _clone2.default)(formats)));\n\t    }\n\t  }, {\n\t    key: 'getContents',\n\t    value: function getContents(index, length) {\n\t      return this.delta.slice(index, index + length);\n\t    }\n\t  }, {\n\t    key: 'getDelta',\n\t    value: function getDelta() {\n\t      return this.scroll.lines().reduce(function (delta, line) {\n\t        return delta.concat(line.delta());\n\t      }, new _quillDelta2.default());\n\t    }\n\t  }, {\n\t    key: 'getFormat',\n\t    value: function getFormat(index) {\n\t      var length = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n\n\t      var lines = [],\n\t          leaves = [];\n\t      if (length === 0) {\n\t        this.scroll.path(index).forEach(function (path) {\n\t          var _path = _slicedToArray(path, 1),\n\t              blot = _path[0];\n\n\t          if (blot instanceof _block2.default) {\n\t            lines.push(blot);\n\t          } else if (blot instanceof _parchment2.default.Leaf) {\n\t            leaves.push(blot);\n\t          }\n\t        });\n\t      } else {\n\t        lines = this.scroll.lines(index, length);\n\t        leaves = this.scroll.descendants(_parchment2.default.Leaf, index, length);\n\t      }\n\t      var formatsArr = [lines, leaves].map(function (blots) {\n\t        if (blots.length === 0) return {};\n\t        var formats = (0, _block.bubbleFormats)(blots.shift());\n\t        while (Object.keys(formats).length > 0) {\n\t          var blot = blots.shift();\n\t          if (blot == null) return formats;\n\t          formats = combineFormats((0, _block.bubbleFormats)(blot), formats);\n\t        }\n\t        return formats;\n\t      });\n\t      return _extend2.default.apply(_extend2.default, formatsArr);\n\t    }\n\t  }, {\n\t    key: 'getText',\n\t    value: function getText(index, length) {\n\t      return this.getContents(index, length).filter(function (op) {\n\t        return typeof op.insert === 'string';\n\t      }).map(function (op) {\n\t        return op.insert;\n\t      }).join('');\n\t    }\n\t  }, {\n\t    key: 'insertEmbed',\n\t    value: function insertEmbed(index, embed, value) {\n\t      this.scroll.insertAt(index, embed, value);\n\t      return this.update(new _quillDelta2.default().retain(index).insert(_defineProperty({}, embed, value)));\n\t    }\n\t  }, {\n\t    key: 'insertText',\n\t    value: function insertText(index, text) {\n\t      var _this4 = this;\n\n\t      var formats = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n\t      text = text.replace(/\\r\\n/g, '\\n').replace(/\\r/g, '\\n');\n\t      this.scroll.insertAt(index, text);\n\t      Object.keys(formats).forEach(function (format) {\n\t        _this4.scroll.formatAt(index, text.length, format, formats[format]);\n\t      });\n\t      return this.update(new _quillDelta2.default().retain(index).insert(text, (0, _clone2.default)(formats)));\n\t    }\n\t  }, {\n\t    key: 'isBlank',\n\t    value: function isBlank() {\n\t      if (this.scroll.children.length == 0) return true;\n\t      if (this.scroll.children.length > 1) return false;\n\t      var child = this.scroll.children.head;\n\t      return child.length() <= 1 && Object.keys(child.formats()).length == 0;\n\t    }\n\t  }, {\n\t    key: 'removeFormat',\n\t    value: function removeFormat(index, length) {\n\t      var text = this.getText(index, length);\n\n\t      var _scroll$line3 = this.scroll.line(index + length),\n\t          _scroll$line4 = _slicedToArray(_scroll$line3, 2),\n\t          line = _scroll$line4[0],\n\t          offset = _scroll$line4[1];\n\n\t      var suffixLength = 0,\n\t          suffix = new _quillDelta2.default();\n\t      if (line != null) {\n\t        if (!(line instanceof _code2.default)) {\n\t          suffixLength = line.length() - offset;\n\t        } else {\n\t          suffixLength = line.newlineIndex(offset) - offset + 1;\n\t        }\n\t        suffix = line.delta().slice(offset, offset + suffixLength - 1).insert('\\n');\n\t      }\n\t      var contents = this.getContents(index, length + suffixLength);\n\t      var diff = contents.diff(new _quillDelta2.default().insert(text).concat(suffix));\n\t      var delta = new _quillDelta2.default().retain(index).concat(diff);\n\t      return this.applyDelta(delta);\n\t    }\n\t  }, {\n\t    key: 'update',\n\t    value: function update(change) {\n\t      var _this5 = this;\n\n\t      var mutations = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n\t      var cursorIndex = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : undefined;\n\n\t      var oldDelta = this.delta;\n\t      if (mutations.length === 1 && mutations[0].type === 'characterData' && _parchment2.default.find(mutations[0].target)) {\n\t        (function () {\n\t          // Optimization for character changes\n\t          var textBlot = _parchment2.default.find(mutations[0].target);\n\t          var formats = (0, _block.bubbleFormats)(textBlot);\n\t          var index = textBlot.offset(_this5.scroll);\n\t          var oldValue = mutations[0].oldValue.replace(_cursor2.default.CONTENTS, '');\n\t          var oldText = new _quillDelta2.default().insert(oldValue);\n\t          var newText = new _quillDelta2.default().insert(textBlot.value());\n\t          var diffDelta = new _quillDelta2.default().retain(index).concat(oldText.diff(newText, cursorIndex));\n\t          change = diffDelta.reduce(function (delta, op) {\n\t            if (op.insert) {\n\t              return delta.insert(op.insert, formats);\n\t            } else {\n\t              return delta.push(op);\n\t            }\n\t          }, new _quillDelta2.default());\n\t          _this5.delta = oldDelta.compose(change);\n\t        })();\n\t      } else {\n\t        this.delta = this.getDelta();\n\t        if (!change || !(0, _deepEqual2.default)(oldDelta.compose(change), this.delta)) {\n\t          change = oldDelta.diff(this.delta, cursorIndex);\n\t        }\n\t      }\n\t      return change;\n\t    }\n\t  }]);\n\n\t  return Editor;\n\t}();\n\n\tfunction combineFormats(formats, combined) {\n\t  return Object.keys(combined).reduce(function (merged, name) {\n\t    if (formats[name] == null) return merged;\n\t    if (combined[name] === formats[name]) {\n\t      merged[name] = combined[name];\n\t    } else if (Array.isArray(combined[name])) {\n\t      if (combined[name].indexOf(formats[name]) < 0) {\n\t        merged[name] = combined[name].concat([formats[name]]);\n\t      }\n\t    } else {\n\t      merged[name] = [combined[name], formats[name]];\n\t    }\n\t    return merged;\n\t  }, {});\n\t}\n\n\tfunction normalizeDelta(delta) {\n\t  return delta.reduce(function (delta, op) {\n\t    if (op.insert === 1) {\n\t      var attributes = (0, _clone2.default)(op.attributes);\n\t      delete attributes['image'];\n\t      return delta.insert({ image: op.attributes.image }, attributes);\n\t    }\n\t    if (op.attributes != null && (op.attributes.list === true || op.attributes.bullet === true)) {\n\t      op = (0, _clone2.default)(op);\n\t      if (op.attributes.list) {\n\t        op.attributes.list = 'ordered';\n\t      } else {\n\t        op.attributes.list = 'bullet';\n\t        delete op.attributes.bullet;\n\t      }\n\t    }\n\t    if (typeof op.insert === 'string') {\n\t      var text = op.insert.replace(/\\r\\n/g, '\\n').replace(/\\r/g, '\\n');\n\t      return delta.insert(text, op.attributes);\n\t    }\n\t    return delta.push(op);\n\t  }, new _quillDelta2.default());\n\t}\n\n\texports.default = Editor;\n\n/***/ },\n/* 28 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\texports.default = exports.Code = undefined;\n\n\tvar _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"]) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); } }; }();\n\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\n\tvar _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if (\"value\" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };\n\n\tvar _quillDelta = __webpack_require__(20);\n\n\tvar _quillDelta2 = _interopRequireDefault(_quillDelta);\n\n\tvar _parchment = __webpack_require__(2);\n\n\tvar _parchment2 = _interopRequireDefault(_parchment);\n\n\tvar _block = __webpack_require__(29);\n\n\tvar _block2 = _interopRequireDefault(_block);\n\n\tvar _inline = __webpack_require__(32);\n\n\tvar _inline2 = _interopRequireDefault(_inline);\n\n\tvar _text = __webpack_require__(33);\n\n\tvar _text2 = _interopRequireDefault(_text);\n\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\n\tvar Code = function (_Inline) {\n\t  _inherits(Code, _Inline);\n\n\t  function Code() {\n\t    _classCallCheck(this, Code);\n\n\t    return _possibleConstructorReturn(this, (Code.__proto__ || Object.getPrototypeOf(Code)).apply(this, arguments));\n\t  }\n\n\t  return Code;\n\t}(_inline2.default);\n\n\tCode.blotName = 'code';\n\tCode.tagName = 'CODE';\n\n\tvar CodeBlock = function (_Block) {\n\t  _inherits(CodeBlock, _Block);\n\n\t  function CodeBlock() {\n\t    _classCallCheck(this, CodeBlock);\n\n\t    return _possibleConstructorReturn(this, (CodeBlock.__proto__ || Object.getPrototypeOf(CodeBlock)).apply(this, arguments));\n\t  }\n\n\t  _createClass(CodeBlock, [{\n\t    key: 'delta',\n\t    value: function delta() {\n\t      var _this3 = this;\n\n\t      var text = this.domNode.textContent;\n\t      if (text.endsWith('\\n')) {\n\t        // Should always be true\n\t        text = text.slice(0, -1);\n\t      }\n\t      return text.split('\\n').reduce(function (delta, frag) {\n\t        return delta.insert(frag).insert('\\n', _this3.formats());\n\t      }, new _quillDelta2.default());\n\t    }\n\t  }, {\n\t    key: 'format',\n\t    value: function format(name, value) {\n\t      if (name === this.statics.blotName && value) return;\n\n\t      var _descendant = this.descendant(_text2.default, this.length() - 1),\n\t          _descendant2 = _slicedToArray(_descendant, 1),\n\t          text = _descendant2[0];\n\n\t      if (text != null) {\n\t        text.deleteAt(text.length() - 1, 1);\n\t      }\n\t      _get(CodeBlock.prototype.__proto__ || Object.getPrototypeOf(CodeBlock.prototype), 'format', this).call(this, name, value);\n\t    }\n\t  }, {\n\t    key: 'formatAt',\n\t    value: function formatAt(index, length, name, value) {\n\t      if (length === 0) return;\n\t      if (_parchment2.default.query(name, _parchment2.default.Scope.BLOCK) == null || name === this.statics.blotName && value === this.statics.formats(this.domNode)) {\n\t        return;\n\t      }\n\t      var nextNewline = this.newlineIndex(index);\n\t      if (nextNewline < 0 || nextNewline >= index + length) return;\n\t      var prevNewline = this.newlineIndex(index, true) + 1;\n\t      var isolateLength = nextNewline - prevNewline + 1;\n\t      var blot = this.isolate(prevNewline, isolateLength);\n\t      var next = blot.next;\n\t      blot.format(name, value);\n\t      if (next instanceof CodeBlock) {\n\t        next.formatAt(0, index - prevNewline + length - isolateLength, name, value);\n\t      }\n\t    }\n\t  }, {\n\t    key: 'insertAt',\n\t    value: function insertAt(index, value, def) {\n\t      if (def != null) return;\n\n\t      var _descendant3 = this.descendant(_text2.default, index),\n\t          _descendant4 = _slicedToArray(_descendant3, 2),\n\t          text = _descendant4[0],\n\t          offset = _descendant4[1];\n\n\t      text.insertAt(offset, value);\n\t    }\n\t  }, {\n\t    key: 'length',\n\t    value: function length() {\n\t      var length = this.domNode.textContent.length;\n\t      if (!this.domNode.textContent.endsWith('\\n')) {\n\t        return length + 1;\n\t      }\n\t      return length;\n\t    }\n\t  }, {\n\t    key: 'newlineIndex',\n\t    value: function newlineIndex(searchIndex) {\n\t      var reverse = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n\t      if (!reverse) {\n\t        var offset = this.domNode.textContent.slice(searchIndex).indexOf('\\n');\n\t        return offset > -1 ? searchIndex + offset : -1;\n\t      } else {\n\t        return this.domNode.textContent.slice(0, searchIndex).lastIndexOf('\\n');\n\t      }\n\t    }\n\t  }, {\n\t    key: 'optimize',\n\t    value: function optimize() {\n\t      if (!this.domNode.textContent.endsWith('\\n')) {\n\t        this.appendChild(_parchment2.default.create('text', '\\n'));\n\t      }\n\t      _get(CodeBlock.prototype.__proto__ || Object.getPrototypeOf(CodeBlock.prototype), 'optimize', this).call(this);\n\t      var next = this.next;\n\t      if (next != null && next.prev === this && next.statics.blotName === this.statics.blotName && this.statics.formats(this.domNode) === next.statics.formats(next.domNode)) {\n\t        next.optimize();\n\t        next.moveChildren(this);\n\t        next.remove();\n\t      }\n\t    }\n\t  }, {\n\t    key: 'replace',\n\t    value: function replace(target) {\n\t      _get(CodeBlock.prototype.__proto__ || Object.getPrototypeOf(CodeBlock.prototype), 'replace', this).call(this, target);\n\t      [].slice.call(this.domNode.querySelectorAll('*')).forEach(function (node) {\n\t        var blot = _parchment2.default.find(node);\n\t        if (blot == null) {\n\t          node.parentNode.removeChild(node);\n\t        } else if (blot instanceof _parchment2.default.Embed) {\n\t          blot.remove();\n\t        } else {\n\t          blot.unwrap();\n\t        }\n\t      });\n\t    }\n\t  }], [{\n\t    key: 'create',\n\t    value: function create(value) {\n\t      var domNode = _get(CodeBlock.__proto__ || Object.getPrototypeOf(CodeBlock), 'create', this).call(this, value);\n\t      domNode.setAttribute('spellcheck', false);\n\t      return domNode;\n\t    }\n\t  }, {\n\t    key: 'formats',\n\t    value: function formats() {\n\t      return true;\n\t    }\n\t  }]);\n\n\t  return CodeBlock;\n\t}(_block2.default);\n\n\tCodeBlock.blotName = 'code-block';\n\tCodeBlock.tagName = 'PRE';\n\tCodeBlock.TAB = '  ';\n\n\texports.Code = Code;\n\texports.default = CodeBlock;\n\n/***/ },\n/* 29 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\texports.default = exports.BlockEmbed = exports.bubbleFormats = undefined;\n\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\n\tvar _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if (\"value\" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };\n\n\tvar _extend = __webpack_require__(25);\n\n\tvar _extend2 = _interopRequireDefault(_extend);\n\n\tvar _quillDelta = __webpack_require__(20);\n\n\tvar _quillDelta2 = _interopRequireDefault(_quillDelta);\n\n\tvar _parchment = __webpack_require__(2);\n\n\tvar _parchment2 = _interopRequireDefault(_parchment);\n\n\tvar _break = __webpack_require__(30);\n\n\tvar _break2 = _interopRequireDefault(_break);\n\n\tvar _embed = __webpack_require__(31);\n\n\tvar _embed2 = _interopRequireDefault(_embed);\n\n\tvar _inline = __webpack_require__(32);\n\n\tvar _inline2 = _interopRequireDefault(_inline);\n\n\tvar _text = __webpack_require__(33);\n\n\tvar _text2 = _interopRequireDefault(_text);\n\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\n\tvar NEWLINE_LENGTH = 1;\n\n\tvar BlockEmbed = function (_Embed) {\n\t  _inherits(BlockEmbed, _Embed);\n\n\t  function BlockEmbed() {\n\t    _classCallCheck(this, BlockEmbed);\n\n\t    return _possibleConstructorReturn(this, (BlockEmbed.__proto__ || Object.getPrototypeOf(BlockEmbed)).apply(this, arguments));\n\t  }\n\n\t  _createClass(BlockEmbed, [{\n\t    key: 'attach',\n\t    value: function attach() {\n\t      _get(BlockEmbed.prototype.__proto__ || Object.getPrototypeOf(BlockEmbed.prototype), 'attach', this).call(this);\n\t      this.attributes = new _parchment2.default.Attributor.Store(this.domNode);\n\t    }\n\t  }, {\n\t    key: 'delta',\n\t    value: function delta() {\n\t      return new _quillDelta2.default().insert(this.value(), (0, _extend2.default)(this.formats(), this.attributes.values()));\n\t    }\n\t  }, {\n\t    key: 'format',\n\t    value: function format(name, value) {\n\t      var attribute = _parchment2.default.query(name, _parchment2.default.Scope.BLOCK_ATTRIBUTE);\n\t      if (attribute != null) {\n\t        this.attributes.attribute(attribute, value);\n\t      }\n\t    }\n\t  }, {\n\t    key: 'formatAt',\n\t    value: function formatAt(index, length, name, value) {\n\t      this.format(name, value);\n\t    }\n\t  }, {\n\t    key: 'insertAt',\n\t    value: function insertAt(index, value, def) {\n\t      if (typeof value === 'string' && value.endsWith('\\n')) {\n\t        var block = _parchment2.default.create(Block.blotName);\n\t        this.parent.insertBefore(block, index === 0 ? this : this.next);\n\t        block.insertAt(0, value.slice(0, -1));\n\t      } else {\n\t        _get(BlockEmbed.prototype.__proto__ || Object.getPrototypeOf(BlockEmbed.prototype), 'insertAt', this).call(this, index, value, def);\n\t      }\n\t    }\n\t  }]);\n\n\t  return BlockEmbed;\n\t}(_embed2.default);\n\n\tBlockEmbed.scope = _parchment2.default.Scope.BLOCK_BLOT;\n\t// It is important for cursor behavior BlockEmbeds use tags that are block level elements\n\n\n\tvar Block = function (_Parchment$Block) {\n\t  _inherits(Block, _Parchment$Block);\n\n\t  function Block(domNode) {\n\t    _classCallCheck(this, Block);\n\n\t    var _this2 = _possibleConstructorReturn(this, (Block.__proto__ || Object.getPrototypeOf(Block)).call(this, domNode));\n\n\t    _this2.cache = {};\n\t    return _this2;\n\t  }\n\n\t  _createClass(Block, [{\n\t    key: 'delta',\n\t    value: function delta() {\n\t      if (this.cache.delta == null) {\n\t        this.cache.delta = this.descendants(_parchment2.default.Leaf).reduce(function (delta, leaf) {\n\t          if (leaf.length() === 0) {\n\t            return delta;\n\t          } else {\n\t            return delta.insert(leaf.value(), bubbleFormats(leaf));\n\t          }\n\t        }, new _quillDelta2.default()).insert('\\n', bubbleFormats(this));\n\t      }\n\t      return this.cache.delta;\n\t    }\n\t  }, {\n\t    key: 'deleteAt',\n\t    value: function deleteAt(index, length) {\n\t      _get(Block.prototype.__proto__ || Object.getPrototypeOf(Block.prototype), 'deleteAt', this).call(this, index, length);\n\t      this.cache = {};\n\t    }\n\t  }, {\n\t    key: 'formatAt',\n\t    value: function formatAt(index, length, name, value) {\n\t      if (length <= 0) return;\n\t      if (_parchment2.default.query(name, _parchment2.default.Scope.BLOCK)) {\n\t        if (index + length === this.length()) {\n\t          this.format(name, value);\n\t        }\n\t      } else {\n\t        _get(Block.prototype.__proto__ || Object.getPrototypeOf(Block.prototype), 'formatAt', this).call(this, index, Math.min(length, this.length() - index - 1), name, value);\n\t      }\n\t      this.cache = {};\n\t    }\n\t  }, {\n\t    key: 'insertAt',\n\t    value: function insertAt(index, value, def) {\n\t      if (def != null) return _get(Block.prototype.__proto__ || Object.getPrototypeOf(Block.prototype), 'insertAt', this).call(this, index, value, def);\n\t      if (value.length === 0) return;\n\t      var lines = value.split('\\n');\n\t      var text = lines.shift();\n\t      if (text.length > 0) {\n\t        if (index < this.length() - 1 || this.children.tail == null) {\n\t          _get(Block.prototype.__proto__ || Object.getPrototypeOf(Block.prototype), 'insertAt', this).call(this, Math.min(index, this.length() - 1), text);\n\t        } else {\n\t          this.children.tail.insertAt(this.children.tail.length(), text);\n\t        }\n\t        this.cache = {};\n\t      }\n\t      var block = this;\n\t      lines.reduce(function (index, line) {\n\t        block = block.split(index, true);\n\t        block.insertAt(0, line);\n\t        return line.length;\n\t      }, index + text.length);\n\t    }\n\t  }, {\n\t    key: 'insertBefore',\n\t    value: function insertBefore(blot, ref) {\n\t      var head = this.children.head;\n\t      _get(Block.prototype.__proto__ || Object.getPrototypeOf(Block.prototype), 'insertBefore', this).call(this, blot, ref);\n\t      if (head instanceof _break2.default) {\n\t        head.remove();\n\t      }\n\t      this.cache = {};\n\t    }\n\t  }, {\n\t    key: 'length',\n\t    value: function length() {\n\t      if (this.cache.length == null) {\n\t        this.cache.length = _get(Block.prototype.__proto__ || Object.getPrototypeOf(Block.prototype), 'length', this).call(this) + NEWLINE_LENGTH;\n\t      }\n\t      return this.cache.length;\n\t    }\n\t  }, {\n\t    key: 'moveChildren',\n\t    value: function moveChildren(target, ref) {\n\t      _get(Block.prototype.__proto__ || Object.getPrototypeOf(Block.prototype), 'moveChildren', this).call(this, target, ref);\n\t      this.cache = {};\n\t    }\n\t  }, {\n\t    key: 'optimize',\n\t    value: function optimize() {\n\t      _get(Block.prototype.__proto__ || Object.getPrototypeOf(Block.prototype), 'optimize', this).call(this);\n\t      this.cache = {};\n\t    }\n\t  }, {\n\t    key: 'path',\n\t    value: function path(index) {\n\t      return _get(Block.prototype.__proto__ || Object.getPrototypeOf(Block.prototype), 'path', this).call(this, index, true);\n\t    }\n\t  }, {\n\t    key: 'removeChild',\n\t    value: function removeChild(child) {\n\t      _get(Block.prototype.__proto__ || Object.getPrototypeOf(Block.prototype), 'removeChild', this).call(this, child);\n\t      this.cache = {};\n\t    }\n\t  }, {\n\t    key: 'split',\n\t    value: function split(index) {\n\t      var force = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n\t      if (force && (index === 0 || index >= this.length() - NEWLINE_LENGTH)) {\n\t        var clone = this.clone();\n\t        if (index === 0) {\n\t          this.parent.insertBefore(clone, this);\n\t          return this;\n\t        } else {\n\t          this.parent.insertBefore(clone, this.next);\n\t          return clone;\n\t        }\n\t      } else {\n\t        var next = _get(Block.prototype.__proto__ || Object.getPrototypeOf(Block.prototype), 'split', this).call(this, index, force);\n\t        this.cache = {};\n\t        return next;\n\t      }\n\t    }\n\t  }]);\n\n\t  return Block;\n\t}(_parchment2.default.Block);\n\n\tBlock.blotName = 'block';\n\tBlock.tagName = 'P';\n\tBlock.defaultChild = 'break';\n\tBlock.allowedChildren = [_inline2.default, _embed2.default, _text2.default];\n\n\tfunction bubbleFormats(blot) {\n\t  var formats = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n\t  if (blot == null) return formats;\n\t  if (typeof blot.formats === 'function') {\n\t    formats = (0, _extend2.default)(formats, blot.formats());\n\t  }\n\t  if (blot.parent == null || blot.parent.blotName == 'scroll' || blot.parent.statics.scope !== blot.statics.scope) {\n\t    return formats;\n\t  }\n\t  return bubbleFormats(blot.parent, formats);\n\t}\n\n\texports.bubbleFormats = bubbleFormats;\n\texports.BlockEmbed = BlockEmbed;\n\texports.default = Block;\n\n/***/ },\n/* 30 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\n\tvar _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if (\"value\" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };\n\n\tvar _embed = __webpack_require__(31);\n\n\tvar _embed2 = _interopRequireDefault(_embed);\n\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\n\tvar Break = function (_Embed) {\n\t  _inherits(Break, _Embed);\n\n\t  function Break() {\n\t    _classCallCheck(this, Break);\n\n\t    return _possibleConstructorReturn(this, (Break.__proto__ || Object.getPrototypeOf(Break)).apply(this, arguments));\n\t  }\n\n\t  _createClass(Break, [{\n\t    key: 'insertInto',\n\t    value: function insertInto(parent, ref) {\n\t      if (parent.children.length === 0) {\n\t        _get(Break.prototype.__proto__ || Object.getPrototypeOf(Break.prototype), 'insertInto', this).call(this, parent, ref);\n\t      } else {\n\t        this.remove();\n\t      }\n\t    }\n\t  }, {\n\t    key: 'length',\n\t    value: function length() {\n\t      return 0;\n\t    }\n\t  }, {\n\t    key: 'value',\n\t    value: function value() {\n\t      return '';\n\t    }\n\t  }], [{\n\t    key: 'value',\n\t    value: function value() {\n\t      return undefined;\n\t    }\n\t  }]);\n\n\t  return Break;\n\t}(_embed2.default);\n\n\tBreak.blotName = 'break';\n\tBreak.tagName = 'BR';\n\n\texports.default = Break;\n\n/***/ },\n/* 31 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\n\tvar _parchment = __webpack_require__(2);\n\n\tvar _parchment2 = _interopRequireDefault(_parchment);\n\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\n\tvar Embed = function (_Parchment$Embed) {\n\t  _inherits(Embed, _Parchment$Embed);\n\n\t  function Embed() {\n\t    _classCallCheck(this, Embed);\n\n\t    return _possibleConstructorReturn(this, (Embed.__proto__ || Object.getPrototypeOf(Embed)).apply(this, arguments));\n\t  }\n\n\t  return Embed;\n\t}(_parchment2.default.Embed);\n\n\texports.default = Embed;\n\n/***/ },\n/* 32 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\n\tvar _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if (\"value\" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };\n\n\tvar _embed = __webpack_require__(31);\n\n\tvar _embed2 = _interopRequireDefault(_embed);\n\n\tvar _text = __webpack_require__(33);\n\n\tvar _text2 = _interopRequireDefault(_text);\n\n\tvar _parchment = __webpack_require__(2);\n\n\tvar _parchment2 = _interopRequireDefault(_parchment);\n\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\n\tvar Inline = function (_Parchment$Inline) {\n\t  _inherits(Inline, _Parchment$Inline);\n\n\t  function Inline() {\n\t    _classCallCheck(this, Inline);\n\n\t    return _possibleConstructorReturn(this, (Inline.__proto__ || Object.getPrototypeOf(Inline)).apply(this, arguments));\n\t  }\n\n\t  _createClass(Inline, [{\n\t    key: 'formatAt',\n\t    value: function formatAt(index, length, name, value) {\n\t      if (Inline.compare(this.statics.blotName, name) < 0 && _parchment2.default.query(name, _parchment2.default.Scope.BLOT)) {\n\t        var blot = this.isolate(index, length);\n\t        if (value) {\n\t          blot.wrap(name, value);\n\t        }\n\t      } else {\n\t        _get(Inline.prototype.__proto__ || Object.getPrototypeOf(Inline.prototype), 'formatAt', this).call(this, index, length, name, value);\n\t      }\n\t    }\n\t  }, {\n\t    key: 'optimize',\n\t    value: function optimize() {\n\t      _get(Inline.prototype.__proto__ || Object.getPrototypeOf(Inline.prototype), 'optimize', this).call(this);\n\t      if (this.parent instanceof Inline && Inline.compare(this.statics.blotName, this.parent.statics.blotName) > 0) {\n\t        var parent = this.parent.isolate(this.offset(), this.length());\n\t        this.moveChildren(parent);\n\t        parent.wrap(this);\n\t      }\n\t    }\n\t  }], [{\n\t    key: 'compare',\n\t    value: function compare(self, other) {\n\t      var selfIndex = Inline.order.indexOf(self);\n\t      var otherIndex = Inline.order.indexOf(other);\n\t      if (selfIndex >= 0 || otherIndex >= 0) {\n\t        return selfIndex - otherIndex;\n\t      } else if (self === other) {\n\t        return 0;\n\t      } else if (self < other) {\n\t        return -1;\n\t      } else {\n\t        return 1;\n\t      }\n\t    }\n\t  }]);\n\n\t  return Inline;\n\t}(_parchment2.default.Inline);\n\n\tInline.allowedChildren = [Inline, _embed2.default, _text2.default];\n\t// Lower index means deeper in the DOM tree, since not found (-1) is for embeds\n\tInline.order = ['cursor', 'inline', // Must be lower\n\t'code', 'underline', 'strike', 'italic', 'bold', 'script', 'link' // Must be higher\n\t];\n\n\texports.default = Inline;\n\n/***/ },\n/* 33 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\n\tvar _parchment = __webpack_require__(2);\n\n\tvar _parchment2 = _interopRequireDefault(_parchment);\n\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\n\tvar TextBlot = function (_Parchment$Text) {\n\t  _inherits(TextBlot, _Parchment$Text);\n\n\t  function TextBlot() {\n\t    _classCallCheck(this, TextBlot);\n\n\t    return _possibleConstructorReturn(this, (TextBlot.__proto__ || Object.getPrototypeOf(TextBlot)).apply(this, arguments));\n\t  }\n\n\t  return TextBlot;\n\t}(_parchment2.default.Text);\n\n\texports.default = TextBlot;\n\n/***/ },\n/* 34 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\n\tvar _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"]) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); } }; }();\n\n\tvar _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if (\"value\" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };\n\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\n\tvar _parchment = __webpack_require__(2);\n\n\tvar _parchment2 = _interopRequireDefault(_parchment);\n\n\tvar _embed = __webpack_require__(31);\n\n\tvar _embed2 = _interopRequireDefault(_embed);\n\n\tvar _text = __webpack_require__(33);\n\n\tvar _text2 = _interopRequireDefault(_text);\n\n\tvar _emitter = __webpack_require__(35);\n\n\tvar _emitter2 = _interopRequireDefault(_emitter);\n\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\n\tvar Cursor = function (_Embed) {\n\t  _inherits(Cursor, _Embed);\n\n\t  _createClass(Cursor, null, [{\n\t    key: 'value',\n\t    value: function value() {\n\t      return undefined;\n\t    }\n\t  }]);\n\n\t  function Cursor(domNode, selection) {\n\t    _classCallCheck(this, Cursor);\n\n\t    var _this = _possibleConstructorReturn(this, (Cursor.__proto__ || Object.getPrototypeOf(Cursor)).call(this, domNode));\n\n\t    _this.selection = selection;\n\t    _this.textNode = document.createTextNode(Cursor.CONTENTS);\n\t    _this.domNode.appendChild(_this.textNode);\n\t    _this._length = 0;\n\t    return _this;\n\t  }\n\n\t  _createClass(Cursor, [{\n\t    key: 'detach',\n\t    value: function detach() {\n\t      // super.detach() will also clear domNode.__blot\n\t      if (this.parent != null) this.parent.removeChild(this);\n\t    }\n\t  }, {\n\t    key: 'format',\n\t    value: function format(name, value) {\n\t      if (this._length !== 0) {\n\t        return _get(Cursor.prototype.__proto__ || Object.getPrototypeOf(Cursor.prototype), 'format', this).call(this, name, value);\n\t      }\n\t      var target = this,\n\t          index = 0;\n\t      while (target != null && target.statics.scope !== _parchment2.default.Scope.BLOCK_BLOT) {\n\t        index += target.offset(target.parent);\n\t        target = target.parent;\n\t      }\n\t      if (target != null) {\n\t        this._length = Cursor.CONTENTS.length;\n\t        target.optimize();\n\t        target.formatAt(index, Cursor.CONTENTS.length, name, value);\n\t        this._length = 0;\n\t      }\n\t    }\n\t  }, {\n\t    key: 'index',\n\t    value: function index(node, offset) {\n\t      if (node === this.textNode) return 0;\n\t      return _get(Cursor.prototype.__proto__ || Object.getPrototypeOf(Cursor.prototype), 'index', this).call(this, node, offset);\n\t    }\n\t  }, {\n\t    key: 'length',\n\t    value: function length() {\n\t      return this._length;\n\t    }\n\t  }, {\n\t    key: 'position',\n\t    value: function position() {\n\t      return [this.textNode, this.textNode.data.length];\n\t    }\n\t  }, {\n\t    key: 'remove',\n\t    value: function remove() {\n\t      _get(Cursor.prototype.__proto__ || Object.getPrototypeOf(Cursor.prototype), 'remove', this).call(this);\n\t      this.parent = null;\n\t    }\n\t  }, {\n\t    key: 'restore',\n\t    value: function restore() {\n\t      var _this2 = this;\n\n\t      if (this.selection.composing) return;\n\t      if (this.parent == null) return;\n\t      var textNode = this.textNode;\n\t      var range = this.selection.getNativeRange();\n\t      var restoreText = void 0,\n\t          start = void 0,\n\t          end = void 0;\n\t      if (range != null && range.start.node === textNode && range.end.node === textNode) {\n\t        var _ref = [textNode, range.start.offset, range.end.offset];\n\t        restoreText = _ref[0];\n\t        start = _ref[1];\n\t        end = _ref[2];\n\t      }\n\t      // Link format will insert text outside of anchor tag\n\t      while (this.domNode.lastChild != null && this.domNode.lastChild !== this.textNode) {\n\t        this.domNode.parentNode.insertBefore(this.domNode.lastChild, this.domNode);\n\t      }\n\t      if (this.textNode.data !== Cursor.CONTENTS) {\n\t        var text = this.textNode.data.split(Cursor.CONTENTS).join('');\n\t        if (this.next instanceof _text2.default) {\n\t          restoreText = this.next.domNode;\n\t          this.next.insertAt(0, text);\n\t          this.textNode.data = Cursor.CONTENTS;\n\t        } else {\n\t          this.textNode.data = text;\n\t          this.parent.insertBefore(_parchment2.default.create(this.textNode), this);\n\t          this.textNode = document.createTextNode(Cursor.CONTENTS);\n\t          this.domNode.appendChild(this.textNode);\n\t        }\n\t      }\n\t      this.remove();\n\t      if (start == null) return;\n\t      this.selection.emitter.once(_emitter2.default.events.SCROLL_OPTIMIZE, function () {\n\t        var _map = [start, end].map(function (offset) {\n\t          return Math.max(0, Math.min(restoreText.data.length, offset - 1));\n\t        });\n\n\t        var _map2 = _slicedToArray(_map, 2);\n\n\t        start = _map2[0];\n\t        end = _map2[1];\n\n\t        _this2.selection.setNativeRange(restoreText, start, restoreText, end);\n\t      });\n\t    }\n\t  }, {\n\t    key: 'update',\n\t    value: function update(mutations) {\n\t      var _this3 = this;\n\n\t      mutations.forEach(function (mutation) {\n\t        if (mutation.type === 'characterData' && mutation.target === _this3.textNode) {\n\t          _this3.restore();\n\t        }\n\t      });\n\t    }\n\t  }, {\n\t    key: 'value',\n\t    value: function value() {\n\t      return '';\n\t    }\n\t  }]);\n\n\t  return Cursor;\n\t}(_embed2.default);\n\n\tCursor.blotName = 'cursor';\n\tCursor.className = 'ql-cursor';\n\tCursor.tagName = 'span';\n\tCursor.CONTENTS = '\\uFEFF'; // Zero width no break space\n\n\n\texports.default = Cursor;\n\n/***/ },\n/* 35 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\n\tvar _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if (\"value\" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };\n\n\tvar _eventemitter = __webpack_require__(36);\n\n\tvar _eventemitter2 = _interopRequireDefault(_eventemitter);\n\n\tvar _logger = __webpack_require__(37);\n\n\tvar _logger2 = _interopRequireDefault(_logger);\n\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\n\tvar debug = (0, _logger2.default)('quill:events');\n\n\tvar Emitter = function (_EventEmitter) {\n\t  _inherits(Emitter, _EventEmitter);\n\n\t  function Emitter() {\n\t    _classCallCheck(this, Emitter);\n\n\t    var _this = _possibleConstructorReturn(this, (Emitter.__proto__ || Object.getPrototypeOf(Emitter)).call(this));\n\n\t    _this.on('error', debug.error);\n\t    return _this;\n\t  }\n\n\t  _createClass(Emitter, [{\n\t    key: 'emit',\n\t    value: function emit() {\n\t      debug.log.apply(debug, arguments);\n\t      _get(Emitter.prototype.__proto__ || Object.getPrototypeOf(Emitter.prototype), 'emit', this).apply(this, arguments);\n\t    }\n\t  }]);\n\n\t  return Emitter;\n\t}(_eventemitter2.default);\n\n\tEmitter.events = {\n\t  EDITOR_CHANGE: 'editor-change',\n\t  SCROLL_BEFORE_UPDATE: 'scroll-before-update',\n\t  SCROLL_OPTIMIZE: 'scroll-optimize',\n\t  SCROLL_UPDATE: 'scroll-update',\n\t  SELECTION_CHANGE: 'selection-change',\n\t  TEXT_CHANGE: 'text-change'\n\t};\n\tEmitter.sources = {\n\t  API: 'api',\n\t  SILENT: 'silent',\n\t  USER: 'user'\n\t};\n\n\texports.default = Emitter;\n\n/***/ },\n/* 36 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\n\tvar has = Object.prototype.hasOwnProperty\n\t  , prefix = '~';\n\n\t/**\n\t * Constructor to create a storage for our `EE` objects.\n\t * An `Events` instance is a plain object whose properties are event names.\n\t *\n\t * @constructor\n\t * @api private\n\t */\n\tfunction Events() {}\n\n\t//\n\t// We try to not inherit from `Object.prototype`. In some engines creating an\n\t// instance in this way is faster than calling `Object.create(null)` directly.\n\t// If `Object.create(null)` is not supported we prefix the event names with a\n\t// character to make sure that the built-in object properties are not\n\t// overridden or used as an attack vector.\n\t//\n\tif (Object.create) {\n\t  Events.prototype = Object.create(null);\n\n\t  //\n\t  // This hack is needed because the `__proto__` property is still inherited in\n\t  // some old browsers like Android 4, iPhone 5.1, Opera 11 and Safari 5.\n\t  //\n\t  if (!new Events().__proto__) prefix = false;\n\t}\n\n\t/**\n\t * Representation of a single event listener.\n\t *\n\t * @param {Function} fn The listener function.\n\t * @param {Mixed} context The context to invoke the listener with.\n\t * @param {Boolean} [once=false] Specify if the listener is a one-time listener.\n\t * @constructor\n\t * @api private\n\t */\n\tfunction EE(fn, context, once) {\n\t  this.fn = fn;\n\t  this.context = context;\n\t  this.once = once || false;\n\t}\n\n\t/**\n\t * Minimal `EventEmitter` interface that is molded against the Node.js\n\t * `EventEmitter` interface.\n\t *\n\t * @constructor\n\t * @api public\n\t */\n\tfunction EventEmitter() {\n\t  this._events = new Events();\n\t  this._eventsCount = 0;\n\t}\n\n\t/**\n\t * Return an array listing the events for which the emitter has registered\n\t * listeners.\n\t *\n\t * @returns {Array}\n\t * @api public\n\t */\n\tEventEmitter.prototype.eventNames = function eventNames() {\n\t  var names = []\n\t    , events\n\t    , name;\n\n\t  if (this._eventsCount === 0) return names;\n\n\t  for (name in (events = this._events)) {\n\t    if (has.call(events, name)) names.push(prefix ? name.slice(1) : name);\n\t  }\n\n\t  if (Object.getOwnPropertySymbols) {\n\t    return names.concat(Object.getOwnPropertySymbols(events));\n\t  }\n\n\t  return names;\n\t};\n\n\t/**\n\t * Return the listeners registered for a given event.\n\t *\n\t * @param {String|Symbol} event The event name.\n\t * @param {Boolean} exists Only check if there are listeners.\n\t * @returns {Array|Boolean}\n\t * @api public\n\t */\n\tEventEmitter.prototype.listeners = function listeners(event, exists) {\n\t  var evt = prefix ? prefix + event : event\n\t    , available = this._events[evt];\n\n\t  if (exists) return !!available;\n\t  if (!available) return [];\n\t  if (available.fn) return [available.fn];\n\n\t  for (var i = 0, l = available.length, ee = new Array(l); i < l; i++) {\n\t    ee[i] = available[i].fn;\n\t  }\n\n\t  return ee;\n\t};\n\n\t/**\n\t * Calls each of the listeners registered for a given event.\n\t *\n\t * @param {String|Symbol} event The event name.\n\t * @returns {Boolean} `true` if the event had listeners, else `false`.\n\t * @api public\n\t */\n\tEventEmitter.prototype.emit = function emit(event, a1, a2, a3, a4, a5) {\n\t  var evt = prefix ? prefix + event : event;\n\n\t  if (!this._events[evt]) return false;\n\n\t  var listeners = this._events[evt]\n\t    , len = arguments.length\n\t    , args\n\t    , i;\n\n\t  if (listeners.fn) {\n\t    if (listeners.once) this.removeListener(event, listeners.fn, undefined, true);\n\n\t    switch (len) {\n\t      case 1: return listeners.fn.call(listeners.context), true;\n\t      case 2: return listeners.fn.call(listeners.context, a1), true;\n\t      case 3: return listeners.fn.call(listeners.context, a1, a2), true;\n\t      case 4: return listeners.fn.call(listeners.context, a1, a2, a3), true;\n\t      case 5: return listeners.fn.call(listeners.context, a1, a2, a3, a4), true;\n\t      case 6: return listeners.fn.call(listeners.context, a1, a2, a3, a4, a5), true;\n\t    }\n\n\t    for (i = 1, args = new Array(len -1); i < len; i++) {\n\t      args[i - 1] = arguments[i];\n\t    }\n\n\t    listeners.fn.apply(listeners.context, args);\n\t  } else {\n\t    var length = listeners.length\n\t      , j;\n\n\t    for (i = 0; i < length; i++) {\n\t      if (listeners[i].once) this.removeListener(event, listeners[i].fn, undefined, true);\n\n\t      switch (len) {\n\t        case 1: listeners[i].fn.call(listeners[i].context); break;\n\t        case 2: listeners[i].fn.call(listeners[i].context, a1); break;\n\t        case 3: listeners[i].fn.call(listeners[i].context, a1, a2); break;\n\t        case 4: listeners[i].fn.call(listeners[i].context, a1, a2, a3); break;\n\t        default:\n\t          if (!args) for (j = 1, args = new Array(len -1); j < len; j++) {\n\t            args[j - 1] = arguments[j];\n\t          }\n\n\t          listeners[i].fn.apply(listeners[i].context, args);\n\t      }\n\t    }\n\t  }\n\n\t  return true;\n\t};\n\n\t/**\n\t * Add a listener for a given event.\n\t *\n\t * @param {String|Symbol} event The event name.\n\t * @param {Function} fn The listener function.\n\t * @param {Mixed} [context=this] The context to invoke the listener with.\n\t * @returns {EventEmitter} `this`.\n\t * @api public\n\t */\n\tEventEmitter.prototype.on = function on(event, fn, context) {\n\t  var listener = new EE(fn, context || this)\n\t    , evt = prefix ? prefix + event : event;\n\n\t  if (!this._events[evt]) this._events[evt] = listener, this._eventsCount++;\n\t  else if (!this._events[evt].fn) this._events[evt].push(listener);\n\t  else this._events[evt] = [this._events[evt], listener];\n\n\t  return this;\n\t};\n\n\t/**\n\t * Add a one-time listener for a given event.\n\t *\n\t * @param {String|Symbol} event The event name.\n\t * @param {Function} fn The listener function.\n\t * @param {Mixed} [context=this] The context to invoke the listener with.\n\t * @returns {EventEmitter} `this`.\n\t * @api public\n\t */\n\tEventEmitter.prototype.once = function once(event, fn, context) {\n\t  var listener = new EE(fn, context || this, true)\n\t    , evt = prefix ? prefix + event : event;\n\n\t  if (!this._events[evt]) this._events[evt] = listener, this._eventsCount++;\n\t  else if (!this._events[evt].fn) this._events[evt].push(listener);\n\t  else this._events[evt] = [this._events[evt], listener];\n\n\t  return this;\n\t};\n\n\t/**\n\t * Remove the listeners of a given event.\n\t *\n\t * @param {String|Symbol} event The event name.\n\t * @param {Function} fn Only remove the listeners that match this function.\n\t * @param {Mixed} context Only remove the listeners that have this context.\n\t * @param {Boolean} once Only remove one-time listeners.\n\t * @returns {EventEmitter} `this`.\n\t * @api public\n\t */\n\tEventEmitter.prototype.removeListener = function removeListener(event, fn, context, once) {\n\t  var evt = prefix ? prefix + event : event;\n\n\t  if (!this._events[evt]) return this;\n\t  if (!fn) {\n\t    if (--this._eventsCount === 0) this._events = new Events();\n\t    else delete this._events[evt];\n\t    return this;\n\t  }\n\n\t  var listeners = this._events[evt];\n\n\t  if (listeners.fn) {\n\t    if (\n\t         listeners.fn === fn\n\t      && (!once || listeners.once)\n\t      && (!context || listeners.context === context)\n\t    ) {\n\t      if (--this._eventsCount === 0) this._events = new Events();\n\t      else delete this._events[evt];\n\t    }\n\t  } else {\n\t    for (var i = 0, events = [], length = listeners.length; i < length; i++) {\n\t      if (\n\t           listeners[i].fn !== fn\n\t        || (once && !listeners[i].once)\n\t        || (context && listeners[i].context !== context)\n\t      ) {\n\t        events.push(listeners[i]);\n\t      }\n\t    }\n\n\t    //\n\t    // Reset the array, or remove it completely if we have no more listeners.\n\t    //\n\t    if (events.length) this._events[evt] = events.length === 1 ? events[0] : events;\n\t    else if (--this._eventsCount === 0) this._events = new Events();\n\t    else delete this._events[evt];\n\t  }\n\n\t  return this;\n\t};\n\n\t/**\n\t * Remove all listeners, or those of the specified event.\n\t *\n\t * @param {String|Symbol} [event] The event name.\n\t * @returns {EventEmitter} `this`.\n\t * @api public\n\t */\n\tEventEmitter.prototype.removeAllListeners = function removeAllListeners(event) {\n\t  var evt;\n\n\t  if (event) {\n\t    evt = prefix ? prefix + event : event;\n\t    if (this._events[evt]) {\n\t      if (--this._eventsCount === 0) this._events = new Events();\n\t      else delete this._events[evt];\n\t    }\n\t  } else {\n\t    this._events = new Events();\n\t    this._eventsCount = 0;\n\t  }\n\n\t  return this;\n\t};\n\n\t//\n\t// Alias methods names because people roll like that.\n\t//\n\tEventEmitter.prototype.off = EventEmitter.prototype.removeListener;\n\tEventEmitter.prototype.addListener = EventEmitter.prototype.on;\n\n\t//\n\t// This function doesn't apply anymore.\n\t//\n\tEventEmitter.prototype.setMaxListeners = function setMaxListeners() {\n\t  return this;\n\t};\n\n\t//\n\t// Expose the prefix.\n\t//\n\tEventEmitter.prefixed = prefix;\n\n\t//\n\t// Allow `EventEmitter` to be imported as module namespace.\n\t//\n\tEventEmitter.EventEmitter = EventEmitter;\n\n\t//\n\t// Expose the module.\n\t//\n\tif ('undefined' !== typeof module) {\n\t  module.exports = EventEmitter;\n\t}\n\n\n/***/ },\n/* 37 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\tvar levels = ['error', 'warn', 'log', 'info'];\n\tvar level = 'warn';\n\n\tfunction debug(method) {\n\t  if (levels.indexOf(method) <= levels.indexOf(level)) {\n\t    for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n\t      args[_key - 1] = arguments[_key];\n\t    }\n\n\t    console[method].apply(console, args); // eslint-disable-line no-console\n\t  }\n\t}\n\n\tfunction namespace(ns) {\n\t  return levels.reduce(function (logger, method) {\n\t    logger[method] = debug.bind(console, method, ns);\n\t    return logger;\n\t  }, {});\n\t}\n\n\tdebug.level = namespace.level = function (newLevel) {\n\t  level = newLevel;\n\t};\n\n\texports.default = namespace;\n\n/***/ },\n/* 38 */\n/***/ function(module, exports) {\n\n\tvar clone = (function() {\n\t'use strict';\n\n\tvar nativeMap;\n\ttry {\n\t  nativeMap = Map;\n\t} catch(_) {\n\t  // maybe a reference error because no `Map`. Give it a dummy value that no\n\t  // value will ever be an instanceof.\n\t  nativeMap = function() {};\n\t}\n\n\tvar nativeSet;\n\ttry {\n\t  nativeSet = Set;\n\t} catch(_) {\n\t  nativeSet = function() {};\n\t}\n\n\tvar nativePromise;\n\ttry {\n\t  nativePromise = Promise;\n\t} catch(_) {\n\t  nativePromise = function() {};\n\t}\n\n\t/**\n\t * Clones (copies) an Object using deep copying.\n\t *\n\t * This function supports circular references by default, but if you are certain\n\t * there are no circular references in your object, you can save some CPU time\n\t * by calling clone(obj, false).\n\t *\n\t * Caution: if `circular` is false and `parent` contains circular references,\n\t * your program may enter an infinite loop and crash.\n\t *\n\t * @param `parent` - the object to be cloned\n\t * @param `circular` - set to true if the object to be cloned may contain\n\t *    circular references. (optional - true by default)\n\t * @param `depth` - set to a number if the object is only to be cloned to\n\t *    a particular depth. (optional - defaults to Infinity)\n\t * @param `prototype` - sets the prototype to be used when cloning an object.\n\t *    (optional - defaults to parent prototype).\n\t * @param `includeNonEnumerable` - set to true if the non-enumerable properties\n\t *    should be cloned as well. Non-enumerable properties on the prototype\n\t *    chain will be ignored. (optional - false by default)\n\t*/\n\tfunction clone(parent, circular, depth, prototype, includeNonEnumerable) {\n\t  if (typeof circular === 'object') {\n\t    depth = circular.depth;\n\t    prototype = circular.prototype;\n\t    includeNonEnumerable = circular.includeNonEnumerable;\n\t    circular = circular.circular;\n\t  }\n\t  // maintain two arrays for circular references, where corresponding parents\n\t  // and children have the same index\n\t  var allParents = [];\n\t  var allChildren = [];\n\n\t  var useBuffer = typeof Buffer != 'undefined';\n\n\t  if (typeof circular == 'undefined')\n\t    circular = true;\n\n\t  if (typeof depth == 'undefined')\n\t    depth = Infinity;\n\n\t  // recurse this function so we don't reset allParents and allChildren\n\t  function _clone(parent, depth) {\n\t    // cloning null always returns null\n\t    if (parent === null)\n\t      return null;\n\n\t    if (depth === 0)\n\t      return parent;\n\n\t    var child;\n\t    var proto;\n\t    if (typeof parent != 'object') {\n\t      return parent;\n\t    }\n\n\t    if (parent instanceof nativeMap) {\n\t      child = new nativeMap();\n\t    } else if (parent instanceof nativeSet) {\n\t      child = new nativeSet();\n\t    } else if (parent instanceof nativePromise) {\n\t      child = new nativePromise(function (resolve, reject) {\n\t        parent.then(function(value) {\n\t          resolve(_clone(value, depth - 1));\n\t        }, function(err) {\n\t          reject(_clone(err, depth - 1));\n\t        });\n\t      });\n\t    } else if (clone.__isArray(parent)) {\n\t      child = [];\n\t    } else if (clone.__isRegExp(parent)) {\n\t      child = new RegExp(parent.source, __getRegExpFlags(parent));\n\t      if (parent.lastIndex) child.lastIndex = parent.lastIndex;\n\t    } else if (clone.__isDate(parent)) {\n\t      child = new Date(parent.getTime());\n\t    } else if (useBuffer && Buffer.isBuffer(parent)) {\n\t      child = new Buffer(parent.length);\n\t      parent.copy(child);\n\t      return child;\n\t    } else if (parent instanceof Error) {\n\t      child = Object.create(parent);\n\t    } else {\n\t      if (typeof prototype == 'undefined') {\n\t        proto = Object.getPrototypeOf(parent);\n\t        child = Object.create(proto);\n\t      }\n\t      else {\n\t        child = Object.create(prototype);\n\t        proto = prototype;\n\t      }\n\t    }\n\n\t    if (circular) {\n\t      var index = allParents.indexOf(parent);\n\n\t      if (index != -1) {\n\t        return allChildren[index];\n\t      }\n\t      allParents.push(parent);\n\t      allChildren.push(child);\n\t    }\n\n\t    if (parent instanceof nativeMap) {\n\t      var keyIterator = parent.keys();\n\t      while(true) {\n\t        var next = keyIterator.next();\n\t        if (next.done) {\n\t          break;\n\t        }\n\t        var keyChild = _clone(next.value, depth - 1);\n\t        var valueChild = _clone(parent.get(next.value), depth - 1);\n\t        child.set(keyChild, valueChild);\n\t      }\n\t    }\n\t    if (parent instanceof nativeSet) {\n\t      var iterator = parent.keys();\n\t      while(true) {\n\t        var next = iterator.next();\n\t        if (next.done) {\n\t          break;\n\t        }\n\t        var entryChild = _clone(next.value, depth - 1);\n\t        child.add(entryChild);\n\t      }\n\t    }\n\n\t    for (var i in parent) {\n\t      var attrs;\n\t      if (proto) {\n\t        attrs = Object.getOwnPropertyDescriptor(proto, i);\n\t      }\n\n\t      if (attrs && attrs.set == null) {\n\t        continue;\n\t      }\n\t      child[i] = _clone(parent[i], depth - 1);\n\t    }\n\n\t    if (Object.getOwnPropertySymbols) {\n\t      var symbols = Object.getOwnPropertySymbols(parent);\n\t      for (var i = 0; i < symbols.length; i++) {\n\t        // Don't need to worry about cloning a symbol because it is a primitive,\n\t        // like a number or string.\n\t        var symbol = symbols[i];\n\t        var descriptor = Object.getOwnPropertyDescriptor(parent, symbol);\n\t        if (descriptor && !descriptor.enumerable && !includeNonEnumerable) {\n\t          continue;\n\t        }\n\t        child[symbol] = _clone(parent[symbol], depth - 1);\n\t        if (!descriptor.enumerable) {\n\t          Object.defineProperty(child, symbol, {\n\t            enumerable: false\n\t          });\n\t        }\n\t      }\n\t    }\n\n\t    if (includeNonEnumerable) {\n\t      var allPropertyNames = Object.getOwnPropertyNames(parent);\n\t      for (var i = 0; i < allPropertyNames.length; i++) {\n\t        var propertyName = allPropertyNames[i];\n\t        var descriptor = Object.getOwnPropertyDescriptor(parent, propertyName);\n\t        if (descriptor && descriptor.enumerable) {\n\t          continue;\n\t        }\n\t        child[propertyName] = _clone(parent[propertyName], depth - 1);\n\t        Object.defineProperty(child, propertyName, {\n\t          enumerable: false\n\t        });\n\t      }\n\t    }\n\n\t    return child;\n\t  }\n\n\t  return _clone(parent, depth);\n\t}\n\n\t/**\n\t * Simple flat clone using prototype, accepts only objects, usefull for property\n\t * override on FLAT configuration object (no nested props).\n\t *\n\t * USE WITH CAUTION! This may not behave as you wish if you do not know how this\n\t * works.\n\t */\n\tclone.clonePrototype = function clonePrototype(parent) {\n\t  if (parent === null)\n\t    return null;\n\n\t  var c = function () {};\n\t  c.prototype = parent;\n\t  return new c();\n\t};\n\n\t// private utility functions\n\n\tfunction __objToStr(o) {\n\t  return Object.prototype.toString.call(o);\n\t}\n\tclone.__objToStr = __objToStr;\n\n\tfunction __isDate(o) {\n\t  return typeof o === 'object' && __objToStr(o) === '[object Date]';\n\t}\n\tclone.__isDate = __isDate;\n\n\tfunction __isArray(o) {\n\t  return typeof o === 'object' && __objToStr(o) === '[object Array]';\n\t}\n\tclone.__isArray = __isArray;\n\n\tfunction __isRegExp(o) {\n\t  return typeof o === 'object' && __objToStr(o) === '[object RegExp]';\n\t}\n\tclone.__isRegExp = __isRegExp;\n\n\tfunction __getRegExpFlags(re) {\n\t  var flags = '';\n\t  if (re.global) flags += 'g';\n\t  if (re.ignoreCase) flags += 'i';\n\t  if (re.multiline) flags += 'm';\n\t  return flags;\n\t}\n\tclone.__getRegExpFlags = __getRegExpFlags;\n\n\treturn clone;\n\t})();\n\n\tif (typeof module === 'object' && module.exports) {\n\t  module.exports = clone;\n\t}\n\n\n/***/ },\n/* 39 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n\tvar Module = function Module(quill) {\n\t  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n\t  _classCallCheck(this, Module);\n\n\t  this.quill = quill;\n\t  this.options = options;\n\t};\n\n\tModule.DEFAULTS = {};\n\n\texports.default = Module;\n\n/***/ },\n/* 40 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\texports.default = exports.Range = undefined;\n\n\tvar _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"]) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); } }; }();\n\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\n\tvar _parchment = __webpack_require__(2);\n\n\tvar _parchment2 = _interopRequireDefault(_parchment);\n\n\tvar _clone = __webpack_require__(38);\n\n\tvar _clone2 = _interopRequireDefault(_clone);\n\n\tvar _deepEqual = __webpack_require__(22);\n\n\tvar _deepEqual2 = _interopRequireDefault(_deepEqual);\n\n\tvar _emitter3 = __webpack_require__(35);\n\n\tvar _emitter4 = _interopRequireDefault(_emitter3);\n\n\tvar _logger = __webpack_require__(37);\n\n\tvar _logger2 = _interopRequireDefault(_logger);\n\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n\tfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n\tvar debug = (0, _logger2.default)('quill:selection');\n\n\tvar Range = function Range(index) {\n\t  var length = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n\n\t  _classCallCheck(this, Range);\n\n\t  this.index = index;\n\t  this.length = length;\n\t};\n\n\tvar Selection = function () {\n\t  function Selection(scroll, emitter) {\n\t    var _this = this;\n\n\t    _classCallCheck(this, Selection);\n\n\t    this.emitter = emitter;\n\t    this.scroll = scroll;\n\t    this.composing = false;\n\t    this.root = this.scroll.domNode;\n\t    this.root.addEventListener('compositionstart', function () {\n\t      _this.composing = true;\n\t    });\n\t    this.root.addEventListener('compositionend', function () {\n\t      _this.composing = false;\n\t    });\n\t    this.cursor = _parchment2.default.create('cursor', this);\n\t    // savedRange is last non-null range\n\t    this.lastRange = this.savedRange = new Range(0, 0);\n\t    ['keyup', 'mouseup', 'mouseleave', 'touchend', 'touchleave', 'focus', 'blur'].forEach(function (eventName) {\n\t      _this.root.addEventListener(eventName, function () {\n\t        // When range used to be a selection and user click within the selection,\n\t        // the range now being a cursor has not updated yet without setTimeout\n\t        setTimeout(_this.update.bind(_this, _emitter4.default.sources.USER), 100);\n\t      });\n\t    });\n\t    this.emitter.on(_emitter4.default.events.EDITOR_CHANGE, function (type, delta) {\n\t      if (type === _emitter4.default.events.TEXT_CHANGE && delta.length() > 0) {\n\t        _this.update(_emitter4.default.sources.SILENT);\n\t      }\n\t    });\n\t    this.emitter.on(_emitter4.default.events.SCROLL_BEFORE_UPDATE, function () {\n\t      var native = _this.getNativeRange();\n\t      if (native == null) return;\n\t      if (native.start.node === _this.cursor.textNode) return; // cursor.restore() will handle\n\t      // TODO unclear if this has negative side effects\n\t      _this.emitter.once(_emitter4.default.events.SCROLL_UPDATE, function () {\n\t        try {\n\t          _this.setNativeRange(native.start.node, native.start.offset, native.end.node, native.end.offset);\n\t        } catch (ignored) {}\n\t      });\n\t    });\n\t    this.update(_emitter4.default.sources.SILENT);\n\t  }\n\n\t  _createClass(Selection, [{\n\t    key: 'focus',\n\t    value: function focus() {\n\t      if (this.hasFocus()) return;\n\t      this.root.focus();\n\t      this.setRange(this.savedRange);\n\t    }\n\t  }, {\n\t    key: 'format',\n\t    value: function format(_format, value) {\n\t      if (this.scroll.whitelist != null && !this.scroll.whitelist[_format]) return;\n\t      this.scroll.update();\n\t      var nativeRange = this.getNativeRange();\n\t      if (nativeRange == null || !nativeRange.native.collapsed || _parchment2.default.query(_format, _parchment2.default.Scope.BLOCK)) return;\n\t      if (nativeRange.start.node !== this.cursor.textNode) {\n\t        var blot = _parchment2.default.find(nativeRange.start.node, false);\n\t        if (blot == null) return;\n\t        // TODO Give blot ability to not split\n\t        if (blot instanceof _parchment2.default.Leaf) {\n\t          var after = blot.split(nativeRange.start.offset);\n\t          blot.parent.insertBefore(this.cursor, after);\n\t        } else {\n\t          blot.insertBefore(this.cursor, nativeRange.start.node); // Should never happen\n\t        }\n\t        this.cursor.attach();\n\t      }\n\t      this.cursor.format(_format, value);\n\t      this.scroll.optimize();\n\t      this.setNativeRange(this.cursor.textNode, this.cursor.textNode.data.length);\n\t      this.update();\n\t    }\n\t  }, {\n\t    key: 'getBounds',\n\t    value: function getBounds(index) {\n\t      var length = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n\n\t      var scrollLength = this.scroll.length();\n\t      index = Math.min(index, scrollLength - 1);\n\t      length = Math.min(index + length, scrollLength - 1) - index;\n\t      var bounds = void 0,\n\t          node = void 0,\n\t          _scroll$leaf = this.scroll.leaf(index),\n\t          _scroll$leaf2 = _slicedToArray(_scroll$leaf, 2),\n\t          leaf = _scroll$leaf2[0],\n\t          offset = _scroll$leaf2[1];\n\t      if (leaf == null) return null;\n\n\t      var _leaf$position = leaf.position(offset, true);\n\n\t      var _leaf$position2 = _slicedToArray(_leaf$position, 2);\n\n\t      node = _leaf$position2[0];\n\t      offset = _leaf$position2[1];\n\n\t      var range = document.createRange();\n\t      if (length > 0) {\n\t        range.setStart(node, offset);\n\n\t        var _scroll$leaf3 = this.scroll.leaf(index + length);\n\n\t        var _scroll$leaf4 = _slicedToArray(_scroll$leaf3, 2);\n\n\t        leaf = _scroll$leaf4[0];\n\t        offset = _scroll$leaf4[1];\n\n\t        if (leaf == null) return null;\n\n\t        var _leaf$position3 = leaf.position(offset, true);\n\n\t        var _leaf$position4 = _slicedToArray(_leaf$position3, 2);\n\n\t        node = _leaf$position4[0];\n\t        offset = _leaf$position4[1];\n\n\t        range.setEnd(node, offset);\n\t        bounds = range.getBoundingClientRect();\n\t      } else {\n\t        var side = 'left';\n\t        var rect = void 0;\n\t        if (node instanceof Text) {\n\t          if (offset < node.data.length) {\n\t            range.setStart(node, offset);\n\t            range.setEnd(node, offset + 1);\n\t          } else {\n\t            range.setStart(node, offset - 1);\n\t            range.setEnd(node, offset);\n\t            side = 'right';\n\t          }\n\t          rect = range.getBoundingClientRect();\n\t        } else {\n\t          rect = leaf.domNode.getBoundingClientRect();\n\t          if (offset > 0) side = 'right';\n\t        }\n\t        bounds = {\n\t          height: rect.height,\n\t          left: rect[side],\n\t          width: 0,\n\t          top: rect.top\n\t        };\n\t      }\n\t      var containerBounds = this.root.parentNode.getBoundingClientRect();\n\t      return {\n\t        left: bounds.left - containerBounds.left,\n\t        right: bounds.left + bounds.width - containerBounds.left,\n\t        top: bounds.top - containerBounds.top,\n\t        bottom: bounds.top + bounds.height - containerBounds.top,\n\t        height: bounds.height,\n\t        width: bounds.width\n\t      };\n\t    }\n\t  }, {\n\t    key: 'getNativeRange',\n\t    value: function getNativeRange() {\n\t      var selection = document.getSelection();\n\t      if (selection == null || selection.rangeCount <= 0) return null;\n\t      var nativeRange = selection.getRangeAt(0);\n\t      if (nativeRange == null) return null;\n\t      if (!contains(this.root, nativeRange.startContainer) || !nativeRange.collapsed && !contains(this.root, nativeRange.endContainer)) {\n\t        return null;\n\t      }\n\t      var range = {\n\t        start: { node: nativeRange.startContainer, offset: nativeRange.startOffset },\n\t        end: { node: nativeRange.endContainer, offset: nativeRange.endOffset },\n\t        native: nativeRange\n\t      };\n\t      [range.start, range.end].forEach(function (position) {\n\t        var node = position.node,\n\t            offset = position.offset;\n\t        while (!(node instanceof Text) && node.childNodes.length > 0) {\n\t          if (node.childNodes.length > offset) {\n\t            node = node.childNodes[offset];\n\t            offset = 0;\n\t          } else if (node.childNodes.length === offset) {\n\t            node = node.lastChild;\n\t            offset = node instanceof Text ? node.data.length : node.childNodes.length + 1;\n\t          } else {\n\t            break;\n\t          }\n\t        }\n\t        position.node = node, position.offset = offset;\n\t      });\n\t      debug.info('getNativeRange', range);\n\t      return range;\n\t    }\n\t  }, {\n\t    key: 'getRange',\n\t    value: function getRange() {\n\t      var _this2 = this;\n\n\t      var range = this.getNativeRange();\n\t      if (range == null) return [null, null];\n\t      var positions = [[range.start.node, range.start.offset]];\n\t      if (!range.native.collapsed) {\n\t        positions.push([range.end.node, range.end.offset]);\n\t      }\n\t      var indexes = positions.map(function (position) {\n\t        var _position = _slicedToArray(position, 2),\n\t            node = _position[0],\n\t            offset = _position[1];\n\n\t        var blot = _parchment2.default.find(node, true);\n\t        var index = blot.offset(_this2.scroll);\n\t        if (offset === 0) {\n\t          return index;\n\t        } else if (blot instanceof _parchment2.default.Container) {\n\t          return index + blot.length();\n\t        } else {\n\t          return index + blot.index(node, offset);\n\t        }\n\t      });\n\t      var start = Math.min.apply(Math, _toConsumableArray(indexes)),\n\t          end = Math.max.apply(Math, _toConsumableArray(indexes));\n\t      end = Math.min(end, this.scroll.length() - 1);\n\t      return [new Range(start, end - start), range];\n\t    }\n\t  }, {\n\t    key: 'hasFocus',\n\t    value: function hasFocus() {\n\t      return document.activeElement === this.root;\n\t    }\n\t  }, {\n\t    key: 'scrollIntoView',\n\t    value: function scrollIntoView() {\n\t      var range = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.lastRange;\n\n\t      if (range == null) return;\n\t      var bounds = this.getBounds(range.index, range.length);\n\t      if (bounds == null) return;\n\t      if (this.root.offsetHeight < bounds.bottom) {\n\t        var _scroll$line = this.scroll.line(Math.min(range.index + range.length, this.scroll.length() - 1)),\n\t            _scroll$line2 = _slicedToArray(_scroll$line, 1),\n\t            line = _scroll$line2[0];\n\n\t        this.root.scrollTop = line.domNode.offsetTop + line.domNode.offsetHeight - this.root.offsetHeight;\n\t      } else if (bounds.top < 0) {\n\t        var _scroll$line3 = this.scroll.line(Math.min(range.index, this.scroll.length() - 1)),\n\t            _scroll$line4 = _slicedToArray(_scroll$line3, 1),\n\t            _line = _scroll$line4[0];\n\n\t        this.root.scrollTop = _line.domNode.offsetTop;\n\t      }\n\t    }\n\t  }, {\n\t    key: 'setNativeRange',\n\t    value: function setNativeRange(startNode, startOffset) {\n\t      var endNode = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : startNode;\n\t      var endOffset = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : startOffset;\n\t      var force = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n\n\t      debug.info('setNativeRange', startNode, startOffset, endNode, endOffset);\n\t      if (startNode != null && (this.root.parentNode == null || startNode.parentNode == null || endNode.parentNode == null)) {\n\t        return;\n\t      }\n\t      var selection = document.getSelection();\n\t      if (selection == null) return;\n\t      if (startNode != null) {\n\t        if (!this.hasFocus()) this.root.focus();\n\t        var native = (this.getNativeRange() || {}).native;\n\t        if (native == null || force || startNode !== native.startContainer || startOffset !== native.startOffset || endNode !== native.endContainer || endOffset !== native.endOffset) {\n\t          var range = document.createRange();\n\t          range.setStart(startNode, startOffset);\n\t          range.setEnd(endNode, endOffset);\n\t          selection.removeAllRanges();\n\t          selection.addRange(range);\n\t        }\n\t      } else {\n\t        selection.removeAllRanges();\n\t        this.root.blur();\n\t        document.body.focus(); // root.blur() not enough on IE11+Travis+SauceLabs (but not local VMs)\n\t      }\n\t    }\n\t  }, {\n\t    key: 'setRange',\n\t    value: function setRange(range) {\n\t      var _this3 = this;\n\n\t      var force = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\t      var source = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : _emitter4.default.sources.API;\n\n\t      if (typeof force === 'string') {\n\t        source = force;\n\t        force = false;\n\t      }\n\t      debug.info('setRange', range);\n\t      if (range != null) {\n\t        (function () {\n\t          var indexes = range.collapsed ? [range.index] : [range.index, range.index + range.length];\n\t          var args = [];\n\t          var scrollLength = _this3.scroll.length();\n\t          indexes.forEach(function (index, i) {\n\t            index = Math.min(scrollLength - 1, index);\n\t            var node = void 0,\n\t                _scroll$leaf5 = _this3.scroll.leaf(index),\n\t                _scroll$leaf6 = _slicedToArray(_scroll$leaf5, 2),\n\t                leaf = _scroll$leaf6[0],\n\t                offset = _scroll$leaf6[1];\n\t            var _leaf$position5 = leaf.position(offset, i !== 0);\n\n\t            var _leaf$position6 = _slicedToArray(_leaf$position5, 2);\n\n\t            node = _leaf$position6[0];\n\t            offset = _leaf$position6[1];\n\n\t            args.push(node, offset);\n\t          });\n\t          if (args.length < 2) {\n\t            args = args.concat(args);\n\t          }\n\t          _this3.setNativeRange.apply(_this3, _toConsumableArray(args).concat([force]));\n\t        })();\n\t      } else {\n\t        this.setNativeRange(null);\n\t      }\n\t      this.update(source);\n\t    }\n\t  }, {\n\t    key: 'update',\n\t    value: function update() {\n\t      var source = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _emitter4.default.sources.USER;\n\n\t      var nativeRange = void 0,\n\t          oldRange = this.lastRange;\n\n\t      var _getRange = this.getRange();\n\n\t      var _getRange2 = _slicedToArray(_getRange, 2);\n\n\t      this.lastRange = _getRange2[0];\n\t      nativeRange = _getRange2[1];\n\n\t      if (this.lastRange != null) {\n\t        this.savedRange = this.lastRange;\n\t      }\n\t      if (!(0, _deepEqual2.default)(oldRange, this.lastRange)) {\n\t        var _emitter;\n\n\t        if (!this.composing && nativeRange != null && nativeRange.native.collapsed && nativeRange.start.node !== this.cursor.textNode) {\n\t          this.cursor.restore();\n\t        }\n\t        var args = [_emitter4.default.events.SELECTION_CHANGE, (0, _clone2.default)(this.lastRange), (0, _clone2.default)(oldRange), source];\n\t        (_emitter = this.emitter).emit.apply(_emitter, [_emitter4.default.events.EDITOR_CHANGE].concat(args));\n\t        if (source !== _emitter4.default.sources.SILENT) {\n\t          var _emitter2;\n\n\t          (_emitter2 = this.emitter).emit.apply(_emitter2, args);\n\t        }\n\t      }\n\t    }\n\t  }]);\n\n\t  return Selection;\n\t}();\n\n\tfunction contains(parent, descendant) {\n\t  try {\n\t    // Firefox inserts inaccessible nodes around video elements\n\t    descendant.parentNode;\n\t  } catch (e) {\n\t    return false;\n\t  }\n\t  // IE11 has bug with Text nodes\n\t  // https://connect.microsoft.com/IE/feedback/details/780874/node-contains-is-incorrect\n\t  if (descendant instanceof Text) {\n\t    descendant = descendant.parentNode;\n\t  }\n\t  return parent.contains(descendant);\n\t}\n\n\texports.Range = Range;\n\texports.default = Selection;\n\n/***/ },\n/* 41 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n\tvar Theme = function () {\n\t  function Theme(quill, options) {\n\t    _classCallCheck(this, Theme);\n\n\t    this.quill = quill;\n\t    this.options = options;\n\t    this.modules = {};\n\t  }\n\n\t  _createClass(Theme, [{\n\t    key: 'init',\n\t    value: function init() {\n\t      var _this = this;\n\n\t      Object.keys(this.options.modules).forEach(function (name) {\n\t        if (_this.modules[name] == null) {\n\t          _this.addModule(name);\n\t        }\n\t      });\n\t    }\n\t  }, {\n\t    key: 'addModule',\n\t    value: function addModule(name) {\n\t      var moduleClass = this.quill.constructor.import('modules/' + name);\n\t      this.modules[name] = new moduleClass(this.quill, this.options.modules[name] || {});\n\t      return this.modules[name];\n\t    }\n\t  }]);\n\n\t  return Theme;\n\t}();\n\n\tTheme.DEFAULTS = {\n\t  modules: {}\n\t};\n\tTheme.themes = {\n\t  'default': Theme\n\t};\n\n\texports.default = Theme;\n\n/***/ },\n/* 42 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\n\tvar _parchment = __webpack_require__(2);\n\n\tvar _parchment2 = _interopRequireDefault(_parchment);\n\n\tvar _block = __webpack_require__(29);\n\n\tvar _block2 = _interopRequireDefault(_block);\n\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\n\tvar Container = function (_Parchment$Container) {\n\t  _inherits(Container, _Parchment$Container);\n\n\t  function Container() {\n\t    _classCallCheck(this, Container);\n\n\t    return _possibleConstructorReturn(this, (Container.__proto__ || Object.getPrototypeOf(Container)).apply(this, arguments));\n\t  }\n\n\t  return Container;\n\t}(_parchment2.default.Container);\n\n\tContainer.allowedChildren = [_block2.default, _block.BlockEmbed, Container];\n\n\texports.default = Container;\n\n/***/ },\n/* 43 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\n\tvar _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"]) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); } }; }();\n\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\n\tvar _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if (\"value\" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };\n\n\tvar _parchment = __webpack_require__(2);\n\n\tvar _parchment2 = _interopRequireDefault(_parchment);\n\n\tvar _emitter = __webpack_require__(35);\n\n\tvar _emitter2 = _interopRequireDefault(_emitter);\n\n\tvar _block = __webpack_require__(29);\n\n\tvar _block2 = _interopRequireDefault(_block);\n\n\tvar _break = __webpack_require__(30);\n\n\tvar _break2 = _interopRequireDefault(_break);\n\n\tvar _container = __webpack_require__(42);\n\n\tvar _container2 = _interopRequireDefault(_container);\n\n\tvar _code = __webpack_require__(28);\n\n\tvar _code2 = _interopRequireDefault(_code);\n\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\n\tfunction isLine(blot) {\n\t  return blot instanceof _block2.default || blot instanceof _block.BlockEmbed;\n\t}\n\n\tvar Scroll = function (_Parchment$Scroll) {\n\t  _inherits(Scroll, _Parchment$Scroll);\n\n\t  function Scroll(domNode, config) {\n\t    _classCallCheck(this, Scroll);\n\n\t    var _this = _possibleConstructorReturn(this, (Scroll.__proto__ || Object.getPrototypeOf(Scroll)).call(this, domNode));\n\n\t    _this.emitter = config.emitter;\n\t    if (Array.isArray(config.whitelist)) {\n\t      _this.whitelist = config.whitelist.reduce(function (whitelist, format) {\n\t        whitelist[format] = true;\n\t        return whitelist;\n\t      }, {});\n\t    }\n\t    _this.optimize();\n\t    _this.enable();\n\t    return _this;\n\t  }\n\n\t  _createClass(Scroll, [{\n\t    key: 'deleteAt',\n\t    value: function deleteAt(index, length) {\n\t      var _line = this.line(index),\n\t          _line2 = _slicedToArray(_line, 2),\n\t          first = _line2[0],\n\t          offset = _line2[1];\n\n\t      var _line3 = this.line(index + length),\n\t          _line4 = _slicedToArray(_line3, 1),\n\t          last = _line4[0];\n\n\t      _get(Scroll.prototype.__proto__ || Object.getPrototypeOf(Scroll.prototype), 'deleteAt', this).call(this, index, length);\n\t      if (last != null && first !== last && offset > 0 && !(first instanceof _block.BlockEmbed) && !(last instanceof _block.BlockEmbed)) {\n\t        if (last instanceof _code2.default) {\n\t          last.deleteAt(last.length() - 1, 1);\n\t        }\n\t        var ref = last.children.head instanceof _break2.default ? null : last.children.head;\n\t        first.moveChildren(last, ref);\n\t        first.remove();\n\t      }\n\t      this.optimize();\n\t    }\n\t  }, {\n\t    key: 'enable',\n\t    value: function enable() {\n\t      var enabled = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n\n\t      this.domNode.setAttribute('contenteditable', enabled);\n\t    }\n\t  }, {\n\t    key: 'formatAt',\n\t    value: function formatAt(index, length, format, value) {\n\t      if (this.whitelist != null && !this.whitelist[format]) return;\n\t      _get(Scroll.prototype.__proto__ || Object.getPrototypeOf(Scroll.prototype), 'formatAt', this).call(this, index, length, format, value);\n\t      this.optimize();\n\t    }\n\t  }, {\n\t    key: 'insertAt',\n\t    value: function insertAt(index, value, def) {\n\t      if (def != null && this.whitelist != null && !this.whitelist[value]) return;\n\t      if (index >= this.length()) {\n\t        if (def == null || _parchment2.default.query(value, _parchment2.default.Scope.BLOCK) == null) {\n\t          var blot = _parchment2.default.create(this.statics.defaultChild);\n\t          this.appendChild(blot);\n\t          if (def == null && value.endsWith('\\n')) {\n\t            value = value.slice(0, -1);\n\t          }\n\t          blot.insertAt(0, value, def);\n\t        } else {\n\t          var embed = _parchment2.default.create(value, def);\n\t          this.appendChild(embed);\n\t        }\n\t      } else {\n\t        _get(Scroll.prototype.__proto__ || Object.getPrototypeOf(Scroll.prototype), 'insertAt', this).call(this, index, value, def);\n\t      }\n\t      this.optimize();\n\t    }\n\t  }, {\n\t    key: 'insertBefore',\n\t    value: function insertBefore(blot, ref) {\n\t      if (blot.statics.scope === _parchment2.default.Scope.INLINE_BLOT) {\n\t        var wrapper = _parchment2.default.create(this.statics.defaultChild);\n\t        wrapper.appendChild(blot);\n\t        blot = wrapper;\n\t      }\n\t      _get(Scroll.prototype.__proto__ || Object.getPrototypeOf(Scroll.prototype), 'insertBefore', this).call(this, blot, ref);\n\t    }\n\t  }, {\n\t    key: 'leaf',\n\t    value: function leaf(index) {\n\t      return this.path(index).pop() || [null, -1];\n\t    }\n\t  }, {\n\t    key: 'line',\n\t    value: function line(index) {\n\t      if (index === this.length()) {\n\t        return this.line(index - 1);\n\t      }\n\t      return this.descendant(isLine, index);\n\t    }\n\t  }, {\n\t    key: 'lines',\n\t    value: function lines() {\n\t      var index = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n\t      var length = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Number.MAX_VALUE;\n\n\t      var getLines = function getLines(blot, index, length) {\n\t        var lines = [],\n\t            lengthLeft = length;\n\t        blot.children.forEachAt(index, length, function (child, index, length) {\n\t          if (isLine(child)) {\n\t            lines.push(child);\n\t          } else if (child instanceof _parchment2.default.Container) {\n\t            lines = lines.concat(getLines(child, index, lengthLeft));\n\t          }\n\t          lengthLeft -= length;\n\t        });\n\t        return lines;\n\t      };\n\t      return getLines(this, index, length);\n\t    }\n\t  }, {\n\t    key: 'optimize',\n\t    value: function optimize() {\n\t      var mutations = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n\n\t      if (this.batch === true) return;\n\t      _get(Scroll.prototype.__proto__ || Object.getPrototypeOf(Scroll.prototype), 'optimize', this).call(this, mutations);\n\t      if (mutations.length > 0) {\n\t        this.emitter.emit(_emitter2.default.events.SCROLL_OPTIMIZE, mutations);\n\t      }\n\t    }\n\t  }, {\n\t    key: 'path',\n\t    value: function path(index) {\n\t      return _get(Scroll.prototype.__proto__ || Object.getPrototypeOf(Scroll.prototype), 'path', this).call(this, index).slice(1); // Exclude self\n\t    }\n\t  }, {\n\t    key: 'update',\n\t    value: function update(mutations) {\n\t      if (this.batch === true) return;\n\t      var source = _emitter2.default.sources.USER;\n\t      if (typeof mutations === 'string') {\n\t        source = mutations;\n\t      }\n\t      if (!Array.isArray(mutations)) {\n\t        mutations = this.observer.takeRecords();\n\t      }\n\t      if (mutations.length > 0) {\n\t        this.emitter.emit(_emitter2.default.events.SCROLL_BEFORE_UPDATE, source, mutations);\n\t      }\n\t      _get(Scroll.prototype.__proto__ || Object.getPrototypeOf(Scroll.prototype), 'update', this).call(this, mutations.concat([])); // pass copy\n\t      if (mutations.length > 0) {\n\t        this.emitter.emit(_emitter2.default.events.SCROLL_UPDATE, source, mutations);\n\t      }\n\t    }\n\t  }]);\n\n\t  return Scroll;\n\t}(_parchment2.default.Scroll);\n\n\tScroll.blotName = 'scroll';\n\tScroll.className = 'ql-editor';\n\tScroll.tagName = 'DIV';\n\tScroll.defaultChild = 'block';\n\tScroll.allowedChildren = [_block2.default, _block.BlockEmbed, _container2.default];\n\n\texports.default = Scroll;\n\n/***/ },\n/* 44 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\texports.matchText = exports.matchSpacing = exports.matchNewline = exports.matchBlot = exports.matchAttributor = exports.default = undefined;\n\n\tvar _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"]) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); } }; }();\n\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\n\tvar _quillDelta = __webpack_require__(20);\n\n\tvar _quillDelta2 = _interopRequireDefault(_quillDelta);\n\n\tvar _parchment = __webpack_require__(2);\n\n\tvar _parchment2 = _interopRequireDefault(_parchment);\n\n\tvar _quill = __webpack_require__(18);\n\n\tvar _quill2 = _interopRequireDefault(_quill);\n\n\tvar _logger = __webpack_require__(37);\n\n\tvar _logger2 = _interopRequireDefault(_logger);\n\n\tvar _module = __webpack_require__(39);\n\n\tvar _module2 = _interopRequireDefault(_module);\n\n\tvar _align = __webpack_require__(45);\n\n\tvar _background = __webpack_require__(46);\n\n\tvar _color = __webpack_require__(47);\n\n\tvar _direction = __webpack_require__(48);\n\n\tvar _font = __webpack_require__(49);\n\n\tvar _size = __webpack_require__(50);\n\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n\tfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n\tfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\n\tvar debug = (0, _logger2.default)('quill:clipboard');\n\n\tvar DOM_KEY = '__ql-matcher';\n\n\tvar CLIPBOARD_CONFIG = [[Node.TEXT_NODE, matchText], ['br', matchBreak], [Node.ELEMENT_NODE, matchNewline], [Node.ELEMENT_NODE, matchBlot], [Node.ELEMENT_NODE, matchSpacing], [Node.ELEMENT_NODE, matchAttributor], [Node.ELEMENT_NODE, matchStyles], ['b', matchAlias.bind(matchAlias, 'bold')], ['i', matchAlias.bind(matchAlias, 'italic')], ['style', matchIgnore]];\n\n\tvar ATTRIBUTE_ATTRIBUTORS = [_align.AlignAttribute, _direction.DirectionAttribute].reduce(function (memo, attr) {\n\t  memo[attr.keyName] = attr;\n\t  return memo;\n\t}, {});\n\n\tvar STYLE_ATTRIBUTORS = [_align.AlignStyle, _background.BackgroundStyle, _color.ColorStyle, _direction.DirectionStyle, _font.FontStyle, _size.SizeStyle].reduce(function (memo, attr) {\n\t  memo[attr.keyName] = attr;\n\t  return memo;\n\t}, {});\n\n\tvar Clipboard = function (_Module) {\n\t  _inherits(Clipboard, _Module);\n\n\t  function Clipboard(quill, options) {\n\t    _classCallCheck(this, Clipboard);\n\n\t    var _this = _possibleConstructorReturn(this, (Clipboard.__proto__ || Object.getPrototypeOf(Clipboard)).call(this, quill, options));\n\n\t    _this.quill.root.addEventListener('paste', _this.onPaste.bind(_this));\n\t    _this.container = _this.quill.addContainer('ql-clipboard');\n\t    _this.container.setAttribute('contenteditable', true);\n\t    _this.container.setAttribute('tabindex', -1);\n\t    _this.matchers = [];\n\t    CLIPBOARD_CONFIG.concat(_this.options.matchers).forEach(function (pair) {\n\t      _this.addMatcher.apply(_this, _toConsumableArray(pair));\n\t    });\n\t    return _this;\n\t  }\n\n\t  _createClass(Clipboard, [{\n\t    key: 'addMatcher',\n\t    value: function addMatcher(selector, matcher) {\n\t      this.matchers.push([selector, matcher]);\n\t    }\n\t  }, {\n\t    key: 'convert',\n\t    value: function convert(html) {\n\t      if (typeof html === 'string') {\n\t        this.container.innerHTML = html;\n\t      }\n\n\t      var _prepareMatching = this.prepareMatching(),\n\t          _prepareMatching2 = _slicedToArray(_prepareMatching, 2),\n\t          elementMatchers = _prepareMatching2[0],\n\t          textMatchers = _prepareMatching2[1];\n\n\t      var delta = traverse(this.container, elementMatchers, textMatchers);\n\t      // Remove trailing newline\n\t      if (deltaEndsWith(delta, '\\n') && delta.ops[delta.ops.length - 1].attributes == null) {\n\t        delta = delta.compose(new _quillDelta2.default().retain(delta.length() - 1).delete(1));\n\t      }\n\t      debug.log('convert', this.container.innerHTML, delta);\n\t      this.container.innerHTML = '';\n\t      return delta;\n\t    }\n\t  }, {\n\t    key: 'dangerouslyPasteHTML',\n\t    value: function dangerouslyPasteHTML(index, html) {\n\t      var source = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : _quill2.default.sources.API;\n\n\t      if (typeof index === 'string') {\n\t        return this.quill.setContents(this.convert(index), html);\n\t      } else {\n\t        var paste = this.convert(html);\n\t        return this.quill.updateContents(new _quillDelta2.default().retain(index).concat(paste), source);\n\t      }\n\t    }\n\t  }, {\n\t    key: 'onPaste',\n\t    value: function onPaste(e) {\n\t      var _this2 = this;\n\n\t      if (e.defaultPrevented || !this.quill.isEnabled()) return;\n\t      var range = this.quill.getSelection();\n\t      var delta = new _quillDelta2.default().retain(range.index);\n\t      var scrollTop = this.quill.scrollingContainer.scrollTop;\n\t      this.container.focus();\n\t      setTimeout(function () {\n\t        _this2.quill.selection.update(_quill2.default.sources.SILENT);\n\t        delta = delta.concat(_this2.convert()).delete(range.length);\n\t        _this2.quill.updateContents(delta, _quill2.default.sources.USER);\n\t        // range.length contributes to delta.length()\n\t        _this2.quill.setSelection(delta.length() - range.length, _quill2.default.sources.SILENT);\n\t        _this2.quill.scrollingContainer.scrollTop = scrollTop;\n\t        _this2.quill.selection.scrollIntoView();\n\t      }, 1);\n\t    }\n\t  }, {\n\t    key: 'prepareMatching',\n\t    value: function prepareMatching() {\n\t      var _this3 = this;\n\n\t      var elementMatchers = [],\n\t          textMatchers = [];\n\t      this.matchers.forEach(function (pair) {\n\t        var _pair = _slicedToArray(pair, 2),\n\t            selector = _pair[0],\n\t            matcher = _pair[1];\n\n\t        switch (selector) {\n\t          case Node.TEXT_NODE:\n\t            textMatchers.push(matcher);\n\t            break;\n\t          case Node.ELEMENT_NODE:\n\t            elementMatchers.push(matcher);\n\t            break;\n\t          default:\n\t            [].forEach.call(_this3.container.querySelectorAll(selector), function (node) {\n\t              // TODO use weakmap\n\t              node[DOM_KEY] = node[DOM_KEY] || [];\n\t              node[DOM_KEY].push(matcher);\n\t            });\n\t            break;\n\t        }\n\t      });\n\t      return [elementMatchers, textMatchers];\n\t    }\n\t  }]);\n\n\t  return Clipboard;\n\t}(_module2.default);\n\n\tClipboard.DEFAULTS = {\n\t  matchers: []\n\t};\n\n\tfunction computeStyle(node) {\n\t  if (node.nodeType !== Node.ELEMENT_NODE) return {};\n\t  var DOM_KEY = '__ql-computed-style';\n\t  return node[DOM_KEY] || (node[DOM_KEY] = window.getComputedStyle(node));\n\t}\n\n\tfunction deltaEndsWith(delta, text) {\n\t  var endText = \"\";\n\t  for (var i = delta.ops.length - 1; i >= 0 && endText.length < text.length; --i) {\n\t    var op = delta.ops[i];\n\t    if (typeof op.insert !== 'string') break;\n\t    endText = op.insert + endText;\n\t  }\n\t  return endText.slice(-1 * text.length) === text;\n\t}\n\n\tfunction isLine(node) {\n\t  if (node.childNodes.length === 0) return false; // Exclude embed blocks\n\t  var style = computeStyle(node);\n\t  return ['block', 'list-item'].indexOf(style.display) > -1;\n\t}\n\n\tfunction traverse(node, elementMatchers, textMatchers) {\n\t  // Post-order\n\t  if (node.nodeType === node.TEXT_NODE) {\n\t    return textMatchers.reduce(function (delta, matcher) {\n\t      return matcher(node, delta);\n\t    }, new _quillDelta2.default());\n\t  } else if (node.nodeType === node.ELEMENT_NODE) {\n\t    return [].reduce.call(node.childNodes || [], function (delta, childNode) {\n\t      var childrenDelta = traverse(childNode, elementMatchers, textMatchers);\n\t      if (childNode.nodeType === node.ELEMENT_NODE) {\n\t        childrenDelta = elementMatchers.reduce(function (childrenDelta, matcher) {\n\t          return matcher(childNode, childrenDelta);\n\t        }, childrenDelta);\n\t        childrenDelta = (childNode[DOM_KEY] || []).reduce(function (childrenDelta, matcher) {\n\t          return matcher(childNode, childrenDelta);\n\t        }, childrenDelta);\n\t      }\n\t      return delta.concat(childrenDelta);\n\t    }, new _quillDelta2.default());\n\t  } else {\n\t    return new _quillDelta2.default();\n\t  }\n\t}\n\n\tfunction matchAlias(format, node, delta) {\n\t  return delta.compose(new _quillDelta2.default().retain(delta.length(), _defineProperty({}, format, true)));\n\t}\n\n\tfunction matchAttributor(node, delta) {\n\t  var attributes = _parchment2.default.Attributor.Attribute.keys(node);\n\t  var classes = _parchment2.default.Attributor.Class.keys(node);\n\t  var styles = _parchment2.default.Attributor.Style.keys(node);\n\t  var formats = {};\n\t  attributes.concat(classes).concat(styles).forEach(function (name) {\n\t    var attr = _parchment2.default.query(name, _parchment2.default.Scope.ATTRIBUTE);\n\t    if (attr != null) {\n\t      formats[attr.attrName] = attr.value(node);\n\t      if (formats[attr.attrName]) return;\n\t    }\n\t    if (ATTRIBUTE_ATTRIBUTORS[name] != null) {\n\t      attr = ATTRIBUTE_ATTRIBUTORS[name];\n\t      formats[attr.attrName] = attr.value(node) || undefined;\n\t    }\n\t    if (STYLE_ATTRIBUTORS[name] != null) {\n\t      attr = STYLE_ATTRIBUTORS[name];\n\t      formats[attr.attrName] = attr.value(node) || undefined;\n\t    }\n\t  });\n\t  if (Object.keys(formats).length > 0) {\n\t    delta = delta.compose(new _quillDelta2.default().retain(delta.length(), formats));\n\t  }\n\t  return delta;\n\t}\n\n\tfunction matchBlot(node, delta) {\n\t  var match = _parchment2.default.query(node);\n\t  if (match == null) return delta;\n\t  if (match.prototype instanceof _parchment2.default.Embed) {\n\t    var embed = {};\n\t    var value = match.value(node);\n\t    if (value != null) {\n\t      embed[match.blotName] = value;\n\t      delta = new _quillDelta2.default().insert(embed, match.formats(node));\n\t    }\n\t  } else if (typeof match.formats === 'function') {\n\t    var formats = _defineProperty({}, match.blotName, match.formats(node));\n\t    delta = delta.compose(new _quillDelta2.default().retain(delta.length(), formats));\n\t  }\n\t  return delta;\n\t}\n\n\tfunction matchBreak(node, delta) {\n\t  if (!deltaEndsWith(delta, '\\n')) {\n\t    delta.insert('\\n');\n\t  }\n\t  return delta;\n\t}\n\n\tfunction matchIgnore() {\n\t  return new _quillDelta2.default();\n\t}\n\n\tfunction matchNewline(node, delta) {\n\t  if (isLine(node) && !deltaEndsWith(delta, '\\n')) {\n\t    delta.insert('\\n');\n\t  }\n\t  return delta;\n\t}\n\n\tfunction matchSpacing(node, delta) {\n\t  if (isLine(node) && node.nextElementSibling != null && !deltaEndsWith(delta, '\\n\\n')) {\n\t    var nodeHeight = node.offsetHeight + parseFloat(computeStyle(node).marginTop) + parseFloat(computeStyle(node).marginBottom);\n\t    if (node.nextElementSibling.offsetTop > node.offsetTop + nodeHeight * 1.5) {\n\t      delta.insert('\\n');\n\t    }\n\t  }\n\t  return delta;\n\t}\n\n\tfunction matchStyles(node, delta) {\n\t  var formats = {};\n\t  var style = node.style || {};\n\t  if (style.fontStyle && computeStyle(node).fontStyle === 'italic') {\n\t    formats.italic = true;\n\t  }\n\t  if (style.fontWeight && computeStyle(node).fontWeight === 'bold') {\n\t    formats.bold = true;\n\t  }\n\t  if (Object.keys(formats).length > 0) {\n\t    delta = delta.compose(new _quillDelta2.default().retain(delta.length(), formats));\n\t  }\n\t  if (parseFloat(style.textIndent || 0) > 0) {\n\t    // Could be 0.5in\n\t    delta = new _quillDelta2.default().insert('\\t').concat(delta);\n\t  }\n\t  return delta;\n\t}\n\n\tfunction matchText(node, delta) {\n\t  var text = node.data;\n\t  // Word represents empty line with <o:p>&nbsp;</o:p>\n\t  if (node.parentNode.tagName === 'O:P') {\n\t    return delta.insert(text.trim());\n\t  }\n\t  if (!computeStyle(node.parentNode).whiteSpace.startsWith('pre')) {\n\t    // eslint-disable-next-line func-style\n\t    var replacer = function replacer(collapse, match) {\n\t      match = match.replace(/[^\\u00a0]/g, ''); // \\u00a0 is nbsp;\n\t      return match.length < 1 && collapse ? ' ' : match;\n\t    };\n\t    text = text.replace(/\\r\\n/g, ' ').replace(/\\n/g, ' ');\n\t    text = text.replace(/\\s\\s+/g, replacer.bind(replacer, true)); // collapse whitespace\n\t    if (node.previousSibling == null && isLine(node.parentNode) || node.previousSibling != null && isLine(node.previousSibling)) {\n\t      text = text.replace(/^\\s+/, replacer.bind(replacer, false));\n\t    }\n\t    if (node.nextSibling == null && isLine(node.parentNode) || node.nextSibling != null && isLine(node.nextSibling)) {\n\t      text = text.replace(/\\s+$/, replacer.bind(replacer, false));\n\t    }\n\t  }\n\t  return delta.insert(text);\n\t}\n\n\texports.default = Clipboard;\n\texports.matchAttributor = matchAttributor;\n\texports.matchBlot = matchBlot;\n\texports.matchNewline = matchNewline;\n\texports.matchSpacing = matchSpacing;\n\texports.matchText = matchText;\n\n/***/ },\n/* 45 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\texports.AlignStyle = exports.AlignClass = exports.AlignAttribute = undefined;\n\n\tvar _parchment = __webpack_require__(2);\n\n\tvar _parchment2 = _interopRequireDefault(_parchment);\n\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n\tvar config = {\n\t  scope: _parchment2.default.Scope.BLOCK,\n\t  whitelist: ['right', 'center', 'justify']\n\t};\n\n\tvar AlignAttribute = new _parchment2.default.Attributor.Attribute('align', 'align', config);\n\tvar AlignClass = new _parchment2.default.Attributor.Class('align', 'ql-align', config);\n\tvar AlignStyle = new _parchment2.default.Attributor.Style('align', 'text-align', config);\n\n\texports.AlignAttribute = AlignAttribute;\n\texports.AlignClass = AlignClass;\n\texports.AlignStyle = AlignStyle;\n\n/***/ },\n/* 46 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\texports.BackgroundStyle = exports.BackgroundClass = undefined;\n\n\tvar _parchment = __webpack_require__(2);\n\n\tvar _parchment2 = _interopRequireDefault(_parchment);\n\n\tvar _color = __webpack_require__(47);\n\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n\tvar BackgroundClass = new _parchment2.default.Attributor.Class('background', 'ql-bg', {\n\t  scope: _parchment2.default.Scope.INLINE\n\t});\n\tvar BackgroundStyle = new _color.ColorAttributor('background', 'background-color', {\n\t  scope: _parchment2.default.Scope.INLINE\n\t});\n\n\texports.BackgroundClass = BackgroundClass;\n\texports.BackgroundStyle = BackgroundStyle;\n\n/***/ },\n/* 47 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\texports.ColorStyle = exports.ColorClass = exports.ColorAttributor = undefined;\n\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\n\tvar _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if (\"value\" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };\n\n\tvar _parchment = __webpack_require__(2);\n\n\tvar _parchment2 = _interopRequireDefault(_parchment);\n\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\n\tvar ColorAttributor = function (_Parchment$Attributor) {\n\t  _inherits(ColorAttributor, _Parchment$Attributor);\n\n\t  function ColorAttributor() {\n\t    _classCallCheck(this, ColorAttributor);\n\n\t    return _possibleConstructorReturn(this, (ColorAttributor.__proto__ || Object.getPrototypeOf(ColorAttributor)).apply(this, arguments));\n\t  }\n\n\t  _createClass(ColorAttributor, [{\n\t    key: 'value',\n\t    value: function value(domNode) {\n\t      var value = _get(ColorAttributor.prototype.__proto__ || Object.getPrototypeOf(ColorAttributor.prototype), 'value', this).call(this, domNode);\n\t      if (!value.startsWith('rgb(')) return value;\n\t      value = value.replace(/^[^\\d]+/, '').replace(/[^\\d]+$/, '');\n\t      return '#' + value.split(',').map(function (component) {\n\t        return ('00' + parseInt(component).toString(16)).slice(-2);\n\t      }).join('');\n\t    }\n\t  }]);\n\n\t  return ColorAttributor;\n\t}(_parchment2.default.Attributor.Style);\n\n\tvar ColorClass = new _parchment2.default.Attributor.Class('color', 'ql-color', {\n\t  scope: _parchment2.default.Scope.INLINE\n\t});\n\tvar ColorStyle = new ColorAttributor('color', 'color', {\n\t  scope: _parchment2.default.Scope.INLINE\n\t});\n\n\texports.ColorAttributor = ColorAttributor;\n\texports.ColorClass = ColorClass;\n\texports.ColorStyle = ColorStyle;\n\n/***/ },\n/* 48 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\texports.DirectionStyle = exports.DirectionClass = exports.DirectionAttribute = undefined;\n\n\tvar _parchment = __webpack_require__(2);\n\n\tvar _parchment2 = _interopRequireDefault(_parchment);\n\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n\tvar config = {\n\t  scope: _parchment2.default.Scope.BLOCK,\n\t  whitelist: ['rtl']\n\t};\n\n\tvar DirectionAttribute = new _parchment2.default.Attributor.Attribute('direction', 'dir', config);\n\tvar DirectionClass = new _parchment2.default.Attributor.Class('direction', 'ql-direction', config);\n\tvar DirectionStyle = new _parchment2.default.Attributor.Style('direction', 'direction', config);\n\n\texports.DirectionAttribute = DirectionAttribute;\n\texports.DirectionClass = DirectionClass;\n\texports.DirectionStyle = DirectionStyle;\n\n/***/ },\n/* 49 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\texports.FontClass = exports.FontStyle = undefined;\n\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\n\tvar _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if (\"value\" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };\n\n\tvar _parchment = __webpack_require__(2);\n\n\tvar _parchment2 = _interopRequireDefault(_parchment);\n\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\n\tvar config = {\n\t  scope: _parchment2.default.Scope.INLINE,\n\t  whitelist: ['serif', 'monospace']\n\t};\n\n\tvar FontClass = new _parchment2.default.Attributor.Class('font', 'ql-font', config);\n\n\tvar FontStyleAttributor = function (_Parchment$Attributor) {\n\t  _inherits(FontStyleAttributor, _Parchment$Attributor);\n\n\t  function FontStyleAttributor() {\n\t    _classCallCheck(this, FontStyleAttributor);\n\n\t    return _possibleConstructorReturn(this, (FontStyleAttributor.__proto__ || Object.getPrototypeOf(FontStyleAttributor)).apply(this, arguments));\n\t  }\n\n\t  _createClass(FontStyleAttributor, [{\n\t    key: 'value',\n\t    value: function value(node) {\n\t      return _get(FontStyleAttributor.prototype.__proto__ || Object.getPrototypeOf(FontStyleAttributor.prototype), 'value', this).call(this, node).replace(/[\"']/g, '');\n\t    }\n\t  }]);\n\n\t  return FontStyleAttributor;\n\t}(_parchment2.default.Attributor.Style);\n\n\tvar FontStyle = new FontStyleAttributor('font', 'font-family', config);\n\n\texports.FontStyle = FontStyle;\n\texports.FontClass = FontClass;\n\n/***/ },\n/* 50 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\texports.SizeStyle = exports.SizeClass = undefined;\n\n\tvar _parchment = __webpack_require__(2);\n\n\tvar _parchment2 = _interopRequireDefault(_parchment);\n\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n\tvar SizeClass = new _parchment2.default.Attributor.Class('size', 'ql-size', {\n\t  scope: _parchment2.default.Scope.INLINE,\n\t  whitelist: ['small', 'large', 'huge']\n\t});\n\tvar SizeStyle = new _parchment2.default.Attributor.Style('size', 'font-size', {\n\t  scope: _parchment2.default.Scope.INLINE,\n\t  whitelist: ['10px', '18px', '32px']\n\t});\n\n\texports.SizeClass = SizeClass;\n\texports.SizeStyle = SizeStyle;\n\n/***/ },\n/* 51 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\texports.getLastChangeIndex = exports.default = undefined;\n\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\n\tvar _parchment = __webpack_require__(2);\n\n\tvar _parchment2 = _interopRequireDefault(_parchment);\n\n\tvar _quill = __webpack_require__(18);\n\n\tvar _quill2 = _interopRequireDefault(_quill);\n\n\tvar _module = __webpack_require__(39);\n\n\tvar _module2 = _interopRequireDefault(_module);\n\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\n\tvar History = function (_Module) {\n\t  _inherits(History, _Module);\n\n\t  function History(quill, options) {\n\t    _classCallCheck(this, History);\n\n\t    var _this = _possibleConstructorReturn(this, (History.__proto__ || Object.getPrototypeOf(History)).call(this, quill, options));\n\n\t    _this.lastRecorded = 0;\n\t    _this.ignoreChange = false;\n\t    _this.clear();\n\t    _this.quill.on(_quill2.default.events.EDITOR_CHANGE, function (eventName, delta, oldDelta, source) {\n\t      if (eventName !== _quill2.default.events.TEXT_CHANGE || _this.ignoreChange) return;\n\t      if (!_this.options.userOnly || source === _quill2.default.sources.USER) {\n\t        _this.record(delta, oldDelta);\n\t      } else {\n\t        _this.transform(delta);\n\t      }\n\t    });\n\t    _this.quill.keyboard.addBinding({ key: 'Z', shortKey: true }, _this.undo.bind(_this));\n\t    _this.quill.keyboard.addBinding({ key: 'Z', shortKey: true, shiftKey: true }, _this.redo.bind(_this));\n\t    if (/Win/i.test(navigator.platform)) {\n\t      _this.quill.keyboard.addBinding({ key: 'Y', shortKey: true }, _this.redo.bind(_this));\n\t    }\n\t    return _this;\n\t  }\n\n\t  _createClass(History, [{\n\t    key: 'change',\n\t    value: function change(source, dest) {\n\t      if (this.stack[source].length === 0) return;\n\t      var delta = this.stack[source].pop();\n\t      this.lastRecorded = 0;\n\t      this.ignoreChange = true;\n\t      this.quill.updateContents(delta[source], _quill2.default.sources.USER);\n\t      this.ignoreChange = false;\n\t      var index = getLastChangeIndex(delta[source]);\n\t      this.quill.setSelection(index);\n\t      this.quill.selection.scrollIntoView();\n\t      this.stack[dest].push(delta);\n\t    }\n\t  }, {\n\t    key: 'clear',\n\t    value: function clear() {\n\t      this.stack = { undo: [], redo: [] };\n\t    }\n\t  }, {\n\t    key: 'record',\n\t    value: function record(changeDelta, oldDelta) {\n\t      if (changeDelta.ops.length === 0) return;\n\t      this.stack.redo = [];\n\t      var undoDelta = this.quill.getContents().diff(oldDelta);\n\t      var timestamp = Date.now();\n\t      if (this.lastRecorded + this.options.delay > timestamp && this.stack.undo.length > 0) {\n\t        var delta = this.stack.undo.pop();\n\t        undoDelta = undoDelta.compose(delta.undo);\n\t        changeDelta = delta.redo.compose(changeDelta);\n\t      } else {\n\t        this.lastRecorded = timestamp;\n\t      }\n\t      this.stack.undo.push({\n\t        redo: changeDelta,\n\t        undo: undoDelta\n\t      });\n\t      if (this.stack.undo.length > this.options.maxStack) {\n\t        this.stack.undo.shift();\n\t      }\n\t    }\n\t  }, {\n\t    key: 'redo',\n\t    value: function redo() {\n\t      this.change('redo', 'undo');\n\t    }\n\t  }, {\n\t    key: 'transform',\n\t    value: function transform(delta) {\n\t      this.stack.undo.forEach(function (change) {\n\t        change.undo = delta.transform(change.undo, true);\n\t        change.redo = delta.transform(change.redo, true);\n\t      });\n\t      this.stack.redo.forEach(function (change) {\n\t        change.undo = delta.transform(change.undo, true);\n\t        change.redo = delta.transform(change.redo, true);\n\t      });\n\t    }\n\t  }, {\n\t    key: 'undo',\n\t    value: function undo() {\n\t      this.change('undo', 'redo');\n\t    }\n\t  }]);\n\n\t  return History;\n\t}(_module2.default);\n\n\tHistory.DEFAULTS = {\n\t  delay: 1000,\n\t  maxStack: 100,\n\t  userOnly: false\n\t};\n\n\tfunction endsWithNewlineChange(delta) {\n\t  var lastOp = delta.ops[delta.ops.length - 1];\n\t  if (lastOp == null) return false;\n\t  if (lastOp.insert != null) {\n\t    return typeof lastOp.insert === 'string' && lastOp.insert.endsWith('\\n');\n\t  }\n\t  if (lastOp.attributes != null) {\n\t    return Object.keys(lastOp.attributes).some(function (attr) {\n\t      return _parchment2.default.query(attr, _parchment2.default.Scope.BLOCK) != null;\n\t    });\n\t  }\n\t  return false;\n\t}\n\n\tfunction getLastChangeIndex(delta) {\n\t  var deleteLength = delta.reduce(function (length, op) {\n\t    length += op.delete || 0;\n\t    return length;\n\t  }, 0);\n\t  var changeIndex = delta.length() - deleteLength;\n\t  if (endsWithNewlineChange(delta)) {\n\t    changeIndex -= 1;\n\t  }\n\t  return changeIndex;\n\t}\n\n\texports.default = History;\n\texports.getLastChangeIndex = getLastChangeIndex;\n\n/***/ },\n/* 52 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\n\tvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\n\tvar _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"]) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); } }; }();\n\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\n\tvar _clone = __webpack_require__(38);\n\n\tvar _clone2 = _interopRequireDefault(_clone);\n\n\tvar _deepEqual = __webpack_require__(22);\n\n\tvar _deepEqual2 = _interopRequireDefault(_deepEqual);\n\n\tvar _extend = __webpack_require__(25);\n\n\tvar _extend2 = _interopRequireDefault(_extend);\n\n\tvar _op = __webpack_require__(26);\n\n\tvar _op2 = _interopRequireDefault(_op);\n\n\tvar _parchment = __webpack_require__(2);\n\n\tvar _parchment2 = _interopRequireDefault(_parchment);\n\n\tvar _quill = __webpack_require__(18);\n\n\tvar _quill2 = _interopRequireDefault(_quill);\n\n\tvar _logger = __webpack_require__(37);\n\n\tvar _logger2 = _interopRequireDefault(_logger);\n\n\tvar _module = __webpack_require__(39);\n\n\tvar _module2 = _interopRequireDefault(_module);\n\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\n\tvar debug = (0, _logger2.default)('quill:keyboard');\n\n\tvar SHORTKEY = /Mac/i.test(navigator.platform) ? 'metaKey' : 'ctrlKey';\n\n\tvar Keyboard = function (_Module) {\n\t  _inherits(Keyboard, _Module);\n\n\t  _createClass(Keyboard, null, [{\n\t    key: 'match',\n\t    value: function match(evt, binding) {\n\t      binding = normalize(binding);\n\t      if (!!binding.shortKey !== evt[SHORTKEY] && binding.shortKey !== null) return false;\n\t      if (['altKey', 'ctrlKey', 'metaKey', 'shiftKey'].some(function (key) {\n\t        return key != SHORTKEY && !!binding[key] !== evt[key] && binding[key] !== null;\n\t      })) {\n\t        return false;\n\t      }\n\t      return binding.key === (evt.which || evt.keyCode);\n\t    }\n\t  }]);\n\n\t  function Keyboard(quill, options) {\n\t    _classCallCheck(this, Keyboard);\n\n\t    var _this = _possibleConstructorReturn(this, (Keyboard.__proto__ || Object.getPrototypeOf(Keyboard)).call(this, quill, options));\n\n\t    _this.bindings = {};\n\t    Object.keys(_this.options.bindings).forEach(function (name) {\n\t      if (_this.options.bindings[name]) {\n\t        _this.addBinding(_this.options.bindings[name]);\n\t      }\n\t    });\n\t    _this.addBinding({ key: Keyboard.keys.ENTER, shiftKey: null }, handleEnter);\n\t    _this.addBinding({ key: Keyboard.keys.ENTER, metaKey: null, ctrlKey: null, altKey: null }, function () {});\n\t    if (/Gecko/i.test(navigator.userAgent)) {\n\t      // Need to handle delete and backspace for Firefox in the general case #1171\n\t      _this.addBinding({ key: Keyboard.keys.BACKSPACE }, { collapsed: true }, handleBackspace);\n\t      _this.addBinding({ key: Keyboard.keys.DELETE }, { collapsed: true }, handleDelete);\n\t    } else {\n\t      _this.addBinding({ key: Keyboard.keys.BACKSPACE }, { collapsed: true, prefix: /^.?$/ }, handleBackspace);\n\t      _this.addBinding({ key: Keyboard.keys.DELETE }, { collapsed: true, suffix: /^.?$/ }, handleDelete);\n\t    }\n\t    _this.addBinding({ key: Keyboard.keys.BACKSPACE }, { collapsed: false }, handleDeleteRange);\n\t    _this.addBinding({ key: Keyboard.keys.DELETE }, { collapsed: false }, handleDeleteRange);\n\t    _this.listen();\n\t    return _this;\n\t  }\n\n\t  _createClass(Keyboard, [{\n\t    key: 'addBinding',\n\t    value: function addBinding(key) {\n\t      var context = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\t      var handler = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n\t      var binding = normalize(key);\n\t      if (binding == null || binding.key == null) {\n\t        return debug.warn('Attempted to add invalid keyboard binding', binding);\n\t      }\n\t      if (typeof context === 'function') {\n\t        context = { handler: context };\n\t      }\n\t      if (typeof handler === 'function') {\n\t        handler = { handler: handler };\n\t      }\n\t      binding = (0, _extend2.default)(binding, context, handler);\n\t      this.bindings[binding.key] = this.bindings[binding.key] || [];\n\t      this.bindings[binding.key].push(binding);\n\t    }\n\t  }, {\n\t    key: 'listen',\n\t    value: function listen() {\n\t      var _this2 = this;\n\n\t      this.quill.root.addEventListener('keydown', function (evt) {\n\t        if (evt.defaultPrevented) return;\n\t        var which = evt.which || evt.keyCode;\n\t        var bindings = (_this2.bindings[which] || []).filter(function (binding) {\n\t          return Keyboard.match(evt, binding);\n\t        });\n\t        if (bindings.length === 0) return;\n\t        var range = _this2.quill.getSelection();\n\t        if (range == null || !_this2.quill.hasFocus()) return;\n\n\t        var _quill$scroll$line = _this2.quill.scroll.line(range.index),\n\t            _quill$scroll$line2 = _slicedToArray(_quill$scroll$line, 2),\n\t            line = _quill$scroll$line2[0],\n\t            offset = _quill$scroll$line2[1];\n\n\t        var _quill$scroll$leaf = _this2.quill.scroll.leaf(range.index),\n\t            _quill$scroll$leaf2 = _slicedToArray(_quill$scroll$leaf, 2),\n\t            leafStart = _quill$scroll$leaf2[0],\n\t            offsetStart = _quill$scroll$leaf2[1];\n\n\t        var _ref = range.length === 0 ? [leafStart, offsetStart] : _this2.quill.scroll.leaf(range.index + range.length),\n\t            _ref2 = _slicedToArray(_ref, 2),\n\t            leafEnd = _ref2[0],\n\t            offsetEnd = _ref2[1];\n\n\t        var prefixText = leafStart instanceof _parchment2.default.Text ? leafStart.value().slice(0, offsetStart) : '';\n\t        var suffixText = leafEnd instanceof _parchment2.default.Text ? leafEnd.value().slice(offsetEnd) : '';\n\t        var curContext = {\n\t          collapsed: range.length === 0,\n\t          empty: range.length === 0 && line.length() <= 1,\n\t          format: _this2.quill.getFormat(range),\n\t          offset: offset,\n\t          prefix: prefixText,\n\t          suffix: suffixText\n\t        };\n\t        var prevented = bindings.some(function (binding) {\n\t          if (binding.collapsed != null && binding.collapsed !== curContext.collapsed) return false;\n\t          if (binding.empty != null && binding.empty !== curContext.empty) return false;\n\t          if (binding.offset != null && binding.offset !== curContext.offset) return false;\n\t          if (Array.isArray(binding.format)) {\n\t            // any format is present\n\t            if (binding.format.every(function (name) {\n\t              return curContext.format[name] == null;\n\t            })) {\n\t              return false;\n\t            }\n\t          } else if (_typeof(binding.format) === 'object') {\n\t            // all formats must match\n\t            if (!Object.keys(binding.format).every(function (name) {\n\t              if (binding.format[name] === true) return curContext.format[name] != null;\n\t              if (binding.format[name] === false) return curContext.format[name] == null;\n\t              return (0, _deepEqual2.default)(binding.format[name], curContext.format[name]);\n\t            })) {\n\t              return false;\n\t            }\n\t          }\n\t          if (binding.prefix != null && !binding.prefix.test(curContext.prefix)) return false;\n\t          if (binding.suffix != null && !binding.suffix.test(curContext.suffix)) return false;\n\t          return binding.handler.call(_this2, range, curContext) !== true;\n\t        });\n\t        if (prevented) {\n\t          evt.preventDefault();\n\t        }\n\t      });\n\t    }\n\t  }]);\n\n\t  return Keyboard;\n\t}(_module2.default);\n\n\tKeyboard.keys = {\n\t  BACKSPACE: 8,\n\t  TAB: 9,\n\t  ENTER: 13,\n\t  ESCAPE: 27,\n\t  LEFT: 37,\n\t  UP: 38,\n\t  RIGHT: 39,\n\t  DOWN: 40,\n\t  DELETE: 46\n\t};\n\n\tKeyboard.DEFAULTS = {\n\t  bindings: {\n\t    'bold': makeFormatHandler('bold'),\n\t    'italic': makeFormatHandler('italic'),\n\t    'underline': makeFormatHandler('underline'),\n\t    'indent': {\n\t      // highlight tab or tab at beginning of list, indent or blockquote\n\t      key: Keyboard.keys.TAB,\n\t      format: ['blockquote', 'indent', 'list'],\n\t      handler: function handler(range, context) {\n\t        if (context.collapsed && context.offset !== 0) return true;\n\t        this.quill.format('indent', '+1', _quill2.default.sources.USER);\n\t      }\n\t    },\n\t    'outdent': {\n\t      key: Keyboard.keys.TAB,\n\t      shiftKey: true,\n\t      format: ['blockquote', 'indent', 'list'],\n\t      // highlight tab or tab at beginning of list, indent or blockquote\n\t      handler: function handler(range, context) {\n\t        if (context.collapsed && context.offset !== 0) return true;\n\t        this.quill.format('indent', '-1', _quill2.default.sources.USER);\n\t      }\n\t    },\n\t    'outdent backspace': {\n\t      key: Keyboard.keys.BACKSPACE,\n\t      collapsed: true,\n\t      format: ['blockquote', 'indent', 'list'],\n\t      offset: 0,\n\t      handler: function handler(range, context) {\n\t        if (context.format.indent != null) {\n\t          this.quill.format('indent', '-1', _quill2.default.sources.USER);\n\t        } else if (context.format.blockquote != null) {\n\t          this.quill.format('blockquote', false, _quill2.default.sources.USER);\n\t        } else if (context.format.list != null) {\n\t          this.quill.format('list', false, _quill2.default.sources.USER);\n\t        }\n\t      }\n\t    },\n\t    'indent code-block': makeCodeBlockHandler(true),\n\t    'outdent code-block': makeCodeBlockHandler(false),\n\t    'remove tab': {\n\t      key: Keyboard.keys.TAB,\n\t      shiftKey: true,\n\t      collapsed: true,\n\t      prefix: /\\t$/,\n\t      handler: function handler(range) {\n\t        this.quill.deleteText(range.index - 1, 1, _quill2.default.sources.USER);\n\t      }\n\t    },\n\t    'tab': {\n\t      key: Keyboard.keys.TAB,\n\t      handler: function handler(range, context) {\n\t        if (!context.collapsed) {\n\t          this.quill.scroll.deleteAt(range.index, range.length);\n\t        }\n\t        this.quill.insertText(range.index, '\\t', _quill2.default.sources.USER);\n\t        this.quill.setSelection(range.index + 1, _quill2.default.sources.SILENT);\n\t      }\n\t    },\n\t    'list empty enter': {\n\t      key: Keyboard.keys.ENTER,\n\t      collapsed: true,\n\t      format: ['list'],\n\t      empty: true,\n\t      handler: function handler(range, context) {\n\t        this.quill.format('list', false, _quill2.default.sources.USER);\n\t        if (context.format.indent) {\n\t          this.quill.format('indent', false, _quill2.default.sources.USER);\n\t        }\n\t      }\n\t    },\n\t    'checklist enter': {\n\t      key: Keyboard.keys.ENTER,\n\t      collapsed: true,\n\t      format: { list: 'checked' },\n\t      handler: function handler(range) {\n\t        this.quill.scroll.insertAt(range.index, '\\n');\n\n\t        var _quill$scroll$line3 = this.quill.scroll.line(range.index + 1),\n\t            _quill$scroll$line4 = _slicedToArray(_quill$scroll$line3, 1),\n\t            line = _quill$scroll$line4[0];\n\n\t        line.format('list', 'unchecked');\n\t        this.quill.update(_quill2.default.sources.USER);\n\t        this.quill.setSelection(range.index + 1, _quill2.default.sources.SILENT);\n\t        this.quill.selection.scrollIntoView();\n\t      }\n\t    },\n\t    'header enter': {\n\t      key: Keyboard.keys.ENTER,\n\t      collapsed: true,\n\t      format: ['header'],\n\t      suffix: /^$/,\n\t      handler: function handler(range) {\n\t        this.quill.scroll.insertAt(range.index, '\\n');\n\t        this.quill.formatText(range.index + 1, 1, 'header', false, _quill2.default.sources.USER);\n\t        this.quill.setSelection(range.index + 1, _quill2.default.sources.SILENT);\n\t        this.quill.selection.scrollIntoView();\n\t      }\n\t    },\n\t    'list autofill': {\n\t      key: ' ',\n\t      collapsed: true,\n\t      format: { list: false },\n\t      prefix: /^(1\\.|-)$/,\n\t      handler: function handler(range, context) {\n\t        var length = context.prefix.length;\n\t        this.quill.scroll.deleteAt(range.index - length, length);\n\t        this.quill.formatLine(range.index - length, 1, 'list', length === 1 ? 'bullet' : 'ordered', _quill2.default.sources.USER);\n\t        this.quill.setSelection(range.index - length, _quill2.default.sources.SILENT);\n\t      }\n\t    }\n\t  }\n\t};\n\n\tfunction handleBackspace(range, context) {\n\t  if (range.index === 0) return;\n\n\t  var _quill$scroll$line5 = this.quill.scroll.line(range.index),\n\t      _quill$scroll$line6 = _slicedToArray(_quill$scroll$line5, 1),\n\t      line = _quill$scroll$line6[0];\n\n\t  var formats = {};\n\t  if (context.offset === 0) {\n\t    var curFormats = line.formats();\n\t    var prevFormats = this.quill.getFormat(range.index - 1, 1);\n\t    formats = _op2.default.attributes.diff(curFormats, prevFormats) || {};\n\t  }\n\t  this.quill.deleteText(range.index - 1, 1, _quill2.default.sources.USER);\n\t  if (Object.keys(formats).length > 0) {\n\t    this.quill.formatLine(range.index - 1, 1, formats, _quill2.default.sources.USER);\n\t  }\n\t  this.quill.selection.scrollIntoView();\n\t}\n\n\tfunction handleDelete(range) {\n\t  if (range.index >= this.quill.getLength() - 1) return;\n\t  this.quill.deleteText(range.index, 1, _quill2.default.sources.USER);\n\t}\n\n\tfunction handleDeleteRange(range) {\n\t  this.quill.deleteText(range, _quill2.default.sources.USER);\n\t  this.quill.setSelection(range.index, _quill2.default.sources.SILENT);\n\t  this.quill.selection.scrollIntoView();\n\t}\n\n\tfunction handleEnter(range, context) {\n\t  var _this3 = this;\n\n\t  if (range.length > 0) {\n\t    this.quill.scroll.deleteAt(range.index, range.length); // So we do not trigger text-change\n\t  }\n\t  var lineFormats = Object.keys(context.format).reduce(function (lineFormats, format) {\n\t    if (_parchment2.default.query(format, _parchment2.default.Scope.BLOCK) && !Array.isArray(context.format[format])) {\n\t      lineFormats[format] = context.format[format];\n\t    }\n\t    return lineFormats;\n\t  }, {});\n\t  this.quill.insertText(range.index, '\\n', lineFormats, _quill2.default.sources.USER);\n\t  this.quill.selection.scrollIntoView();\n\t  Object.keys(context.format).forEach(function (name) {\n\t    if (lineFormats[name] != null) return;\n\t    if (Array.isArray(context.format[name])) return;\n\t    if (name === 'link') return;\n\t    _this3.quill.format(name, context.format[name], _quill2.default.sources.USER);\n\t  });\n\t}\n\n\tfunction makeCodeBlockHandler(indent) {\n\t  return {\n\t    key: Keyboard.keys.TAB,\n\t    shiftKey: !indent,\n\t    format: { 'code-block': true },\n\t    handler: function handler(range) {\n\t      var CodeBlock = _parchment2.default.query('code-block');\n\t      var index = range.index,\n\t          length = range.length;\n\n\t      var _quill$scroll$descend = this.quill.scroll.descendant(CodeBlock, index),\n\t          _quill$scroll$descend2 = _slicedToArray(_quill$scroll$descend, 2),\n\t          block = _quill$scroll$descend2[0],\n\t          offset = _quill$scroll$descend2[1];\n\n\t      if (block == null) return;\n\t      var scrollOffset = this.quill.scroll.offset(block);\n\t      var start = block.newlineIndex(offset, true) + 1;\n\t      var end = block.newlineIndex(scrollOffset + offset + length);\n\t      var lines = block.domNode.textContent.slice(start, end).split('\\n');\n\t      offset = 0;\n\t      lines.forEach(function (line, i) {\n\t        if (indent) {\n\t          block.insertAt(start + offset, CodeBlock.TAB);\n\t          offset += CodeBlock.TAB.length;\n\t          if (i === 0) {\n\t            index += CodeBlock.TAB.length;\n\t          } else {\n\t            length += CodeBlock.TAB.length;\n\t          }\n\t        } else if (line.startsWith(CodeBlock.TAB)) {\n\t          block.deleteAt(start + offset, CodeBlock.TAB.length);\n\t          offset -= CodeBlock.TAB.length;\n\t          if (i === 0) {\n\t            index -= CodeBlock.TAB.length;\n\t          } else {\n\t            length -= CodeBlock.TAB.length;\n\t          }\n\t        }\n\t        offset += line.length + 1;\n\t      });\n\t      this.quill.update(_quill2.default.sources.USER);\n\t      this.quill.setSelection(index, length, _quill2.default.sources.SILENT);\n\t    }\n\t  };\n\t}\n\n\tfunction makeFormatHandler(format) {\n\t  return {\n\t    key: format[0].toUpperCase(),\n\t    shortKey: true,\n\t    handler: function handler(range, context) {\n\t      this.quill.format(format, !context.format[format], _quill2.default.sources.USER);\n\t    }\n\t  };\n\t}\n\n\tfunction normalize(binding) {\n\t  if (typeof binding === 'string' || typeof binding === 'number') {\n\t    return normalize({ key: binding });\n\t  }\n\t  if ((typeof binding === 'undefined' ? 'undefined' : _typeof(binding)) === 'object') {\n\t    binding = (0, _clone2.default)(binding, false);\n\t  }\n\t  if (typeof binding.key === 'string') {\n\t    if (Keyboard.keys[binding.key.toUpperCase()] != null) {\n\t      binding.key = Keyboard.keys[binding.key.toUpperCase()];\n\t    } else if (binding.key.length === 1) {\n\t      binding.key = binding.key.toUpperCase().charCodeAt(0);\n\t    } else {\n\t      return null;\n\t    }\n\t  }\n\t  return binding;\n\t}\n\n\texports.default = Keyboard;\n\n/***/ },\n/* 53 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\tvar _core = __webpack_require__(1);\n\n\tvar _core2 = _interopRequireDefault(_core);\n\n\tvar _align = __webpack_require__(45);\n\n\tvar _direction = __webpack_require__(48);\n\n\tvar _indent = __webpack_require__(54);\n\n\tvar _blockquote = __webpack_require__(55);\n\n\tvar _blockquote2 = _interopRequireDefault(_blockquote);\n\n\tvar _header = __webpack_require__(56);\n\n\tvar _header2 = _interopRequireDefault(_header);\n\n\tvar _list = __webpack_require__(57);\n\n\tvar _list2 = _interopRequireDefault(_list);\n\n\tvar _background = __webpack_require__(46);\n\n\tvar _color = __webpack_require__(47);\n\n\tvar _font = __webpack_require__(49);\n\n\tvar _size = __webpack_require__(50);\n\n\tvar _bold = __webpack_require__(58);\n\n\tvar _bold2 = _interopRequireDefault(_bold);\n\n\tvar _italic = __webpack_require__(59);\n\n\tvar _italic2 = _interopRequireDefault(_italic);\n\n\tvar _link = __webpack_require__(60);\n\n\tvar _link2 = _interopRequireDefault(_link);\n\n\tvar _script = __webpack_require__(61);\n\n\tvar _script2 = _interopRequireDefault(_script);\n\n\tvar _strike = __webpack_require__(62);\n\n\tvar _strike2 = _interopRequireDefault(_strike);\n\n\tvar _underline = __webpack_require__(63);\n\n\tvar _underline2 = _interopRequireDefault(_underline);\n\n\tvar _image = __webpack_require__(64);\n\n\tvar _image2 = _interopRequireDefault(_image);\n\n\tvar _video = __webpack_require__(65);\n\n\tvar _video2 = _interopRequireDefault(_video);\n\n\tvar _code = __webpack_require__(28);\n\n\tvar _code2 = _interopRequireDefault(_code);\n\n\tvar _formula = __webpack_require__(66);\n\n\tvar _formula2 = _interopRequireDefault(_formula);\n\n\tvar _syntax = __webpack_require__(67);\n\n\tvar _syntax2 = _interopRequireDefault(_syntax);\n\n\tvar _toolbar = __webpack_require__(68);\n\n\tvar _toolbar2 = _interopRequireDefault(_toolbar);\n\n\tvar _icons = __webpack_require__(69);\n\n\tvar _icons2 = _interopRequireDefault(_icons);\n\n\tvar _picker = __webpack_require__(102);\n\n\tvar _picker2 = _interopRequireDefault(_picker);\n\n\tvar _colorPicker = __webpack_require__(104);\n\n\tvar _colorPicker2 = _interopRequireDefault(_colorPicker);\n\n\tvar _iconPicker = __webpack_require__(105);\n\n\tvar _iconPicker2 = _interopRequireDefault(_iconPicker);\n\n\tvar _tooltip = __webpack_require__(106);\n\n\tvar _tooltip2 = _interopRequireDefault(_tooltip);\n\n\tvar _bubble = __webpack_require__(107);\n\n\tvar _bubble2 = _interopRequireDefault(_bubble);\n\n\tvar _snow = __webpack_require__(109);\n\n\tvar _snow2 = _interopRequireDefault(_snow);\n\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n\t_core2.default.register({\n\t  'attributors/attribute/direction': _direction.DirectionAttribute,\n\n\t  'attributors/class/align': _align.AlignClass,\n\t  'attributors/class/background': _background.BackgroundClass,\n\t  'attributors/class/color': _color.ColorClass,\n\t  'attributors/class/direction': _direction.DirectionClass,\n\t  'attributors/class/font': _font.FontClass,\n\t  'attributors/class/size': _size.SizeClass,\n\n\t  'attributors/style/align': _align.AlignStyle,\n\t  'attributors/style/background': _background.BackgroundStyle,\n\t  'attributors/style/color': _color.ColorStyle,\n\t  'attributors/style/direction': _direction.DirectionStyle,\n\t  'attributors/style/font': _font.FontStyle,\n\t  'attributors/style/size': _size.SizeStyle\n\t}, true);\n\n\t_core2.default.register({\n\t  'formats/align': _align.AlignClass,\n\t  'formats/direction': _direction.DirectionClass,\n\t  'formats/indent': _indent.IndentClass,\n\n\t  'formats/background': _background.BackgroundStyle,\n\t  'formats/color': _color.ColorStyle,\n\t  'formats/font': _font.FontClass,\n\t  'formats/size': _size.SizeClass,\n\n\t  'formats/blockquote': _blockquote2.default,\n\t  'formats/code-block': _code2.default,\n\t  'formats/header': _header2.default,\n\t  'formats/list': _list2.default,\n\n\t  'formats/bold': _bold2.default,\n\t  'formats/code': _code.Code,\n\t  'formats/italic': _italic2.default,\n\t  'formats/link': _link2.default,\n\t  'formats/script': _script2.default,\n\t  'formats/strike': _strike2.default,\n\t  'formats/underline': _underline2.default,\n\n\t  'formats/image': _image2.default,\n\t  'formats/video': _video2.default,\n\n\t  'formats/list/item': _list.ListItem,\n\n\t  'modules/formula': _formula2.default,\n\t  'modules/syntax': _syntax2.default,\n\t  'modules/toolbar': _toolbar2.default,\n\n\t  'themes/bubble': _bubble2.default,\n\t  'themes/snow': _snow2.default,\n\n\t  'ui/icons': _icons2.default,\n\t  'ui/picker': _picker2.default,\n\t  'ui/icon-picker': _iconPicker2.default,\n\t  'ui/color-picker': _colorPicker2.default,\n\t  'ui/tooltip': _tooltip2.default\n\t}, true);\n\n\tmodule.exports = _core2.default;\n\n/***/ },\n/* 54 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\texports.IndentClass = undefined;\n\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\n\tvar _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if (\"value\" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };\n\n\tvar _parchment = __webpack_require__(2);\n\n\tvar _parchment2 = _interopRequireDefault(_parchment);\n\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\n\tvar IdentAttributor = function (_Parchment$Attributor) {\n\t  _inherits(IdentAttributor, _Parchment$Attributor);\n\n\t  function IdentAttributor() {\n\t    _classCallCheck(this, IdentAttributor);\n\n\t    return _possibleConstructorReturn(this, (IdentAttributor.__proto__ || Object.getPrototypeOf(IdentAttributor)).apply(this, arguments));\n\t  }\n\n\t  _createClass(IdentAttributor, [{\n\t    key: 'add',\n\t    value: function add(node, value) {\n\t      if (value === '+1' || value === '-1') {\n\t        var indent = this.value(node) || 0;\n\t        value = value === '+1' ? indent + 1 : indent - 1;\n\t      }\n\t      if (value === 0) {\n\t        this.remove(node);\n\t        return true;\n\t      } else {\n\t        return _get(IdentAttributor.prototype.__proto__ || Object.getPrototypeOf(IdentAttributor.prototype), 'add', this).call(this, node, value);\n\t      }\n\t    }\n\t  }, {\n\t    key: 'canAdd',\n\t    value: function canAdd(node, value) {\n\t      return _get(IdentAttributor.prototype.__proto__ || Object.getPrototypeOf(IdentAttributor.prototype), 'canAdd', this).call(this, node, value) || _get(IdentAttributor.prototype.__proto__ || Object.getPrototypeOf(IdentAttributor.prototype), 'canAdd', this).call(this, node, parseInt(value));\n\t    }\n\t  }, {\n\t    key: 'value',\n\t    value: function value(node) {\n\t      return parseInt(_get(IdentAttributor.prototype.__proto__ || Object.getPrototypeOf(IdentAttributor.prototype), 'value', this).call(this, node)) || undefined; // Don't return NaN\n\t    }\n\t  }]);\n\n\t  return IdentAttributor;\n\t}(_parchment2.default.Attributor.Class);\n\n\tvar IndentClass = new IdentAttributor('indent', 'ql-indent', {\n\t  scope: _parchment2.default.Scope.BLOCK,\n\t  whitelist: [1, 2, 3, 4, 5, 6, 7, 8]\n\t});\n\n\texports.IndentClass = IndentClass;\n\n/***/ },\n/* 55 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\n\tvar _block = __webpack_require__(29);\n\n\tvar _block2 = _interopRequireDefault(_block);\n\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\n\tvar Blockquote = function (_Block) {\n\t  _inherits(Blockquote, _Block);\n\n\t  function Blockquote() {\n\t    _classCallCheck(this, Blockquote);\n\n\t    return _possibleConstructorReturn(this, (Blockquote.__proto__ || Object.getPrototypeOf(Blockquote)).apply(this, arguments));\n\t  }\n\n\t  return Blockquote;\n\t}(_block2.default);\n\n\tBlockquote.blotName = 'blockquote';\n\tBlockquote.tagName = 'blockquote';\n\n\texports.default = Blockquote;\n\n/***/ },\n/* 56 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\n\tvar _block = __webpack_require__(29);\n\n\tvar _block2 = _interopRequireDefault(_block);\n\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\n\tvar Header = function (_Block) {\n\t  _inherits(Header, _Block);\n\n\t  function Header() {\n\t    _classCallCheck(this, Header);\n\n\t    return _possibleConstructorReturn(this, (Header.__proto__ || Object.getPrototypeOf(Header)).apply(this, arguments));\n\t  }\n\n\t  _createClass(Header, null, [{\n\t    key: 'formats',\n\t    value: function formats(domNode) {\n\t      return this.tagName.indexOf(domNode.tagName) + 1;\n\t    }\n\t  }]);\n\n\t  return Header;\n\t}(_block2.default);\n\n\tHeader.blotName = 'header';\n\tHeader.tagName = ['H1', 'H2', 'H3', 'H4', 'H5', 'H6'];\n\n\texports.default = Header;\n\n/***/ },\n/* 57 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\texports.default = exports.ListItem = undefined;\n\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\n\tvar _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if (\"value\" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };\n\n\tvar _parchment = __webpack_require__(2);\n\n\tvar _parchment2 = _interopRequireDefault(_parchment);\n\n\tvar _block = __webpack_require__(29);\n\n\tvar _block2 = _interopRequireDefault(_block);\n\n\tvar _container = __webpack_require__(42);\n\n\tvar _container2 = _interopRequireDefault(_container);\n\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n\tfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\n\tvar ListItem = function (_Block) {\n\t  _inherits(ListItem, _Block);\n\n\t  function ListItem() {\n\t    _classCallCheck(this, ListItem);\n\n\t    return _possibleConstructorReturn(this, (ListItem.__proto__ || Object.getPrototypeOf(ListItem)).apply(this, arguments));\n\t  }\n\n\t  _createClass(ListItem, [{\n\t    key: 'format',\n\t    value: function format(name, value) {\n\t      if (name === List.blotName && !value) {\n\t        this.replaceWith(_parchment2.default.create(this.statics.scope));\n\t      } else {\n\t        _get(ListItem.prototype.__proto__ || Object.getPrototypeOf(ListItem.prototype), 'format', this).call(this, name, value);\n\t      }\n\t    }\n\t  }, {\n\t    key: 'remove',\n\t    value: function remove() {\n\t      if (this.prev == null && this.next == null) {\n\t        this.parent.remove();\n\t      } else {\n\t        _get(ListItem.prototype.__proto__ || Object.getPrototypeOf(ListItem.prototype), 'remove', this).call(this);\n\t      }\n\t    }\n\t  }, {\n\t    key: 'replaceWith',\n\t    value: function replaceWith(name, value) {\n\t      this.parent.isolate(this.offset(this.parent), this.length());\n\t      if (name === this.parent.statics.blotName) {\n\t        this.parent.replaceWith(name, value);\n\t        return this;\n\t      } else {\n\t        this.parent.unwrap();\n\t        return _get(ListItem.prototype.__proto__ || Object.getPrototypeOf(ListItem.prototype), 'replaceWith', this).call(this, name, value);\n\t      }\n\t    }\n\t  }], [{\n\t    key: 'formats',\n\t    value: function formats(domNode) {\n\t      return domNode.tagName === this.tagName ? undefined : _get(ListItem.__proto__ || Object.getPrototypeOf(ListItem), 'formats', this).call(this, domNode);\n\t    }\n\t  }]);\n\n\t  return ListItem;\n\t}(_block2.default);\n\n\tListItem.blotName = 'list-item';\n\tListItem.tagName = 'LI';\n\n\tvar List = function (_Container) {\n\t  _inherits(List, _Container);\n\n\t  function List() {\n\t    _classCallCheck(this, List);\n\n\t    return _possibleConstructorReturn(this, (List.__proto__ || Object.getPrototypeOf(List)).apply(this, arguments));\n\t  }\n\n\t  _createClass(List, [{\n\t    key: 'format',\n\t    value: function format(name, value) {\n\t      if (this.children.length > 0) {\n\t        this.children.tail.format(name, value);\n\t      }\n\t    }\n\t  }, {\n\t    key: 'formats',\n\t    value: function formats() {\n\t      // We don't inherit from FormatBlot\n\t      return _defineProperty({}, this.statics.blotName, this.statics.formats(this.domNode));\n\t    }\n\t  }, {\n\t    key: 'insertBefore',\n\t    value: function insertBefore(blot, ref) {\n\t      if (blot instanceof ListItem) {\n\t        _get(List.prototype.__proto__ || Object.getPrototypeOf(List.prototype), 'insertBefore', this).call(this, blot, ref);\n\t      } else {\n\t        var index = ref == null ? this.length() : ref.offset(this);\n\t        var after = this.split(index);\n\t        after.parent.insertBefore(blot, after);\n\t      }\n\t    }\n\t  }, {\n\t    key: 'optimize',\n\t    value: function optimize() {\n\t      _get(List.prototype.__proto__ || Object.getPrototypeOf(List.prototype), 'optimize', this).call(this);\n\t      var next = this.next;\n\t      if (next != null && next.prev === this && next.statics.blotName === this.statics.blotName && next.domNode.tagName === this.domNode.tagName && next.domNode.getAttribute('data-checked') === this.domNode.getAttribute('data-checked')) {\n\t        next.moveChildren(this);\n\t        next.remove();\n\t      }\n\t    }\n\t  }, {\n\t    key: 'replace',\n\t    value: function replace(target) {\n\t      if (target.statics.blotName !== this.statics.blotName) {\n\t        var item = _parchment2.default.create(this.statics.defaultChild);\n\t        target.moveChildren(item);\n\t        this.appendChild(item);\n\t      }\n\t      _get(List.prototype.__proto__ || Object.getPrototypeOf(List.prototype), 'replace', this).call(this, target);\n\t    }\n\t  }], [{\n\t    key: 'create',\n\t    value: function create(value) {\n\t      var tagName = value === 'ordered' ? 'OL' : 'UL';\n\t      var node = _get(List.__proto__ || Object.getPrototypeOf(List), 'create', this).call(this, tagName);\n\t      if (value === 'checked' || value === 'unchecked') {\n\t        node.setAttribute('data-checked', value === 'checked');\n\t      }\n\t      return node;\n\t    }\n\t  }, {\n\t    key: 'formats',\n\t    value: function formats(domNode) {\n\t      if (domNode.tagName === 'OL') return 'ordered';\n\t      if (domNode.tagName === 'UL') {\n\t        if (domNode.hasAttribute('data-checked')) {\n\t          return domNode.getAttribute('data-checked') === 'true' ? 'checked' : 'unchecked';\n\t        } else {\n\t          return 'bullet';\n\t        }\n\t      }\n\t      return undefined;\n\t    }\n\t  }]);\n\n\t  return List;\n\t}(_container2.default);\n\n\tList.blotName = 'list';\n\tList.scope = _parchment2.default.Scope.BLOCK_BLOT;\n\tList.tagName = ['OL', 'UL'];\n\tList.defaultChild = 'list-item';\n\tList.allowedChildren = [ListItem];\n\n\texports.ListItem = ListItem;\n\texports.default = List;\n\n/***/ },\n/* 58 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\n\tvar _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if (\"value\" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };\n\n\tvar _inline = __webpack_require__(32);\n\n\tvar _inline2 = _interopRequireDefault(_inline);\n\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\n\tvar Bold = function (_Inline) {\n\t  _inherits(Bold, _Inline);\n\n\t  function Bold() {\n\t    _classCallCheck(this, Bold);\n\n\t    return _possibleConstructorReturn(this, (Bold.__proto__ || Object.getPrototypeOf(Bold)).apply(this, arguments));\n\t  }\n\n\t  _createClass(Bold, [{\n\t    key: 'optimize',\n\t    value: function optimize() {\n\t      _get(Bold.prototype.__proto__ || Object.getPrototypeOf(Bold.prototype), 'optimize', this).call(this);\n\t      if (this.domNode.tagName !== this.statics.tagName[0]) {\n\t        this.replaceWith(this.statics.blotName);\n\t      }\n\t    }\n\t  }], [{\n\t    key: 'create',\n\t    value: function create() {\n\t      return _get(Bold.__proto__ || Object.getPrototypeOf(Bold), 'create', this).call(this);\n\t    }\n\t  }, {\n\t    key: 'formats',\n\t    value: function formats() {\n\t      return true;\n\t    }\n\t  }]);\n\n\t  return Bold;\n\t}(_inline2.default);\n\n\tBold.blotName = 'bold';\n\tBold.tagName = ['STRONG', 'B'];\n\n\texports.default = Bold;\n\n/***/ },\n/* 59 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\n\tvar _bold = __webpack_require__(58);\n\n\tvar _bold2 = _interopRequireDefault(_bold);\n\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\n\tvar Italic = function (_Bold) {\n\t  _inherits(Italic, _Bold);\n\n\t  function Italic() {\n\t    _classCallCheck(this, Italic);\n\n\t    return _possibleConstructorReturn(this, (Italic.__proto__ || Object.getPrototypeOf(Italic)).apply(this, arguments));\n\t  }\n\n\t  return Italic;\n\t}(_bold2.default);\n\n\tItalic.blotName = 'italic';\n\tItalic.tagName = ['EM', 'I'];\n\n\texports.default = Italic;\n\n/***/ },\n/* 60 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\texports.sanitize = exports.default = undefined;\n\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\n\tvar _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if (\"value\" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };\n\n\tvar _inline = __webpack_require__(32);\n\n\tvar _inline2 = _interopRequireDefault(_inline);\n\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\n\tvar Link = function (_Inline) {\n\t  _inherits(Link, _Inline);\n\n\t  function Link() {\n\t    _classCallCheck(this, Link);\n\n\t    return _possibleConstructorReturn(this, (Link.__proto__ || Object.getPrototypeOf(Link)).apply(this, arguments));\n\t  }\n\n\t  _createClass(Link, [{\n\t    key: 'format',\n\t    value: function format(name, value) {\n\t      if (name !== this.statics.blotName || !value) return _get(Link.prototype.__proto__ || Object.getPrototypeOf(Link.prototype), 'format', this).call(this, name, value);\n\t      value = this.constructor.sanitize(value);\n\t      this.domNode.setAttribute('href', value);\n\t    }\n\t  }], [{\n\t    key: 'create',\n\t    value: function create(value) {\n\t      var node = _get(Link.__proto__ || Object.getPrototypeOf(Link), 'create', this).call(this, value);\n\t      value = this.sanitize(value);\n\t      node.setAttribute('href', value);\n\t      node.setAttribute('target', '_blank');\n\t      return node;\n\t    }\n\t  }, {\n\t    key: 'formats',\n\t    value: function formats(domNode) {\n\t      return domNode.getAttribute('href');\n\t    }\n\t  }, {\n\t    key: 'sanitize',\n\t    value: function sanitize(url) {\n\t      return _sanitize(url, ['http', 'https', 'mailto']) ? url : this.SANITIZED_URL;\n\t    }\n\t  }]);\n\n\t  return Link;\n\t}(_inline2.default);\n\n\tLink.blotName = 'link';\n\tLink.tagName = 'A';\n\tLink.SANITIZED_URL = 'about:blank';\n\n\tfunction _sanitize(url, protocols) {\n\t  var anchor = document.createElement('a');\n\t  anchor.href = url;\n\t  var protocol = anchor.href.slice(0, anchor.href.indexOf(':'));\n\t  return protocols.indexOf(protocol) > -1;\n\t}\n\n\texports.default = Link;\n\texports.sanitize = _sanitize;\n\n/***/ },\n/* 61 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\n\tvar _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if (\"value\" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };\n\n\tvar _inline = __webpack_require__(32);\n\n\tvar _inline2 = _interopRequireDefault(_inline);\n\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\n\tvar Script = function (_Inline) {\n\t  _inherits(Script, _Inline);\n\n\t  function Script() {\n\t    _classCallCheck(this, Script);\n\n\t    return _possibleConstructorReturn(this, (Script.__proto__ || Object.getPrototypeOf(Script)).apply(this, arguments));\n\t  }\n\n\t  _createClass(Script, null, [{\n\t    key: 'create',\n\t    value: function create(value) {\n\t      if (value === 'super') {\n\t        return document.createElement('sup');\n\t      } else if (value === 'sub') {\n\t        return document.createElement('sub');\n\t      } else {\n\t        return _get(Script.__proto__ || Object.getPrototypeOf(Script), 'create', this).call(this, value);\n\t      }\n\t    }\n\t  }, {\n\t    key: 'formats',\n\t    value: function formats(domNode) {\n\t      if (domNode.tagName === 'SUB') return 'sub';\n\t      if (domNode.tagName === 'SUP') return 'super';\n\t      return undefined;\n\t    }\n\t  }]);\n\n\t  return Script;\n\t}(_inline2.default);\n\n\tScript.blotName = 'script';\n\tScript.tagName = ['SUB', 'SUP'];\n\n\texports.default = Script;\n\n/***/ },\n/* 62 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\n\tvar _inline = __webpack_require__(32);\n\n\tvar _inline2 = _interopRequireDefault(_inline);\n\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\n\tvar Strike = function (_Inline) {\n\t  _inherits(Strike, _Inline);\n\n\t  function Strike() {\n\t    _classCallCheck(this, Strike);\n\n\t    return _possibleConstructorReturn(this, (Strike.__proto__ || Object.getPrototypeOf(Strike)).apply(this, arguments));\n\t  }\n\n\t  return Strike;\n\t}(_inline2.default);\n\n\tStrike.blotName = 'strike';\n\tStrike.tagName = 'S';\n\n\texports.default = Strike;\n\n/***/ },\n/* 63 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\n\tvar _inline = __webpack_require__(32);\n\n\tvar _inline2 = _interopRequireDefault(_inline);\n\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\n\tvar Underline = function (_Inline) {\n\t  _inherits(Underline, _Inline);\n\n\t  function Underline() {\n\t    _classCallCheck(this, Underline);\n\n\t    return _possibleConstructorReturn(this, (Underline.__proto__ || Object.getPrototypeOf(Underline)).apply(this, arguments));\n\t  }\n\n\t  return Underline;\n\t}(_inline2.default);\n\n\tUnderline.blotName = 'underline';\n\tUnderline.tagName = 'U';\n\n\texports.default = Underline;\n\n/***/ },\n/* 64 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\n\tvar _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if (\"value\" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };\n\n\tvar _embed = __webpack_require__(31);\n\n\tvar _embed2 = _interopRequireDefault(_embed);\n\n\tvar _link = __webpack_require__(60);\n\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\n\tvar ATTRIBUTES = ['alt', 'height', 'width'];\n\n\tvar Image = function (_Embed) {\n\t  _inherits(Image, _Embed);\n\n\t  function Image() {\n\t    _classCallCheck(this, Image);\n\n\t    return _possibleConstructorReturn(this, (Image.__proto__ || Object.getPrototypeOf(Image)).apply(this, arguments));\n\t  }\n\n\t  _createClass(Image, [{\n\t    key: 'format',\n\t    value: function format(name, value) {\n\t      if (ATTRIBUTES.indexOf(name) > -1) {\n\t        if (value) {\n\t          this.domNode.setAttribute(name, value);\n\t        } else {\n\t          this.domNode.removeAttribute(name);\n\t        }\n\t      } else {\n\t        _get(Image.prototype.__proto__ || Object.getPrototypeOf(Image.prototype), 'format', this).call(this, name, value);\n\t      }\n\t    }\n\t  }], [{\n\t    key: 'create',\n\t    value: function create(value) {\n\t      var node = _get(Image.__proto__ || Object.getPrototypeOf(Image), 'create', this).call(this, value);\n\t      if (typeof value === 'string') {\n\t        node.setAttribute('src', this.sanitize(value));\n\t      }\n\t      return node;\n\t    }\n\t  }, {\n\t    key: 'formats',\n\t    value: function formats(domNode) {\n\t      return ATTRIBUTES.reduce(function (formats, attribute) {\n\t        if (domNode.hasAttribute(attribute)) {\n\t          formats[attribute] = domNode.getAttribute(attribute);\n\t        }\n\t        return formats;\n\t      }, {});\n\t    }\n\t  }, {\n\t    key: 'match',\n\t    value: function match(url) {\n\t      return (/\\.(jpe?g|gif|png)$/.test(url) || /^data:image\\/.+;base64/.test(url)\n\t      );\n\t    }\n\t  }, {\n\t    key: 'sanitize',\n\t    value: function sanitize(url) {\n\t      return (0, _link.sanitize)(url, ['http', 'https', 'data']) ? url : '//:0';\n\t    }\n\t  }, {\n\t    key: 'value',\n\t    value: function value(domNode) {\n\t      return domNode.getAttribute('src');\n\t    }\n\t  }]);\n\n\t  return Image;\n\t}(_embed2.default);\n\n\tImage.blotName = 'image';\n\tImage.tagName = 'IMG';\n\n\texports.default = Image;\n\n/***/ },\n/* 65 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\n\tvar _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if (\"value\" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };\n\n\tvar _block = __webpack_require__(29);\n\n\tvar _link = __webpack_require__(60);\n\n\tvar _link2 = _interopRequireDefault(_link);\n\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\n\tvar ATTRIBUTES = ['height', 'width'];\n\n\tvar Video = function (_BlockEmbed) {\n\t  _inherits(Video, _BlockEmbed);\n\n\t  function Video() {\n\t    _classCallCheck(this, Video);\n\n\t    return _possibleConstructorReturn(this, (Video.__proto__ || Object.getPrototypeOf(Video)).apply(this, arguments));\n\t  }\n\n\t  _createClass(Video, [{\n\t    key: 'format',\n\t    value: function format(name, value) {\n\t      if (ATTRIBUTES.indexOf(name) > -1) {\n\t        if (value) {\n\t          this.domNode.setAttribute(name, value);\n\t        } else {\n\t          this.domNode.removeAttribute(name);\n\t        }\n\t      } else {\n\t        _get(Video.prototype.__proto__ || Object.getPrototypeOf(Video.prototype), 'format', this).call(this, name, value);\n\t      }\n\t    }\n\t  }], [{\n\t    key: 'create',\n\t    value: function create(value) {\n\t      var node = _get(Video.__proto__ || Object.getPrototypeOf(Video), 'create', this).call(this, value);\n\t      node.setAttribute('frameborder', '0');\n\t      node.setAttribute('allowfullscreen', true);\n\t      node.setAttribute('src', this.sanitize(value));\n\t      return node;\n\t    }\n\t  }, {\n\t    key: 'formats',\n\t    value: function formats(domNode) {\n\t      return ATTRIBUTES.reduce(function (formats, attribute) {\n\t        if (domNode.hasAttribute(attribute)) {\n\t          formats[attribute] = domNode.getAttribute(attribute);\n\t        }\n\t        return formats;\n\t      }, {});\n\t    }\n\t  }, {\n\t    key: 'sanitize',\n\t    value: function sanitize(url) {\n\t      return _link2.default.sanitize(url);\n\t    }\n\t  }, {\n\t    key: 'value',\n\t    value: function value(domNode) {\n\t      return domNode.getAttribute('src');\n\t    }\n\t  }]);\n\n\t  return Video;\n\t}(_block.BlockEmbed);\n\n\tVideo.blotName = 'video';\n\tVideo.className = 'ql-video';\n\tVideo.tagName = 'IFRAME';\n\n\texports.default = Video;\n\n/***/ },\n/* 66 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\texports.default = exports.FormulaBlot = undefined;\n\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\n\tvar _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if (\"value\" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };\n\n\tvar _embed = __webpack_require__(31);\n\n\tvar _embed2 = _interopRequireDefault(_embed);\n\n\tvar _quill = __webpack_require__(18);\n\n\tvar _quill2 = _interopRequireDefault(_quill);\n\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\n\tvar FormulaBlot = function (_Embed) {\n\t  _inherits(FormulaBlot, _Embed);\n\n\t  function FormulaBlot() {\n\t    _classCallCheck(this, FormulaBlot);\n\n\t    return _possibleConstructorReturn(this, (FormulaBlot.__proto__ || Object.getPrototypeOf(FormulaBlot)).apply(this, arguments));\n\t  }\n\n\t  _createClass(FormulaBlot, [{\n\t    key: 'index',\n\t    value: function index() {\n\t      return 1;\n\t    }\n\t  }], [{\n\t    key: 'create',\n\t    value: function create(value) {\n\t      var node = _get(FormulaBlot.__proto__ || Object.getPrototypeOf(FormulaBlot), 'create', this).call(this, value);\n\t      if (typeof value === 'string') {\n\t        window.katex.render(value, node);\n\t        node.setAttribute('data-value', value);\n\t      }\n\t      node.setAttribute('contenteditable', false);\n\t      return node;\n\t    }\n\t  }, {\n\t    key: 'value',\n\t    value: function value(domNode) {\n\t      return domNode.getAttribute('data-value');\n\t    }\n\t  }]);\n\n\t  return FormulaBlot;\n\t}(_embed2.default);\n\n\tFormulaBlot.blotName = 'formula';\n\tFormulaBlot.className = 'ql-formula';\n\tFormulaBlot.tagName = 'SPAN';\n\n\tfunction Formula() {\n\t  if (window.katex == null) {\n\t    throw new Error('Formula module requires KaTeX.');\n\t  }\n\t  _quill2.default.register(FormulaBlot, true);\n\t}\n\n\texports.FormulaBlot = FormulaBlot;\n\texports.default = Formula;\n\n/***/ },\n/* 67 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\texports.default = exports.CodeToken = exports.CodeBlock = undefined;\n\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\n\tvar _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if (\"value\" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };\n\n\tvar _parchment = __webpack_require__(2);\n\n\tvar _parchment2 = _interopRequireDefault(_parchment);\n\n\tvar _quill = __webpack_require__(18);\n\n\tvar _quill2 = _interopRequireDefault(_quill);\n\n\tvar _module = __webpack_require__(39);\n\n\tvar _module2 = _interopRequireDefault(_module);\n\n\tvar _code = __webpack_require__(28);\n\n\tvar _code2 = _interopRequireDefault(_code);\n\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\n\tvar SyntaxCodeBlock = function (_CodeBlock) {\n\t  _inherits(SyntaxCodeBlock, _CodeBlock);\n\n\t  function SyntaxCodeBlock() {\n\t    _classCallCheck(this, SyntaxCodeBlock);\n\n\t    return _possibleConstructorReturn(this, (SyntaxCodeBlock.__proto__ || Object.getPrototypeOf(SyntaxCodeBlock)).apply(this, arguments));\n\t  }\n\n\t  _createClass(SyntaxCodeBlock, [{\n\t    key: 'replaceWith',\n\t    value: function replaceWith(block) {\n\t      this.domNode.textContent = this.domNode.textContent;\n\t      this.attach();\n\t      _get(SyntaxCodeBlock.prototype.__proto__ || Object.getPrototypeOf(SyntaxCodeBlock.prototype), 'replaceWith', this).call(this, block);\n\t    }\n\t  }, {\n\t    key: 'highlight',\n\t    value: function highlight(_highlight) {\n\t      if (this.cachedHTML !== this.domNode.innerHTML) {\n\t        var text = this.domNode.textContent;\n\t        if (text.trim().length > 0 || this.cachedHTML == null) {\n\t          this.domNode.innerHTML = _highlight(text);\n\t          this.attach();\n\t        }\n\t        this.cachedHTML = this.domNode.innerHTML;\n\t      }\n\t    }\n\t  }]);\n\n\t  return SyntaxCodeBlock;\n\t}(_code2.default);\n\n\tSyntaxCodeBlock.className = 'ql-syntax';\n\n\tvar CodeToken = new _parchment2.default.Attributor.Class('token', 'hljs', {\n\t  scope: _parchment2.default.Scope.INLINE\n\t});\n\n\tvar Syntax = function (_Module) {\n\t  _inherits(Syntax, _Module);\n\n\t  function Syntax(quill, options) {\n\t    _classCallCheck(this, Syntax);\n\n\t    var _this2 = _possibleConstructorReturn(this, (Syntax.__proto__ || Object.getPrototypeOf(Syntax)).call(this, quill, options));\n\n\t    if (typeof _this2.options.highlight !== 'function') {\n\t      throw new Error('Syntax module requires highlight.js. Please include the library on the page before Quill.');\n\t    }\n\t    _quill2.default.register(CodeToken, true);\n\t    _quill2.default.register(SyntaxCodeBlock, true);\n\t    var timer = null;\n\t    _this2.quill.on(_quill2.default.events.SCROLL_OPTIMIZE, function () {\n\t      if (timer != null) return;\n\t      timer = setTimeout(function () {\n\t        _this2.highlight();\n\t        timer = null;\n\t      }, 100);\n\t    });\n\t    _this2.highlight();\n\t    return _this2;\n\t  }\n\n\t  _createClass(Syntax, [{\n\t    key: 'highlight',\n\t    value: function highlight() {\n\t      var _this3 = this;\n\n\t      if (this.quill.selection.composing) return;\n\t      var range = this.quill.getSelection();\n\t      this.quill.scroll.descendants(SyntaxCodeBlock).forEach(function (code) {\n\t        code.highlight(_this3.options.highlight);\n\t      });\n\t      this.quill.update(_quill2.default.sources.SILENT);\n\t      if (range != null) {\n\t        this.quill.setSelection(range, _quill2.default.sources.SILENT);\n\t      }\n\t    }\n\t  }]);\n\n\t  return Syntax;\n\t}(_module2.default);\n\n\tSyntax.DEFAULTS = {\n\t  highlight: function () {\n\t    if (window.hljs == null) return null;\n\t    return function (text) {\n\t      var result = window.hljs.highlightAuto(text);\n\t      return result.value;\n\t    };\n\t  }()\n\t};\n\n\texports.CodeBlock = SyntaxCodeBlock;\n\texports.CodeToken = CodeToken;\n\texports.default = Syntax;\n\n/***/ },\n/* 68 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\texports.addControls = exports.default = undefined;\n\n\tvar _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"]) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); } }; }();\n\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\n\tvar _quillDelta = __webpack_require__(20);\n\n\tvar _quillDelta2 = _interopRequireDefault(_quillDelta);\n\n\tvar _parchment = __webpack_require__(2);\n\n\tvar _parchment2 = _interopRequireDefault(_parchment);\n\n\tvar _quill = __webpack_require__(18);\n\n\tvar _quill2 = _interopRequireDefault(_quill);\n\n\tvar _logger = __webpack_require__(37);\n\n\tvar _logger2 = _interopRequireDefault(_logger);\n\n\tvar _module = __webpack_require__(39);\n\n\tvar _module2 = _interopRequireDefault(_module);\n\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n\tfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\n\tvar debug = (0, _logger2.default)('quill:toolbar');\n\n\tvar Toolbar = function (_Module) {\n\t  _inherits(Toolbar, _Module);\n\n\t  function Toolbar(quill, options) {\n\t    _classCallCheck(this, Toolbar);\n\n\t    var _this = _possibleConstructorReturn(this, (Toolbar.__proto__ || Object.getPrototypeOf(Toolbar)).call(this, quill, options));\n\n\t    if (Array.isArray(_this.options.container)) {\n\t      var container = document.createElement('div');\n\t      addControls(container, _this.options.container);\n\t      quill.container.parentNode.insertBefore(container, quill.container);\n\t      _this.container = container;\n\t    } else if (typeof _this.options.container === 'string') {\n\t      _this.container = document.querySelector(_this.options.container);\n\t    } else {\n\t      _this.container = _this.options.container;\n\t    }\n\t    if (!(_this.container instanceof HTMLElement)) {\n\t      var _ret;\n\n\t      return _ret = debug.error('Container required for toolbar', _this.options), _possibleConstructorReturn(_this, _ret);\n\t    }\n\t    _this.container.classList.add('ql-toolbar');\n\t    _this.controls = [];\n\t    _this.handlers = {};\n\t    Object.keys(_this.options.handlers).forEach(function (format) {\n\t      _this.addHandler(format, _this.options.handlers[format]);\n\t    });\n\t    [].forEach.call(_this.container.querySelectorAll('button, select'), function (input) {\n\t      _this.attach(input);\n\t    });\n\t    _this.quill.on(_quill2.default.events.EDITOR_CHANGE, function (type, range) {\n\t      if (type === _quill2.default.events.SELECTION_CHANGE) {\n\t        _this.update(range);\n\t      }\n\t    });\n\t    _this.quill.on(_quill2.default.events.SCROLL_OPTIMIZE, function () {\n\t      var _this$quill$selection = _this.quill.selection.getRange(),\n\t          _this$quill$selection2 = _slicedToArray(_this$quill$selection, 1),\n\t          range = _this$quill$selection2[0]; // quill.getSelection triggers update\n\n\n\t      _this.update(range);\n\t    });\n\t    return _this;\n\t  }\n\n\t  _createClass(Toolbar, [{\n\t    key: 'addHandler',\n\t    value: function addHandler(format, handler) {\n\t      this.handlers[format] = handler;\n\t    }\n\t  }, {\n\t    key: 'attach',\n\t    value: function attach(input) {\n\t      var _this2 = this;\n\n\t      var format = [].find.call(input.classList, function (className) {\n\t        return className.indexOf('ql-') === 0;\n\t      });\n\t      if (!format) return;\n\t      format = format.slice('ql-'.length);\n\t      if (input.tagName === 'BUTTON') {\n\t        input.setAttribute('type', 'button');\n\t      }\n\t      if (this.handlers[format] == null) {\n\t        if (this.quill.scroll.whitelist != null && this.quill.scroll.whitelist[format] == null) {\n\t          debug.warn('ignoring attaching to disabled format', format, input);\n\t          return;\n\t        }\n\t        if (_parchment2.default.query(format) == null) {\n\t          debug.warn('ignoring attaching to nonexistent format', format, input);\n\t          return;\n\t        }\n\t      }\n\t      var eventName = input.tagName === 'SELECT' ? 'change' : 'click';\n\t      input.addEventListener(eventName, function (e) {\n\t        var value = void 0;\n\t        if (input.tagName === 'SELECT') {\n\t          if (input.selectedIndex < 0) return;\n\t          var selected = input.options[input.selectedIndex];\n\t          if (selected.hasAttribute('selected')) {\n\t            value = false;\n\t          } else {\n\t            value = selected.value || false;\n\t          }\n\t        } else {\n\t          if (input.classList.contains('ql-active')) {\n\t            value = false;\n\t          } else {\n\t            value = input.value || !input.hasAttribute('value');\n\t          }\n\t          e.preventDefault();\n\t        }\n\t        _this2.quill.focus();\n\n\t        var _quill$selection$getR = _this2.quill.selection.getRange(),\n\t            _quill$selection$getR2 = _slicedToArray(_quill$selection$getR, 1),\n\t            range = _quill$selection$getR2[0];\n\n\t        if (_this2.handlers[format] != null) {\n\t          _this2.handlers[format].call(_this2, value);\n\t        } else if (_parchment2.default.query(format).prototype instanceof _parchment2.default.Embed) {\n\t          value = prompt('Enter ' + format);\n\t          if (!value) return;\n\t          _this2.quill.updateContents(new _quillDelta2.default().retain(range.index).delete(range.length).insert(_defineProperty({}, format, value)), _quill2.default.sources.USER);\n\t        } else {\n\t          _this2.quill.format(format, value, _quill2.default.sources.USER);\n\t        }\n\t        _this2.update(range);\n\t      });\n\t      // TODO use weakmap\n\t      this.controls.push([format, input]);\n\t    }\n\t  }, {\n\t    key: 'update',\n\t    value: function update(range) {\n\t      var formats = range == null ? {} : this.quill.getFormat(range);\n\t      this.controls.forEach(function (pair) {\n\t        var _pair = _slicedToArray(pair, 2),\n\t            format = _pair[0],\n\t            input = _pair[1];\n\n\t        if (input.tagName === 'SELECT') {\n\t          var option = void 0;\n\t          if (range == null) {\n\t            option = null;\n\t          } else if (formats[format] == null) {\n\t            option = input.querySelector('option[selected]');\n\t          } else if (!Array.isArray(formats[format])) {\n\t            var value = formats[format];\n\t            if (typeof value === 'string') {\n\t              value = value.replace(/\\\"/g, '\\\\\"');\n\t            }\n\t            option = input.querySelector('option[value=\"' + value + '\"]');\n\t          }\n\t          if (option == null) {\n\t            input.value = ''; // TODO make configurable?\n\t            input.selectedIndex = -1;\n\t          } else {\n\t            option.selected = true;\n\t          }\n\t        } else {\n\t          if (range == null) {\n\t            input.classList.remove('ql-active');\n\t          } else if (input.hasAttribute('value')) {\n\t            // both being null should match (default values)\n\t            // '1' should match with 1 (headers)\n\t            var isActive = formats[format] === input.getAttribute('value') || formats[format] != null && formats[format].toString() === input.getAttribute('value') || formats[format] == null && !input.getAttribute('value');\n\t            input.classList.toggle('ql-active', isActive);\n\t          } else {\n\t            input.classList.toggle('ql-active', formats[format] != null);\n\t          }\n\t        }\n\t      });\n\t    }\n\t  }]);\n\n\t  return Toolbar;\n\t}(_module2.default);\n\n\tToolbar.DEFAULTS = {};\n\n\tfunction addButton(container, format, value) {\n\t  var input = document.createElement('button');\n\t  input.setAttribute('type', 'button');\n\t  input.classList.add('ql-' + format);\n\t  if (value != null) {\n\t    input.value = value;\n\t  }\n\t  container.appendChild(input);\n\t}\n\n\tfunction addControls(container, groups) {\n\t  if (!Array.isArray(groups[0])) {\n\t    groups = [groups];\n\t  }\n\t  groups.forEach(function (controls) {\n\t    var group = document.createElement('span');\n\t    group.classList.add('ql-formats');\n\t    controls.forEach(function (control) {\n\t      if (typeof control === 'string') {\n\t        addButton(group, control);\n\t      } else {\n\t        var format = Object.keys(control)[0];\n\t        var value = control[format];\n\t        if (Array.isArray(value)) {\n\t          addSelect(group, format, value);\n\t        } else {\n\t          addButton(group, format, value);\n\t        }\n\t      }\n\t    });\n\t    container.appendChild(group);\n\t  });\n\t}\n\n\tfunction addSelect(container, format, values) {\n\t  var input = document.createElement('select');\n\t  input.classList.add('ql-' + format);\n\t  values.forEach(function (value) {\n\t    var option = document.createElement('option');\n\t    if (value !== false) {\n\t      option.setAttribute('value', value);\n\t    } else {\n\t      option.setAttribute('selected', 'selected');\n\t    }\n\t    input.appendChild(option);\n\t  });\n\t  container.appendChild(input);\n\t}\n\n\tToolbar.DEFAULTS = {\n\t  container: null,\n\t  handlers: {\n\t    clean: function clean() {\n\t      var _this3 = this;\n\n\t      var range = this.quill.getSelection();\n\t      if (range == null) return;\n\t      if (range.length == 0) {\n\t        var formats = this.quill.getFormat();\n\t        Object.keys(formats).forEach(function (name) {\n\t          // Clean functionality in existing apps only clean inline formats\n\t          if (_parchment2.default.query(name, _parchment2.default.Scope.INLINE) != null) {\n\t            _this3.quill.format(name, false);\n\t          }\n\t        });\n\t      } else {\n\t        this.quill.removeFormat(range, _quill2.default.sources.USER);\n\t      }\n\t    },\n\t    direction: function direction(value) {\n\t      var align = this.quill.getFormat()['align'];\n\t      if (value === 'rtl' && align == null) {\n\t        this.quill.format('align', 'right', _quill2.default.sources.USER);\n\t      } else if (!value && align === 'right') {\n\t        this.quill.format('align', false, _quill2.default.sources.USER);\n\t      }\n\t      this.quill.format('direction', value, _quill2.default.sources.USER);\n\t    },\n\t    link: function link(value) {\n\t      if (value === true) {\n\t        value = prompt('Enter link URL:');\n\t      }\n\t      this.quill.format('link', value, _quill2.default.sources.USER);\n\t    },\n\t    indent: function indent(value) {\n\t      var range = this.quill.getSelection();\n\t      var formats = this.quill.getFormat(range);\n\t      var indent = parseInt(formats.indent || 0);\n\t      if (value === '+1' || value === '-1') {\n\t        var modifier = value === '+1' ? 1 : -1;\n\t        if (formats.direction === 'rtl') modifier *= -1;\n\t        this.quill.format('indent', indent + modifier, _quill2.default.sources.USER);\n\t      }\n\t    }\n\t  }\n\t};\n\n\texports.default = Toolbar;\n\texports.addControls = addControls;\n\n/***/ },\n/* 69 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\tmodule.exports = {\n\t  'align': {\n\t    '': __webpack_require__(70),\n\t    'center': __webpack_require__(71),\n\t    'right': __webpack_require__(72),\n\t    'justify': __webpack_require__(73)\n\t  },\n\t  'background': __webpack_require__(74),\n\t  'blockquote': __webpack_require__(75),\n\t  'bold': __webpack_require__(76),\n\t  'clean': __webpack_require__(77),\n\t  'code': __webpack_require__(78),\n\t  'code-block': __webpack_require__(78),\n\t  'color': __webpack_require__(79),\n\t  'direction': {\n\t    '': __webpack_require__(80),\n\t    'rtl': __webpack_require__(81)\n\t  },\n\t  'float': {\n\t    'center': __webpack_require__(82),\n\t    'full': __webpack_require__(83),\n\t    'left': __webpack_require__(84),\n\t    'right': __webpack_require__(85)\n\t  },\n\t  'formula': __webpack_require__(86),\n\t  'header': {\n\t    '1': __webpack_require__(87),\n\t    '2': __webpack_require__(88)\n\t  },\n\t  'italic': __webpack_require__(89),\n\t  'image': __webpack_require__(90),\n\t  'indent': {\n\t    '+1': __webpack_require__(91),\n\t    '-1': __webpack_require__(92)\n\t  },\n\t  'link': __webpack_require__(93),\n\t  'list': {\n\t    'ordered': __webpack_require__(94),\n\t    'bullet': __webpack_require__(95),\n\t    'unchecked': __webpack_require__(96)\n\t  },\n\t  'script': {\n\t    'sub': __webpack_require__(97),\n\t    'super': __webpack_require__(98)\n\t  },\n\t  'strike': __webpack_require__(99),\n\t  'underline': __webpack_require__(100),\n\t  'video': __webpack_require__(101)\n\t};\n\n/***/ },\n/* 70 */\n/***/ function(module, exports) {\n\n\tmodule.exports = \"<svg viewbox=\\\"0 0 18 18\\\"> <line class=ql-stroke x1=3 x2=15 y1=9 y2=9></line> <line class=ql-stroke x1=3 x2=13 y1=14 y2=14></line> <line class=ql-stroke x1=3 x2=9 y1=4 y2=4></line> </svg>\";\n\n/***/ },\n/* 71 */\n/***/ function(module, exports) {\n\n\tmodule.exports = \"<svg viewbox=\\\"0 0 18 18\\\"> <line class=ql-stroke x1=15 x2=3 y1=9 y2=9></line> <line class=ql-stroke x1=14 x2=4 y1=14 y2=14></line> <line class=ql-stroke x1=12 x2=6 y1=4 y2=4></line> </svg>\";\n\n/***/ },\n/* 72 */\n/***/ function(module, exports) {\n\n\tmodule.exports = \"<svg viewbox=\\\"0 0 18 18\\\"> <line class=ql-stroke x1=15 x2=3 y1=9 y2=9></line> <line class=ql-stroke x1=15 x2=5 y1=14 y2=14></line> <line class=ql-stroke x1=15 x2=9 y1=4 y2=4></line> </svg>\";\n\n/***/ },\n/* 73 */\n/***/ function(module, exports) {\n\n\tmodule.exports = \"<svg viewbox=\\\"0 0 18 18\\\"> <line class=ql-stroke x1=15 x2=3 y1=9 y2=9></line> <line class=ql-stroke x1=15 x2=3 y1=14 y2=14></line> <line class=ql-stroke x1=15 x2=3 y1=4 y2=4></line> </svg>\";\n\n/***/ },\n/* 74 */\n/***/ function(module, exports) {\n\n\tmodule.exports = \"<svg viewbox=\\\"0 0 18 18\\\"> <g class=\\\"ql-fill ql-color-label\\\"> <polygon points=\\\"6 6.868 6 6 5 6 5 7 5.942 7 6 6.868\\\"></polygon> <rect height=1 width=1 x=4 y=4></rect> <polygon points=\\\"6.817 5 6 5 6 6 6.38 6 6.817 5\\\"></polygon> <rect height=1 width=1 x=2 y=6></rect> <rect height=1 width=1 x=3 y=5></rect> <rect height=1 width=1 x=4 y=7></rect> <polygon points=\\\"4 11.439 4 11 3 11 3 12 3.755 12 4 11.439\\\"></polygon> <rect height=1 width=1 x=2 y=12></rect> <rect height=1 width=1 x=2 y=9></rect> <rect height=1 width=1 x=2 y=15></rect> <polygon points=\\\"4.63 10 4 10 4 11 4.192 11 4.63 10\\\"></polygon> <rect height=1 width=1 x=3 y=8></rect> <path d=M10.832,4.2L11,4.582V4H10.708A1.948,1.948,0,0,1,10.832,4.2Z></path> <path d=M7,4.582L7.168,4.2A1.929,1.929,0,0,1,7.292,4H7V4.582Z></path> <path d=M8,13H7.683l-0.351.8a1.933,1.933,0,0,1-.124.2H8V13Z></path> <rect height=1 width=1 x=12 y=2></rect> <rect height=1 width=1 x=11 y=3></rect> <path d=M9,3H8V3.282A1.985,1.985,0,0,1,9,3Z></path> <rect height=1 width=1 x=2 y=3></rect> <rect height=1 width=1 x=6 y=2></rect> <rect height=1 width=1 x=3 y=2></rect> <rect height=1 width=1 x=5 y=3></rect> <rect height=1 width=1 x=9 y=2></rect> <rect height=1 width=1 x=15 y=14></rect> <polygon points=\\\"13.447 10.174 13.469 10.225 13.472 10.232 13.808 11 14 11 14 10 13.37 10 13.447 10.174\\\"></polygon> <rect height=1 width=1 x=13 y=7></rect> <rect height=1 width=1 x=15 y=5></rect> <rect height=1 width=1 x=14 y=6></rect> <rect height=1 width=1 x=15 y=8></rect> <rect height=1 width=1 x=14 y=9></rect> <path d=M3.775,14H3v1H4V14.314A1.97,1.97,0,0,1,3.775,14Z></path> <rect height=1 width=1 x=14 y=3></rect> <polygon points=\\\"12 6.868 12 6 11.62 6 12 6.868\\\"></polygon> <rect height=1 width=1 x=15 y=2></rect> <rect height=1 width=1 x=12 y=5></rect> <rect height=1 width=1 x=13 y=4></rect> <polygon points=\\\"12.933 9 13 9 13 8 12.495 8 12.933 9\\\"></polygon> <rect height=1 width=1 x=9 y=14></rect> <rect height=1 width=1 x=8 y=15></rect> <path d=M6,14.926V15H7V14.316A1.993,1.993,0,0,1,6,14.926Z></path> <rect height=1 width=1 x=5 y=15></rect> <path d=M10.668,13.8L10.317,13H10v1h0.792A1.947,1.947,0,0,1,10.668,13.8Z></path> <rect height=1 width=1 x=11 y=15></rect> <path d=M14.332,12.2a1.99,1.99,0,0,1,.166.8H15V12H14.245Z></path> <rect height=1 width=1 x=14 y=15></rect> <rect height=1 width=1 x=15 y=11></rect> </g> <polyline class=ql-stroke points=\\\"5.5 13 9 5 12.5 13\\\"></polyline> <line class=ql-stroke x1=11.63 x2=6.38 y1=11 y2=11></line> </svg>\";\n\n/***/ },\n/* 75 */\n/***/ function(module, exports) {\n\n\tmodule.exports = \"<svg viewbox=\\\"0 0 18 18\\\"> <rect class=\\\"ql-fill ql-stroke\\\" height=3 width=3 x=4 y=5></rect> <rect class=\\\"ql-fill ql-stroke\\\" height=3 width=3 x=11 y=5></rect> <path class=\\\"ql-even ql-fill ql-stroke\\\" d=M7,8c0,4.031-3,5-3,5></path> <path class=\\\"ql-even ql-fill ql-stroke\\\" d=M14,8c0,4.031-3,5-3,5></path> </svg>\";\n\n/***/ },\n/* 76 */\n/***/ function(module, exports) {\n\n\tmodule.exports = \"<svg viewbox=\\\"0 0 18 18\\\"> <path class=ql-stroke d=M5,4H9.5A2.5,2.5,0,0,1,12,6.5v0A2.5,2.5,0,0,1,9.5,9H5A0,0,0,0,1,5,9V4A0,0,0,0,1,5,4Z></path> <path class=ql-stroke d=M5,9h5.5A2.5,2.5,0,0,1,13,11.5v0A2.5,2.5,0,0,1,10.5,14H5a0,0,0,0,1,0,0V9A0,0,0,0,1,5,9Z></path> </svg>\";\n\n/***/ },\n/* 77 */\n/***/ function(module, exports) {\n\n\tmodule.exports = \"<svg class=\\\"\\\" viewbox=\\\"0 0 18 18\\\"> <line class=ql-stroke x1=5 x2=13 y1=3 y2=3></line> <line class=ql-stroke x1=6 x2=9.35 y1=12 y2=3></line> <line class=ql-stroke x1=11 x2=15 y1=11 y2=15></line> <line class=ql-stroke x1=15 x2=11 y1=11 y2=15></line> <rect class=ql-fill height=1 rx=0.5 ry=0.5 width=7 x=2 y=14></rect> </svg>\";\n\n/***/ },\n/* 78 */\n/***/ function(module, exports) {\n\n\tmodule.exports = \"<svg viewbox=\\\"0 0 18 18\\\"> <polyline class=\\\"ql-even ql-stroke\\\" points=\\\"5 7 3 9 5 11\\\"></polyline> <polyline class=\\\"ql-even ql-stroke\\\" points=\\\"13 7 15 9 13 11\\\"></polyline> <line class=ql-stroke x1=10 x2=8 y1=5 y2=13></line> </svg>\";\n\n/***/ },\n/* 79 */\n/***/ function(module, exports) {\n\n\tmodule.exports = \"<svg viewbox=\\\"0 0 18 18\\\"> <line class=\\\"ql-color-label ql-stroke ql-transparent\\\" x1=3 x2=15 y1=15 y2=15></line> <polyline class=ql-stroke points=\\\"5.5 11 9 3 12.5 11\\\"></polyline> <line class=ql-stroke x1=11.63 x2=6.38 y1=9 y2=9></line> </svg>\";\n\n/***/ },\n/* 80 */\n/***/ function(module, exports) {\n\n\tmodule.exports = \"<svg viewbox=\\\"0 0 18 18\\\"> <polygon class=\\\"ql-stroke ql-fill\\\" points=\\\"3 11 5 9 3 7 3 11\\\"></polygon> <line class=\\\"ql-stroke ql-fill\\\" x1=15 x2=11 y1=4 y2=4></line> <path class=ql-fill d=M11,3a3,3,0,0,0,0,6h1V3H11Z></path> <rect class=ql-fill height=11 width=1 x=11 y=4></rect> <rect class=ql-fill height=11 width=1 x=13 y=4></rect> </svg>\";\n\n/***/ },\n/* 81 */\n/***/ function(module, exports) {\n\n\tmodule.exports = \"<svg viewbox=\\\"0 0 18 18\\\"> <polygon class=\\\"ql-stroke ql-fill\\\" points=\\\"15 12 13 10 15 8 15 12\\\"></polygon> <line class=\\\"ql-stroke ql-fill\\\" x1=9 x2=5 y1=4 y2=4></line> <path class=ql-fill d=M5,3A3,3,0,0,0,5,9H6V3H5Z></path> <rect class=ql-fill height=11 width=1 x=5 y=4></rect> <rect class=ql-fill height=11 width=1 x=7 y=4></rect> </svg>\";\n\n/***/ },\n/* 82 */\n/***/ function(module, exports) {\n\n\tmodule.exports = \"<svg viewbox=\\\"0 0 18 18\\\"> <path class=ql-fill d=M14,16H4a1,1,0,0,1,0-2H14A1,1,0,0,1,14,16Z /> <path class=ql-fill d=M14,4H4A1,1,0,0,1,4,2H14A1,1,0,0,1,14,4Z /> <rect class=ql-fill x=3 y=6 width=12 height=6 rx=1 ry=1 /> </svg>\";\n\n/***/ },\n/* 83 */\n/***/ function(module, exports) {\n\n\tmodule.exports = \"<svg viewbox=\\\"0 0 18 18\\\"> <path class=ql-fill d=M13,16H5a1,1,0,0,1,0-2h8A1,1,0,0,1,13,16Z /> <path class=ql-fill d=M13,4H5A1,1,0,0,1,5,2h8A1,1,0,0,1,13,4Z /> <rect class=ql-fill x=2 y=6 width=14 height=6 rx=1 ry=1 /> </svg>\";\n\n/***/ },\n/* 84 */\n/***/ function(module, exports) {\n\n\tmodule.exports = \"<svg viewbox=\\\"0 0 18 18\\\"> <path class=ql-fill d=M15,8H13a1,1,0,0,1,0-2h2A1,1,0,0,1,15,8Z /> <path class=ql-fill d=M15,12H13a1,1,0,0,1,0-2h2A1,1,0,0,1,15,12Z /> <path class=ql-fill d=M15,16H5a1,1,0,0,1,0-2H15A1,1,0,0,1,15,16Z /> <path class=ql-fill d=M15,4H5A1,1,0,0,1,5,2H15A1,1,0,0,1,15,4Z /> <rect class=ql-fill x=2 y=6 width=8 height=6 rx=1 ry=1 /> </svg>\";\n\n/***/ },\n/* 85 */\n/***/ function(module, exports) {\n\n\tmodule.exports = \"<svg viewbox=\\\"0 0 18 18\\\"> <path class=ql-fill d=M5,8H3A1,1,0,0,1,3,6H5A1,1,0,0,1,5,8Z /> <path class=ql-fill d=M5,12H3a1,1,0,0,1,0-2H5A1,1,0,0,1,5,12Z /> <path class=ql-fill d=M13,16H3a1,1,0,0,1,0-2H13A1,1,0,0,1,13,16Z /> <path class=ql-fill d=M13,4H3A1,1,0,0,1,3,2H13A1,1,0,0,1,13,4Z /> <rect class=ql-fill x=8 y=6 width=8 height=6 rx=1 ry=1 transform=\\\"translate(24 18) rotate(-180)\\\"/> </svg>\";\n\n/***/ },\n/* 86 */\n/***/ function(module, exports) {\n\n\tmodule.exports = \"<svg viewbox=\\\"0 0 18 18\\\"> <path class=ql-fill d=M11.759,2.482a2.561,2.561,0,0,0-3.53.607A7.656,7.656,0,0,0,6.8,6.2C6.109,9.188,5.275,14.677,4.15,14.927a1.545,1.545,0,0,0-1.3-.933A0.922,0.922,0,0,0,2,15.036S1.954,16,4.119,16s3.091-2.691,3.7-5.553c0.177-.826.36-1.726,0.554-2.6L8.775,6.2c0.381-1.421.807-2.521,1.306-2.676a1.014,1.014,0,0,0,1.02.56A0.966,0.966,0,0,0,11.759,2.482Z></path> <rect class=ql-fill height=1.6 rx=0.8 ry=0.8 width=5 x=5.15 y=6.2></rect> <path class=ql-fill d=M13.663,12.027a1.662,1.662,0,0,1,.266-0.276q0.193,0.069.456,0.138a2.1,2.1,0,0,0,.535.069,1.075,1.075,0,0,0,.767-0.3,1.044,1.044,0,0,0,.314-0.8,0.84,0.84,0,0,0-.238-0.619,0.8,0.8,0,0,0-.594-0.239,1.154,1.154,0,0,0-.781.3,4.607,4.607,0,0,0-.781,1q-0.091.15-.218,0.346l-0.246.38c-0.068-.288-0.137-0.582-0.212-0.885-0.459-1.847-2.494-.984-2.941-0.8-0.482.2-.353,0.647-0.094,0.529a0.869,0.869,0,0,1,1.281.585c0.217,0.751.377,1.436,0.527,2.038a5.688,5.688,0,0,1-.362.467,2.69,2.69,0,0,1-.264.271q-0.221-.08-0.471-0.147a2.029,2.029,0,0,0-.522-0.066,1.079,1.079,0,0,0-.768.3A1.058,1.058,0,0,0,9,15.131a0.82,0.82,0,0,0,.832.852,1.134,1.134,0,0,0,.787-0.3,5.11,5.11,0,0,0,.776-0.993q0.141-.219.215-0.34c0.046-.076.122-0.194,0.223-0.346a2.786,2.786,0,0,0,.918,1.726,2.582,2.582,0,0,0,2.376-.185c0.317-.181.212-0.565,0-0.494A0.807,0.807,0,0,1,14.176,15a5.159,5.159,0,0,1-.913-2.446l0,0Q13.487,12.24,13.663,12.027Z></path> </svg>\";\n\n/***/ },\n/* 87 */\n/***/ function(module, exports) {\n\n\tmodule.exports = \"<svg viewbox=\\\"0 0 18 18\\\"> <line class=ql-stroke x1=3 x2=3 y1=4 y2=14></line> <line class=ql-stroke x1=11 x2=11 y1=4 y2=14></line> <line class=ql-stroke x1=11 x2=3 y1=9 y2=9></line> <line class=\\\"ql-stroke ql-thin\\\" x1=13.5 x2=15.5 y1=14.5 y2=14.5></line> <path class=ql-fill d=M14.5,15a0.5,0.5,0,0,1-.5-0.5V12.085l-0.276.138A0.5,0.5,0,0,1,13.053,12c-0.124-.247-0.023-0.324.224-0.447l1-.5A0.5,0.5,0,0,1,15,11.5v3A0.5,0.5,0,0,1,14.5,15Z></path> </svg>\";\n\n/***/ },\n/* 88 */\n/***/ function(module, exports) {\n\n\tmodule.exports = \"<svg viewbox=\\\"0 0 18 18\\\"> <line class=ql-stroke x1=3 x2=3 y1=4 y2=14></line> <line class=ql-stroke x1=11 x2=11 y1=4 y2=14></line> <line class=ql-stroke x1=11 x2=3 y1=9 y2=9></line> <path class=\\\"ql-stroke ql-thin\\\" d=M15.5,14.5h-2c0-.234,1.85-1.076,1.85-2.234a0.959,0.959,0,0,0-1.85-.109></path> </svg>\";\n\n/***/ },\n/* 89 */\n/***/ function(module, exports) {\n\n\tmodule.exports = \"<svg viewbox=\\\"0 0 18 18\\\"> <line class=ql-stroke x1=7 x2=13 y1=4 y2=4></line> <line class=ql-stroke x1=5 x2=11 y1=14 y2=14></line> <line class=ql-stroke x1=8 x2=10 y1=14 y2=4></line> </svg>\";\n\n/***/ },\n/* 90 */\n/***/ function(module, exports) {\n\n\tmodule.exports = \"<svg viewbox=\\\"0 0 18 18\\\"> <rect class=ql-stroke height=10 width=12 x=3 y=4></rect> <circle class=ql-fill cx=6 cy=7 r=1></circle> <polyline class=\\\"ql-even ql-fill\\\" points=\\\"5 12 5 11 7 9 8 10 11 7 13 9 13 12 5 12\\\"></polyline> </svg>\";\n\n/***/ },\n/* 91 */\n/***/ function(module, exports) {\n\n\tmodule.exports = \"<svg viewbox=\\\"0 0 18 18\\\"> <line class=ql-stroke x1=3 x2=15 y1=14 y2=14></line> <line class=ql-stroke x1=3 x2=15 y1=4 y2=4></line> <line class=ql-stroke x1=9 x2=15 y1=9 y2=9></line> <polyline class=\\\"ql-fill ql-stroke\\\" points=\\\"3 7 3 11 5 9 3 7\\\"></polyline> </svg>\";\n\n/***/ },\n/* 92 */\n/***/ function(module, exports) {\n\n\tmodule.exports = \"<svg viewbox=\\\"0 0 18 18\\\"> <line class=ql-stroke x1=3 x2=15 y1=14 y2=14></line> <line class=ql-stroke x1=3 x2=15 y1=4 y2=4></line> <line class=ql-stroke x1=9 x2=15 y1=9 y2=9></line> <polyline class=ql-stroke points=\\\"5 7 5 11 3 9 5 7\\\"></polyline> </svg>\";\n\n/***/ },\n/* 93 */\n/***/ function(module, exports) {\n\n\tmodule.exports = \"<svg viewbox=\\\"0 0 18 18\\\"> <line class=ql-stroke x1=7 x2=11 y1=7 y2=11></line> <path class=\\\"ql-even ql-stroke\\\" d=M8.9,4.577a3.476,3.476,0,0,1,.36,4.679A3.476,3.476,0,0,1,4.577,8.9C3.185,7.5,2.035,6.4,4.217,4.217S7.5,3.185,8.9,4.577Z></path> <path class=\\\"ql-even ql-stroke\\\" d=M13.423,9.1a3.476,3.476,0,0,0-4.679-.36,3.476,3.476,0,0,0,.36,4.679c1.392,1.392,2.5,2.542,4.679.36S14.815,10.5,13.423,9.1Z></path> </svg>\";\n\n/***/ },\n/* 94 */\n/***/ function(module, exports) {\n\n\tmodule.exports = \"<svg viewbox=\\\"0 0 18 18\\\"> <line class=ql-stroke x1=7 x2=15 y1=4 y2=4></line> <line class=ql-stroke x1=7 x2=15 y1=9 y2=9></line> <line class=ql-stroke x1=7 x2=15 y1=14 y2=14></line> <line class=\\\"ql-stroke ql-thin\\\" x1=2.5 x2=4.5 y1=5.5 y2=5.5></line> <path class=ql-fill d=M3.5,6A0.5,0.5,0,0,1,3,5.5V3.085l-0.276.138A0.5,0.5,0,0,1,2.053,3c-0.124-.247-0.023-0.324.224-0.447l1-.5A0.5,0.5,0,0,1,4,2.5v3A0.5,0.5,0,0,1,3.5,6Z></path> <path class=\\\"ql-stroke ql-thin\\\" d=M4.5,10.5h-2c0-.234,1.85-1.076,1.85-2.234A0.959,0.959,0,0,0,2.5,8.156></path> <path class=\\\"ql-stroke ql-thin\\\" d=M2.5,14.846a0.959,0.959,0,0,0,1.85-.109A0.7,0.7,0,0,0,3.75,14a0.688,0.688,0,0,0,.6-0.736,0.959,0.959,0,0,0-1.85-.109></path> </svg>\";\n\n/***/ },\n/* 95 */\n/***/ function(module, exports) {\n\n\tmodule.exports = \"<svg viewbox=\\\"0 0 18 18\\\"> <line class=ql-stroke x1=6 x2=15 y1=4 y2=4></line> <line class=ql-stroke x1=6 x2=15 y1=9 y2=9></line> <line class=ql-stroke x1=6 x2=15 y1=14 y2=14></line> <line class=ql-stroke x1=3 x2=3 y1=4 y2=4></line> <line class=ql-stroke x1=3 x2=3 y1=9 y2=9></line> <line class=ql-stroke x1=3 x2=3 y1=14 y2=14></line> </svg>\";\n\n/***/ },\n/* 96 */\n/***/ function(module, exports) {\n\n\tmodule.exports = \"<svg class=\\\"\\\" viewbox=\\\"0 0 18 18\\\"> <line class=ql-stroke x1=9 x2=15 y1=4 y2=4></line> <polyline class=ql-stroke points=\\\"3 4 4 5 6 3\\\"></polyline> <line class=ql-stroke x1=9 x2=15 y1=14 y2=14></line> <polyline class=ql-stroke points=\\\"3 14 4 15 6 13\\\"></polyline> <line class=ql-stroke x1=9 x2=15 y1=9 y2=9></line> <polyline class=ql-stroke points=\\\"3 9 4 10 6 8\\\"></polyline> </svg>\";\n\n/***/ },\n/* 97 */\n/***/ function(module, exports) {\n\n\tmodule.exports = \"<svg viewbox=\\\"0 0 18 18\\\"> <path class=ql-fill d=M15.5,15H13.861a3.858,3.858,0,0,0,1.914-2.975,1.8,1.8,0,0,0-1.6-1.751A1.921,1.921,0,0,0,12.021,11.7a0.50013,0.50013,0,1,0,.957.291h0a0.914,0.914,0,0,1,1.053-.725,0.81,0.81,0,0,1,.744.762c0,1.076-1.16971,1.86982-1.93971,2.43082A1.45639,1.45639,0,0,0,12,15.5a0.5,0.5,0,0,0,.5.5h3A0.5,0.5,0,0,0,15.5,15Z /> <path class=ql-fill d=M9.65,5.241a1,1,0,0,0-1.409.108L6,7.964,3.759,5.349A1,1,0,0,0,2.192,6.59178Q2.21541,6.6213,2.241,6.649L4.684,9.5,2.241,12.35A1,1,0,0,0,3.71,13.70722q0.02557-.02768.049-0.05722L6,11.036,8.241,13.65a1,1,0,1,0,1.567-1.24277Q9.78459,12.3777,9.759,12.35L7.316,9.5,9.759,6.651A1,1,0,0,0,9.65,5.241Z /> </svg>\";\n\n/***/ },\n/* 98 */\n/***/ function(module, exports) {\n\n\tmodule.exports = \"<svg viewbox=\\\"0 0 18 18\\\"> <path class=ql-fill d=M15.5,7H13.861a4.015,4.015,0,0,0,1.914-2.975,1.8,1.8,0,0,0-1.6-1.751A1.922,1.922,0,0,0,12.021,3.7a0.5,0.5,0,1,0,.957.291,0.917,0.917,0,0,1,1.053-.725,0.81,0.81,0,0,1,.744.762c0,1.077-1.164,1.925-1.934,2.486A1.423,1.423,0,0,0,12,7.5a0.5,0.5,0,0,0,.5.5h3A0.5,0.5,0,0,0,15.5,7Z /> <path class=ql-fill d=M9.651,5.241a1,1,0,0,0-1.41.108L6,7.964,3.759,5.349a1,1,0,1,0-1.519,1.3L4.683,9.5,2.241,12.35a1,1,0,1,0,1.519,1.3L6,11.036,8.241,13.65a1,1,0,0,0,1.519-1.3L7.317,9.5,9.759,6.651A1,1,0,0,0,9.651,5.241Z /> </svg>\";\n\n/***/ },\n/* 99 */\n/***/ function(module, exports) {\n\n\tmodule.exports = \"<svg viewbox=\\\"0 0 18 18\\\"> <line class=\\\"ql-stroke ql-thin\\\" x1=15.5 x2=2.5 y1=8.5 y2=9.5></line> <path class=ql-fill d=M9.007,8C6.542,7.791,6,7.519,6,6.5,6,5.792,7.283,5,9,5c1.571,0,2.765.679,2.969,1.309a1,1,0,0,0,1.9-.617C13.356,4.106,11.354,3,9,3,6.2,3,4,4.538,4,6.5a3.2,3.2,0,0,0,.5,1.843Z></path> <path class=ql-fill d=M8.984,10C11.457,10.208,12,10.479,12,11.5c0,0.708-1.283,1.5-3,1.5-1.571,0-2.765-.679-2.969-1.309a1,1,0,1,0-1.9.617C4.644,13.894,6.646,15,9,15c2.8,0,5-1.538,5-3.5a3.2,3.2,0,0,0-.5-1.843Z></path> </svg>\";\n\n/***/ },\n/* 100 */\n/***/ function(module, exports) {\n\n\tmodule.exports = \"<svg viewbox=\\\"0 0 18 18\\\"> <path class=ql-stroke d=M5,3V9a4.012,4.012,0,0,0,4,4H9a4.012,4.012,0,0,0,4-4V3></path> <rect class=ql-fill height=1 rx=0.5 ry=0.5 width=12 x=3 y=15></rect> </svg>\";\n\n/***/ },\n/* 101 */\n/***/ function(module, exports) {\n\n\tmodule.exports = \"<svg viewbox=\\\"0 0 18 18\\\"> <rect class=ql-stroke height=12 width=12 x=3 y=3></rect> <rect class=ql-fill height=12 width=1 x=5 y=3></rect> <rect class=ql-fill height=12 width=1 x=12 y=3></rect> <rect class=ql-fill height=2 width=8 x=5 y=8></rect> <rect class=ql-fill height=1 width=3 x=3 y=5></rect> <rect class=ql-fill height=1 width=3 x=3 y=7></rect> <rect class=ql-fill height=1 width=3 x=3 y=10></rect> <rect class=ql-fill height=1 width=3 x=3 y=12></rect> <rect class=ql-fill height=1 width=3 x=12 y=5></rect> <rect class=ql-fill height=1 width=3 x=12 y=7></rect> <rect class=ql-fill height=1 width=3 x=12 y=10></rect> <rect class=ql-fill height=1 width=3 x=12 y=12></rect> </svg>\";\n\n/***/ },\n/* 102 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\n\tvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\n\tvar _dropdown = __webpack_require__(103);\n\n\tvar _dropdown2 = _interopRequireDefault(_dropdown);\n\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n\tvar Picker = function () {\n\t  function Picker(select) {\n\t    var _this = this;\n\n\t    _classCallCheck(this, Picker);\n\n\t    this.select = select;\n\t    this.container = document.createElement('span');\n\t    this.buildPicker();\n\t    this.select.style.display = 'none';\n\t    this.select.parentNode.insertBefore(this.container, this.select);\n\t    this.label.addEventListener('mousedown', function () {\n\t      _this.container.classList.toggle('ql-expanded');\n\t    });\n\t    this.select.addEventListener('change', this.update.bind(this));\n\t  }\n\n\t  _createClass(Picker, [{\n\t    key: 'buildItem',\n\t    value: function buildItem(option) {\n\t      var _this2 = this;\n\n\t      var item = document.createElement('span');\n\t      item.classList.add('ql-picker-item');\n\t      if (option.hasAttribute('value')) {\n\t        item.setAttribute('data-value', option.getAttribute('value'));\n\t      }\n\t      if (option.textContent) {\n\t        item.setAttribute('data-label', option.textContent);\n\t      }\n\t      item.addEventListener('click', function () {\n\t        _this2.selectItem(item, true);\n\t      });\n\t      return item;\n\t    }\n\t  }, {\n\t    key: 'buildLabel',\n\t    value: function buildLabel() {\n\t      var label = document.createElement('span');\n\t      label.classList.add('ql-picker-label');\n\t      label.innerHTML = _dropdown2.default;\n\t      this.container.appendChild(label);\n\t      return label;\n\t    }\n\t  }, {\n\t    key: 'buildOptions',\n\t    value: function buildOptions() {\n\t      var _this3 = this;\n\n\t      var options = document.createElement('span');\n\t      options.classList.add('ql-picker-options');\n\t      [].slice.call(this.select.options).forEach(function (option) {\n\t        var item = _this3.buildItem(option);\n\t        options.appendChild(item);\n\t        if (option.hasAttribute('selected')) {\n\t          _this3.selectItem(item);\n\t        }\n\t      });\n\t      this.container.appendChild(options);\n\t    }\n\t  }, {\n\t    key: 'buildPicker',\n\t    value: function buildPicker() {\n\t      var _this4 = this;\n\n\t      [].slice.call(this.select.attributes).forEach(function (item) {\n\t        _this4.container.setAttribute(item.name, item.value);\n\t      });\n\t      this.container.classList.add('ql-picker');\n\t      this.label = this.buildLabel();\n\t      this.buildOptions();\n\t    }\n\t  }, {\n\t    key: 'close',\n\t    value: function close() {\n\t      this.container.classList.remove('ql-expanded');\n\t    }\n\t  }, {\n\t    key: 'selectItem',\n\t    value: function selectItem(item) {\n\t      var trigger = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n\t      var selected = this.container.querySelector('.ql-selected');\n\t      if (item === selected) return;\n\t      if (selected != null) {\n\t        selected.classList.remove('ql-selected');\n\t      }\n\t      if (item == null) return;\n\t      item.classList.add('ql-selected');\n\t      this.select.selectedIndex = [].indexOf.call(item.parentNode.children, item);\n\t      if (item.hasAttribute('data-value')) {\n\t        this.label.setAttribute('data-value', item.getAttribute('data-value'));\n\t      } else {\n\t        this.label.removeAttribute('data-value');\n\t      }\n\t      if (item.hasAttribute('data-label')) {\n\t        this.label.setAttribute('data-label', item.getAttribute('data-label'));\n\t      } else {\n\t        this.label.removeAttribute('data-label');\n\t      }\n\t      if (trigger) {\n\t        if (typeof Event === 'function') {\n\t          this.select.dispatchEvent(new Event('change'));\n\t        } else if ((typeof Event === 'undefined' ? 'undefined' : _typeof(Event)) === 'object') {\n\t          // IE11\n\t          var event = document.createEvent('Event');\n\t          event.initEvent('change', true, true);\n\t          this.select.dispatchEvent(event);\n\t        }\n\t        this.close();\n\t      }\n\t    }\n\t  }, {\n\t    key: 'update',\n\t    value: function update() {\n\t      var option = void 0;\n\t      if (this.select.selectedIndex > -1) {\n\t        var item = this.container.querySelector('.ql-picker-options').children[this.select.selectedIndex];\n\t        option = this.select.options[this.select.selectedIndex];\n\t        this.selectItem(item);\n\t      } else {\n\t        this.selectItem(null);\n\t      }\n\t      var isActive = option != null && option !== this.select.querySelector('option[selected]');\n\t      this.label.classList.toggle('ql-active', isActive);\n\t    }\n\t  }]);\n\n\t  return Picker;\n\t}();\n\n\texports.default = Picker;\n\n/***/ },\n/* 103 */\n/***/ function(module, exports) {\n\n\tmodule.exports = \"<svg viewbox=\\\"0 0 18 18\\\"> <polygon class=ql-stroke points=\\\"7 11 9 13 11 11 7 11\\\"></polygon> <polygon class=ql-stroke points=\\\"7 7 9 5 11 7 7 7\\\"></polygon> </svg>\";\n\n/***/ },\n/* 104 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\n\tvar _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if (\"value\" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };\n\n\tvar _picker = __webpack_require__(102);\n\n\tvar _picker2 = _interopRequireDefault(_picker);\n\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\n\tvar ColorPicker = function (_Picker) {\n\t  _inherits(ColorPicker, _Picker);\n\n\t  function ColorPicker(select, label) {\n\t    _classCallCheck(this, ColorPicker);\n\n\t    var _this = _possibleConstructorReturn(this, (ColorPicker.__proto__ || Object.getPrototypeOf(ColorPicker)).call(this, select));\n\n\t    _this.label.innerHTML = label;\n\t    _this.container.classList.add('ql-color-picker');\n\t    [].slice.call(_this.container.querySelectorAll('.ql-picker-item'), 0, 7).forEach(function (item) {\n\t      item.classList.add('ql-primary');\n\t    });\n\t    return _this;\n\t  }\n\n\t  _createClass(ColorPicker, [{\n\t    key: 'buildItem',\n\t    value: function buildItem(option) {\n\t      var item = _get(ColorPicker.prototype.__proto__ || Object.getPrototypeOf(ColorPicker.prototype), 'buildItem', this).call(this, option);\n\t      item.style.backgroundColor = option.getAttribute('value') || '';\n\t      return item;\n\t    }\n\t  }, {\n\t    key: 'selectItem',\n\t    value: function selectItem(item, trigger) {\n\t      _get(ColorPicker.prototype.__proto__ || Object.getPrototypeOf(ColorPicker.prototype), 'selectItem', this).call(this, item, trigger);\n\t      var colorLabel = this.label.querySelector('.ql-color-label');\n\t      var value = item ? item.getAttribute('data-value') || '' : '';\n\t      if (colorLabel) {\n\t        if (colorLabel.tagName === 'line') {\n\t          colorLabel.style.stroke = value;\n\t        } else {\n\t          colorLabel.style.fill = value;\n\t        }\n\t      }\n\t    }\n\t  }]);\n\n\t  return ColorPicker;\n\t}(_picker2.default);\n\n\texports.default = ColorPicker;\n\n/***/ },\n/* 105 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\n\tvar _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if (\"value\" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };\n\n\tvar _picker = __webpack_require__(102);\n\n\tvar _picker2 = _interopRequireDefault(_picker);\n\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\n\tvar IconPicker = function (_Picker) {\n\t  _inherits(IconPicker, _Picker);\n\n\t  function IconPicker(select, icons) {\n\t    _classCallCheck(this, IconPicker);\n\n\t    var _this = _possibleConstructorReturn(this, (IconPicker.__proto__ || Object.getPrototypeOf(IconPicker)).call(this, select));\n\n\t    _this.container.classList.add('ql-icon-picker');\n\t    [].forEach.call(_this.container.querySelectorAll('.ql-picker-item'), function (item) {\n\t      item.innerHTML = icons[item.getAttribute('data-value') || ''];\n\t    });\n\t    _this.defaultItem = _this.container.querySelector('.ql-selected');\n\t    _this.selectItem(_this.defaultItem);\n\t    return _this;\n\t  }\n\n\t  _createClass(IconPicker, [{\n\t    key: 'selectItem',\n\t    value: function selectItem(item, trigger) {\n\t      _get(IconPicker.prototype.__proto__ || Object.getPrototypeOf(IconPicker.prototype), 'selectItem', this).call(this, item, trigger);\n\t      item = item || this.defaultItem;\n\t      this.label.innerHTML = item.innerHTML;\n\t    }\n\t  }]);\n\n\t  return IconPicker;\n\t}(_picker2.default);\n\n\texports.default = IconPicker;\n\n/***/ },\n/* 106 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n\tvar Tooltip = function () {\n\t  function Tooltip(quill, boundsContainer) {\n\t    var _this = this;\n\n\t    _classCallCheck(this, Tooltip);\n\n\t    this.quill = quill;\n\t    this.boundsContainer = boundsContainer || document.body;\n\t    this.root = quill.addContainer('ql-tooltip');\n\t    this.root.innerHTML = this.constructor.TEMPLATE;\n\t    this.quill.root.addEventListener('scroll', function () {\n\t      _this.root.style.marginTop = -1 * _this.quill.root.scrollTop + 'px';\n\t    });\n\t    this.hide();\n\t  }\n\n\t  _createClass(Tooltip, [{\n\t    key: 'hide',\n\t    value: function hide() {\n\t      this.root.classList.add('ql-hidden');\n\t    }\n\t  }, {\n\t    key: 'position',\n\t    value: function position(reference) {\n\t      var left = reference.left + reference.width / 2 - this.root.offsetWidth / 2;\n\t      var top = reference.bottom + this.quill.root.scrollTop;\n\t      this.root.style.left = left + 'px';\n\t      this.root.style.top = top + 'px';\n\t      this.root.classList.remove('ql-flip');\n\t      var containerBounds = this.boundsContainer.getBoundingClientRect();\n\t      var rootBounds = this.root.getBoundingClientRect();\n\t      var shift = 0;\n\t      if (rootBounds.right > containerBounds.right) {\n\t        shift = containerBounds.right - rootBounds.right;\n\t        this.root.style.left = left + shift + 'px';\n\t      }\n\t      if (rootBounds.left < containerBounds.left) {\n\t        shift = containerBounds.left - rootBounds.left;\n\t        this.root.style.left = left + shift + 'px';\n\t      }\n\t      if (rootBounds.bottom > containerBounds.bottom) {\n\t        var height = rootBounds.bottom - rootBounds.top;\n\t        var verticalShift = containerBounds.bottom - rootBounds.bottom - height;\n\t        this.root.style.top = top + verticalShift + 'px';\n\t        this.root.classList.add('ql-flip');\n\t      }\n\t      return shift;\n\t    }\n\t  }, {\n\t    key: 'show',\n\t    value: function show() {\n\t      this.root.classList.remove('ql-editing');\n\t      this.root.classList.remove('ql-hidden');\n\t    }\n\t  }]);\n\n\t  return Tooltip;\n\t}();\n\n\texports.default = Tooltip;\n\n/***/ },\n/* 107 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\texports.default = exports.BubbleTooltip = undefined;\n\n\tvar _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if (\"value\" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };\n\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\n\tvar _extend = __webpack_require__(25);\n\n\tvar _extend2 = _interopRequireDefault(_extend);\n\n\tvar _emitter = __webpack_require__(35);\n\n\tvar _emitter2 = _interopRequireDefault(_emitter);\n\n\tvar _base = __webpack_require__(108);\n\n\tvar _base2 = _interopRequireDefault(_base);\n\n\tvar _selection = __webpack_require__(40);\n\n\tvar _icons = __webpack_require__(69);\n\n\tvar _icons2 = _interopRequireDefault(_icons);\n\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\n\tvar TOOLBAR_CONFIG = [['bold', 'italic', 'link'], [{ header: 1 }, { header: 2 }, 'blockquote']];\n\n\tvar BubbleTheme = function (_BaseTheme) {\n\t  _inherits(BubbleTheme, _BaseTheme);\n\n\t  function BubbleTheme(quill, options) {\n\t    _classCallCheck(this, BubbleTheme);\n\n\t    if (options.modules.toolbar != null && options.modules.toolbar.container == null) {\n\t      options.modules.toolbar.container = TOOLBAR_CONFIG;\n\t    }\n\n\t    var _this = _possibleConstructorReturn(this, (BubbleTheme.__proto__ || Object.getPrototypeOf(BubbleTheme)).call(this, quill, options));\n\n\t    _this.quill.container.classList.add('ql-bubble');\n\t    return _this;\n\t  }\n\n\t  _createClass(BubbleTheme, [{\n\t    key: 'extendToolbar',\n\t    value: function extendToolbar(toolbar) {\n\t      this.tooltip = new BubbleTooltip(this.quill, this.options.bounds);\n\t      this.tooltip.root.appendChild(toolbar.container);\n\t      this.buildButtons([].slice.call(toolbar.container.querySelectorAll('button')), _icons2.default);\n\t      this.buildPickers([].slice.call(toolbar.container.querySelectorAll('select')), _icons2.default);\n\t    }\n\t  }]);\n\n\t  return BubbleTheme;\n\t}(_base2.default);\n\n\tBubbleTheme.DEFAULTS = (0, _extend2.default)(true, {}, _base2.default.DEFAULTS, {\n\t  modules: {\n\t    toolbar: {\n\t      handlers: {\n\t        link: function link(value) {\n\t          if (!value) {\n\t            this.quill.format('link', false);\n\t          } else {\n\t            this.quill.theme.tooltip.edit();\n\t          }\n\t        }\n\t      }\n\t    }\n\t  }\n\t});\n\n\tvar BubbleTooltip = function (_BaseTooltip) {\n\t  _inherits(BubbleTooltip, _BaseTooltip);\n\n\t  function BubbleTooltip(quill, bounds) {\n\t    _classCallCheck(this, BubbleTooltip);\n\n\t    var _this2 = _possibleConstructorReturn(this, (BubbleTooltip.__proto__ || Object.getPrototypeOf(BubbleTooltip)).call(this, quill, bounds));\n\n\t    _this2.quill.on(_emitter2.default.events.EDITOR_CHANGE, function (type, range, oldRange, source) {\n\t      if (type !== _emitter2.default.events.SELECTION_CHANGE) return;\n\t      if (range != null && range.length > 0 && source === _emitter2.default.sources.USER) {\n\t        _this2.show();\n\t        // Lock our width so we will expand beyond our offsetParent boundaries\n\t        _this2.root.style.left = '0px';\n\t        _this2.root.style.width = '';\n\t        _this2.root.style.width = _this2.root.offsetWidth + 'px';\n\t        var lines = _this2.quill.scroll.lines(range.index, range.length);\n\t        if (lines.length === 1) {\n\t          _this2.position(_this2.quill.getBounds(range));\n\t        } else {\n\t          var lastLine = lines[lines.length - 1];\n\t          var index = lastLine.offset(_this2.quill.scroll);\n\t          var length = Math.min(lastLine.length() - 1, range.index + range.length - index);\n\t          var _bounds = _this2.quill.getBounds(new _selection.Range(index, length));\n\t          _this2.position(_bounds);\n\t        }\n\t      } else if (document.activeElement !== _this2.textbox && _this2.quill.hasFocus()) {\n\t        _this2.hide();\n\t      }\n\t    });\n\t    return _this2;\n\t  }\n\n\t  _createClass(BubbleTooltip, [{\n\t    key: 'listen',\n\t    value: function listen() {\n\t      var _this3 = this;\n\n\t      _get(BubbleTooltip.prototype.__proto__ || Object.getPrototypeOf(BubbleTooltip.prototype), 'listen', this).call(this);\n\t      this.root.querySelector('.ql-close').addEventListener('click', function () {\n\t        _this3.root.classList.remove('ql-editing');\n\t      });\n\t      this.quill.on(_emitter2.default.events.SCROLL_OPTIMIZE, function () {\n\t        // Let selection be restored by toolbar handlers before repositioning\n\t        setTimeout(function () {\n\t          if (_this3.root.classList.contains('ql-hidden')) return;\n\t          var range = _this3.quill.getSelection();\n\t          if (range != null) {\n\t            _this3.position(_this3.quill.getBounds(range));\n\t          }\n\t        }, 1);\n\t      });\n\t    }\n\t  }, {\n\t    key: 'cancel',\n\t    value: function cancel() {\n\t      this.show();\n\t    }\n\t  }, {\n\t    key: 'position',\n\t    value: function position(reference) {\n\t      var shift = _get(BubbleTooltip.prototype.__proto__ || Object.getPrototypeOf(BubbleTooltip.prototype), 'position', this).call(this, reference);\n\t      var arrow = this.root.querySelector('.ql-tooltip-arrow');\n\t      arrow.style.marginLeft = '';\n\t      if (shift === 0) return shift;\n\t      arrow.style.marginLeft = -1 * shift - arrow.offsetWidth / 2 + 'px';\n\t    }\n\t  }]);\n\n\t  return BubbleTooltip;\n\t}(_base.BaseTooltip);\n\n\tBubbleTooltip.TEMPLATE = ['<span class=\"ql-tooltip-arrow\"></span>', '<div class=\"ql-tooltip-editor\">', '<input type=\"text\" data-formula=\"e=mc^2\" data-link=\"quilljs.com\" data-video=\"Embed URL\">', '<a class=\"ql-close\"></a>', '</div>'].join('');\n\n\texports.BubbleTooltip = BubbleTooltip;\n\texports.default = BubbleTheme;\n\n/***/ },\n/* 108 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\texports.default = exports.BaseTooltip = undefined;\n\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\n\tvar _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if (\"value\" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };\n\n\tvar _extend = __webpack_require__(25);\n\n\tvar _extend2 = _interopRequireDefault(_extend);\n\n\tvar _quillDelta = __webpack_require__(20);\n\n\tvar _quillDelta2 = _interopRequireDefault(_quillDelta);\n\n\tvar _emitter = __webpack_require__(35);\n\n\tvar _emitter2 = _interopRequireDefault(_emitter);\n\n\tvar _keyboard = __webpack_require__(52);\n\n\tvar _keyboard2 = _interopRequireDefault(_keyboard);\n\n\tvar _theme = __webpack_require__(41);\n\n\tvar _theme2 = _interopRequireDefault(_theme);\n\n\tvar _colorPicker = __webpack_require__(104);\n\n\tvar _colorPicker2 = _interopRequireDefault(_colorPicker);\n\n\tvar _iconPicker = __webpack_require__(105);\n\n\tvar _iconPicker2 = _interopRequireDefault(_iconPicker);\n\n\tvar _picker = __webpack_require__(102);\n\n\tvar _picker2 = _interopRequireDefault(_picker);\n\n\tvar _tooltip = __webpack_require__(106);\n\n\tvar _tooltip2 = _interopRequireDefault(_tooltip);\n\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\n\tvar ALIGNS = [false, 'center', 'right', 'justify'];\n\n\tvar COLORS = [\"#000000\", \"#e60000\", \"#ff9900\", \"#ffff00\", \"#008a00\", \"#0066cc\", \"#9933ff\", \"#ffffff\", \"#facccc\", \"#ffebcc\", \"#ffffcc\", \"#cce8cc\", \"#cce0f5\", \"#ebd6ff\", \"#bbbbbb\", \"#f06666\", \"#ffc266\", \"#ffff66\", \"#66b966\", \"#66a3e0\", \"#c285ff\", \"#888888\", \"#a10000\", \"#b26b00\", \"#b2b200\", \"#006100\", \"#0047b2\", \"#6b24b2\", \"#444444\", \"#5c0000\", \"#663d00\", \"#666600\", \"#003700\", \"#002966\", \"#3d1466\"];\n\n\tvar FONTS = [false, 'serif', 'monospace'];\n\n\tvar HEADERS = ['1', '2', '3', false];\n\n\tvar SIZES = ['small', false, 'large', 'huge'];\n\n\tvar BaseTheme = function (_Theme) {\n\t  _inherits(BaseTheme, _Theme);\n\n\t  function BaseTheme(quill, options) {\n\t    _classCallCheck(this, BaseTheme);\n\n\t    var _this = _possibleConstructorReturn(this, (BaseTheme.__proto__ || Object.getPrototypeOf(BaseTheme)).call(this, quill, options));\n\n\t    var listener = function listener(e) {\n\t      if (!document.body.contains(quill.root)) {\n\t        return document.body.removeEventListener('click', listener);\n\t      }\n\t      if (_this.tooltip != null && !_this.tooltip.root.contains(e.target) && document.activeElement !== _this.tooltip.textbox && !_this.quill.hasFocus()) {\n\t        _this.tooltip.hide();\n\t      }\n\t      if (_this.pickers != null) {\n\t        _this.pickers.forEach(function (picker) {\n\t          if (!picker.container.contains(e.target)) {\n\t            picker.close();\n\t          }\n\t        });\n\t      }\n\t    };\n\t    document.body.addEventListener('click', listener);\n\t    return _this;\n\t  }\n\n\t  _createClass(BaseTheme, [{\n\t    key: 'addModule',\n\t    value: function addModule(name) {\n\t      var module = _get(BaseTheme.prototype.__proto__ || Object.getPrototypeOf(BaseTheme.prototype), 'addModule', this).call(this, name);\n\t      if (name === 'toolbar') {\n\t        this.extendToolbar(module);\n\t      }\n\t      return module;\n\t    }\n\t  }, {\n\t    key: 'buildButtons',\n\t    value: function buildButtons(buttons, icons) {\n\t      buttons.forEach(function (button) {\n\t        var className = button.getAttribute('class') || '';\n\t        className.split(/\\s+/).forEach(function (name) {\n\t          if (!name.startsWith('ql-')) return;\n\t          name = name.slice('ql-'.length);\n\t          if (icons[name] == null) return;\n\t          if (name === 'direction') {\n\t            button.innerHTML = icons[name][''] + icons[name]['rtl'];\n\t          } else if (typeof icons[name] === 'string') {\n\t            button.innerHTML = icons[name];\n\t          } else {\n\t            var value = button.value || '';\n\t            if (value != null && icons[name][value]) {\n\t              button.innerHTML = icons[name][value];\n\t            }\n\t          }\n\t        });\n\t      });\n\t    }\n\t  }, {\n\t    key: 'buildPickers',\n\t    value: function buildPickers(selects, icons) {\n\t      var _this2 = this;\n\n\t      this.pickers = selects.map(function (select) {\n\t        if (select.classList.contains('ql-align')) {\n\t          if (select.querySelector('option') == null) {\n\t            fillSelect(select, ALIGNS);\n\t          }\n\t          return new _iconPicker2.default(select, icons.align);\n\t        } else if (select.classList.contains('ql-background') || select.classList.contains('ql-color')) {\n\t          var format = select.classList.contains('ql-background') ? 'background' : 'color';\n\t          if (select.querySelector('option') == null) {\n\t            fillSelect(select, COLORS, format === 'background' ? '#ffffff' : '#000000');\n\t          }\n\t          return new _colorPicker2.default(select, icons[format]);\n\t        } else {\n\t          if (select.querySelector('option') == null) {\n\t            if (select.classList.contains('ql-font')) {\n\t              fillSelect(select, FONTS);\n\t            } else if (select.classList.contains('ql-header')) {\n\t              fillSelect(select, HEADERS);\n\t            } else if (select.classList.contains('ql-size')) {\n\t              fillSelect(select, SIZES);\n\t            }\n\t          }\n\t          return new _picker2.default(select);\n\t        }\n\t      });\n\t      var update = function update() {\n\t        _this2.pickers.forEach(function (picker) {\n\t          picker.update();\n\t        });\n\t      };\n\t      this.quill.on(_emitter2.default.events.SELECTION_CHANGE, update).on(_emitter2.default.events.SCROLL_OPTIMIZE, update);\n\t    }\n\t  }]);\n\n\t  return BaseTheme;\n\t}(_theme2.default);\n\n\tBaseTheme.DEFAULTS = (0, _extend2.default)(true, {}, _theme2.default.DEFAULTS, {\n\t  modules: {\n\t    toolbar: {\n\t      handlers: {\n\t        formula: function formula() {\n\t          this.quill.theme.tooltip.edit('formula');\n\t        },\n\t        image: function image() {\n\t          var _this3 = this;\n\n\t          var fileInput = this.container.querySelector('input.ql-image[type=file]');\n\t          if (fileInput == null) {\n\t            fileInput = document.createElement('input');\n\t            fileInput.setAttribute('type', 'file');\n\t            fileInput.setAttribute('accept', 'image/png, image/gif, image/jpeg, image/bmp, image/x-icon, image/svg+xml');\n\t            fileInput.classList.add('ql-image');\n\t            fileInput.addEventListener('change', function () {\n\t              if (fileInput.files != null && fileInput.files[0] != null) {\n\t                var reader = new FileReader();\n\t                reader.onload = function (e) {\n\t                  var range = _this3.quill.getSelection(true);\n\t                  _this3.quill.updateContents(new _quillDelta2.default().retain(range.index).delete(range.length).insert({ image: e.target.result }), _emitter2.default.sources.USER);\n\t                  fileInput.value = \"\";\n\t                };\n\t                reader.readAsDataURL(fileInput.files[0]);\n\t              }\n\t            });\n\t            this.container.appendChild(fileInput);\n\t          }\n\t          fileInput.click();\n\t        },\n\t        video: function video() {\n\t          this.quill.theme.tooltip.edit('video');\n\t        }\n\t      }\n\t    }\n\t  }\n\t});\n\n\tvar BaseTooltip = function (_Tooltip) {\n\t  _inherits(BaseTooltip, _Tooltip);\n\n\t  function BaseTooltip(quill, boundsContainer) {\n\t    _classCallCheck(this, BaseTooltip);\n\n\t    var _this4 = _possibleConstructorReturn(this, (BaseTooltip.__proto__ || Object.getPrototypeOf(BaseTooltip)).call(this, quill, boundsContainer));\n\n\t    _this4.textbox = _this4.root.querySelector('input[type=\"text\"]');\n\t    _this4.listen();\n\t    return _this4;\n\t  }\n\n\t  _createClass(BaseTooltip, [{\n\t    key: 'listen',\n\t    value: function listen() {\n\t      var _this5 = this;\n\n\t      this.textbox.addEventListener('keydown', function (event) {\n\t        if (_keyboard2.default.match(event, 'enter')) {\n\t          _this5.save();\n\t          event.preventDefault();\n\t        } else if (_keyboard2.default.match(event, 'escape')) {\n\t          _this5.cancel();\n\t          event.preventDefault();\n\t        }\n\t      });\n\t    }\n\t  }, {\n\t    key: 'cancel',\n\t    value: function cancel() {\n\t      this.hide();\n\t    }\n\t  }, {\n\t    key: 'edit',\n\t    value: function edit() {\n\t      var mode = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'link';\n\t      var preview = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n\n\t      this.root.classList.remove('ql-hidden');\n\t      this.root.classList.add('ql-editing');\n\t      if (preview != null) {\n\t        this.textbox.value = preview;\n\t      } else if (mode !== this.root.getAttribute('data-mode')) {\n\t        this.textbox.value = '';\n\t      }\n\t      this.position(this.quill.getBounds(this.quill.selection.savedRange));\n\t      this.textbox.select();\n\t      this.textbox.setAttribute('placeholder', this.textbox.getAttribute('data-' + mode) || '');\n\t      this.root.setAttribute('data-mode', mode);\n\t    }\n\t  }, {\n\t    key: 'restoreFocus',\n\t    value: function restoreFocus() {\n\t      var scrollTop = this.quill.root.scrollTop;\n\t      this.quill.focus();\n\t      this.quill.root.scrollTop = scrollTop;\n\t    }\n\t  }, {\n\t    key: 'save',\n\t    value: function save() {\n\t      var value = this.textbox.value;\n\t      switch (this.root.getAttribute('data-mode')) {\n\t        case 'link':\n\t          {\n\t            var scrollTop = this.quill.root.scrollTop;\n\t            if (this.linkRange) {\n\t              this.quill.formatText(this.linkRange, 'link', value, _emitter2.default.sources.USER);\n\t              delete this.linkRange;\n\t            } else {\n\t              this.restoreFocus();\n\t              this.quill.format('link', value, _emitter2.default.sources.USER);\n\t            }\n\t            this.quill.root.scrollTop = scrollTop;\n\t            break;\n\t          }\n\t        case 'video':\n\t          {\n\t            var match = value.match(/^(https?):\\/\\/(www\\.)?youtube\\.com\\/watch.*v=([a-zA-Z0-9_-]+)/) || value.match(/^(https?):\\/\\/(www\\.)?youtu\\.be\\/([a-zA-Z0-9_-]+)/);\n\t            if (match) {\n\t              value = match[1] + '://www.youtube.com/embed/' + match[3] + '?showinfo=0';\n\t            } else if (match = value.match(/^(https?):\\/\\/(www\\.)?vimeo\\.com\\/(\\d+)/)) {\n\t              // eslint-disable-line no-cond-assign\n\t              value = match[1] + '://player.vimeo.com/video/' + match[3] + '/';\n\t            }\n\t          } // eslint-disable-next-line no-fallthrough\n\t        case 'formula':\n\t          {\n\t            var range = this.quill.getSelection(true);\n\t            var index = range.index + range.length;\n\t            if (range != null) {\n\t              this.quill.insertEmbed(index, this.root.getAttribute('data-mode'), value, _emitter2.default.sources.USER);\n\t              if (this.root.getAttribute('data-mode') === 'formula') {\n\t                this.quill.insertText(index + 1, ' ', _emitter2.default.sources.USER);\n\t              }\n\t              this.quill.setSelection(index + 2, _emitter2.default.sources.USER);\n\t            }\n\t            break;\n\t          }\n\t        default:\n\t      }\n\t      this.textbox.value = '';\n\t      this.hide();\n\t    }\n\t  }]);\n\n\t  return BaseTooltip;\n\t}(_tooltip2.default);\n\n\tfunction fillSelect(select, values) {\n\t  var defaultValue = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n\t  values.forEach(function (value) {\n\t    var option = document.createElement('option');\n\t    if (value === defaultValue) {\n\t      option.setAttribute('selected', 'selected');\n\t    } else {\n\t      option.setAttribute('value', value);\n\t    }\n\t    select.appendChild(option);\n\t  });\n\t}\n\n\texports.BaseTooltip = BaseTooltip;\n\texports.default = BaseTheme;\n\n/***/ },\n/* 109 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\n\tvar _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"]) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); } }; }();\n\n\tvar _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if (\"value\" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };\n\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\n\tvar _extend = __webpack_require__(25);\n\n\tvar _extend2 = _interopRequireDefault(_extend);\n\n\tvar _emitter = __webpack_require__(35);\n\n\tvar _emitter2 = _interopRequireDefault(_emitter);\n\n\tvar _base = __webpack_require__(108);\n\n\tvar _base2 = _interopRequireDefault(_base);\n\n\tvar _link = __webpack_require__(60);\n\n\tvar _link2 = _interopRequireDefault(_link);\n\n\tvar _selection = __webpack_require__(40);\n\n\tvar _icons = __webpack_require__(69);\n\n\tvar _icons2 = _interopRequireDefault(_icons);\n\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\n\tvar TOOLBAR_CONFIG = [[{ header: ['1', '2', '3', false] }], ['bold', 'italic', 'underline', 'link'], [{ list: 'ordered' }, { list: 'bullet' }], ['clean']];\n\n\tvar SnowTheme = function (_BaseTheme) {\n\t  _inherits(SnowTheme, _BaseTheme);\n\n\t  function SnowTheme(quill, options) {\n\t    _classCallCheck(this, SnowTheme);\n\n\t    if (options.modules.toolbar != null && options.modules.toolbar.container == null) {\n\t      options.modules.toolbar.container = TOOLBAR_CONFIG;\n\t    }\n\n\t    var _this = _possibleConstructorReturn(this, (SnowTheme.__proto__ || Object.getPrototypeOf(SnowTheme)).call(this, quill, options));\n\n\t    _this.quill.container.classList.add('ql-snow');\n\t    return _this;\n\t  }\n\n\t  _createClass(SnowTheme, [{\n\t    key: 'extendToolbar',\n\t    value: function extendToolbar(toolbar) {\n\t      toolbar.container.classList.add('ql-snow');\n\t      this.buildButtons([].slice.call(toolbar.container.querySelectorAll('button')), _icons2.default);\n\t      this.buildPickers([].slice.call(toolbar.container.querySelectorAll('select')), _icons2.default);\n\t      this.tooltip = new SnowTooltip(this.quill, this.options.bounds);\n\t      if (toolbar.container.querySelector('.ql-link')) {\n\t        this.quill.keyboard.addBinding({ key: 'K', shortKey: true }, function (range, context) {\n\t          toolbar.handlers['link'].call(toolbar, !context.format.link);\n\t        });\n\t      }\n\t    }\n\t  }]);\n\n\t  return SnowTheme;\n\t}(_base2.default);\n\n\tSnowTheme.DEFAULTS = (0, _extend2.default)(true, {}, _base2.default.DEFAULTS, {\n\t  modules: {\n\t    toolbar: {\n\t      handlers: {\n\t        link: function link(value) {\n\t          if (value) {\n\t            var range = this.quill.getSelection();\n\t            if (range == null || range.length == 0) return;\n\t            var preview = this.quill.getText(range);\n\t            if (/^\\S+@\\S+\\.\\S+$/.test(preview) && preview.indexOf('mailto:') !== 0) {\n\t              preview = 'mailto:' + preview;\n\t            }\n\t            var tooltip = this.quill.theme.tooltip;\n\t            tooltip.edit('link', preview);\n\t          } else {\n\t            this.quill.format('link', false);\n\t          }\n\t        }\n\t      }\n\t    }\n\t  }\n\t});\n\n\tvar SnowTooltip = function (_BaseTooltip) {\n\t  _inherits(SnowTooltip, _BaseTooltip);\n\n\t  function SnowTooltip(quill, bounds) {\n\t    _classCallCheck(this, SnowTooltip);\n\n\t    var _this2 = _possibleConstructorReturn(this, (SnowTooltip.__proto__ || Object.getPrototypeOf(SnowTooltip)).call(this, quill, bounds));\n\n\t    _this2.preview = _this2.root.querySelector('a.ql-preview');\n\t    return _this2;\n\t  }\n\n\t  _createClass(SnowTooltip, [{\n\t    key: 'listen',\n\t    value: function listen() {\n\t      var _this3 = this;\n\n\t      _get(SnowTooltip.prototype.__proto__ || Object.getPrototypeOf(SnowTooltip.prototype), 'listen', this).call(this);\n\t      this.root.querySelector('a.ql-action').addEventListener('click', function (event) {\n\t        if (_this3.root.classList.contains('ql-editing')) {\n\t          _this3.save();\n\t        } else {\n\t          _this3.edit('link', _this3.preview.textContent);\n\t        }\n\t        event.preventDefault();\n\t      });\n\t      this.root.querySelector('a.ql-remove').addEventListener('click', function (event) {\n\t        if (_this3.linkRange != null) {\n\t          _this3.restoreFocus();\n\t          _this3.quill.formatText(_this3.linkRange, 'link', false, _emitter2.default.sources.USER);\n\t          delete _this3.linkRange;\n\t        }\n\t        event.preventDefault();\n\t        _this3.hide();\n\t      });\n\t      this.quill.on(_emitter2.default.events.SELECTION_CHANGE, function (range, oldRange, source) {\n\t        if (range == null) return;\n\t        if (range.length === 0 && source === _emitter2.default.sources.USER) {\n\t          var _quill$scroll$descend = _this3.quill.scroll.descendant(_link2.default, range.index),\n\t              _quill$scroll$descend2 = _slicedToArray(_quill$scroll$descend, 2),\n\t              link = _quill$scroll$descend2[0],\n\t              offset = _quill$scroll$descend2[1];\n\n\t          if (link != null) {\n\t            _this3.linkRange = new _selection.Range(range.index - offset, link.length());\n\t            var preview = _link2.default.formats(link.domNode);\n\t            _this3.preview.textContent = preview;\n\t            _this3.preview.setAttribute('href', preview);\n\t            _this3.show();\n\t            _this3.position(_this3.quill.getBounds(_this3.linkRange));\n\t            return;\n\t          }\n\t        } else {\n\t          delete _this3.linkRange;\n\t        }\n\t        _this3.hide();\n\t      });\n\t    }\n\t  }, {\n\t    key: 'show',\n\t    value: function show() {\n\t      _get(SnowTooltip.prototype.__proto__ || Object.getPrototypeOf(SnowTooltip.prototype), 'show', this).call(this);\n\t      this.root.removeAttribute('data-mode');\n\t    }\n\t  }]);\n\n\t  return SnowTooltip;\n\t}(_base.BaseTooltip);\n\n\tSnowTooltip.TEMPLATE = ['<a class=\"ql-preview\" target=\"_blank\" href=\"about:blank\"></a>', '<input type=\"text\" data-formula=\"e=mc^2\" data-link=\"quilljs.com\" data-video=\"Embed URL\">', '<a class=\"ql-action\"></a>', '<a class=\"ql-remove\"></a>'].join('');\n\n\texports.default = SnowTheme;\n\n/***/ }\n/******/ ])\n});\n;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/quill/dist/quill.js\n// module id = 25\n// module chunks = 0","\n/**\n * When source maps are enabled, `style-loader` uses a link element with a data-uri to\n * embed the css on the page. This breaks all relative urls because now they are relative to a\n * bundle instead of the current page.\n *\n * One solution is to only use full urls, but that may be impossible.\n *\n * Instead, this function \"fixes\" the relative urls to be absolute according to the current page location.\n *\n * A rudimentary test suite is located at `test/fixUrls.js` and can be run via the `npm test` command.\n *\n */\n\nmodule.exports = function (css) {\n  // get current location\n  var location = typeof window !== \"undefined\" && window.location;\n\n  if (!location) {\n    throw new Error(\"fixUrls requires window.location\");\n  }\n\n\t// blank or null?\n\tif (!css || typeof css !== \"string\") {\n\t  return css;\n  }\n\n  var baseUrl = location.protocol + \"//\" + location.host;\n  var currentDir = baseUrl + location.pathname.replace(/\\/[^\\/]*$/, \"/\");\n\n\t// convert each url(...)\n\tvar fixedCss = css.replace(/url *\\( *(.+?) *\\)/g, function(fullMatch, origUrl) {\n\t\t// strip quotes (if they exist)\n\t\tvar unquotedOrigUrl = origUrl\n\t\t\t.replace(/^\"(.*)\"$/, function(o, $1){ return $1; })\n\t\t\t.replace(/^'(.*)'$/, function(o, $1){ return $1; });\n\n\t\t// already a full url? no change\n\t\tif (/^(#|data:|http:\\/\\/|https:\\/\\/|file:\\/\\/\\/)/i.test(unquotedOrigUrl)) {\n\t\t  return fullMatch;\n\t\t}\n\n\t\t// convert the url to a full url\n\t\tvar newUrl;\n\n\t\tif (unquotedOrigUrl.indexOf(\"//\") === 0) {\n\t\t  \t//TODO: should we add protocol?\n\t\t\tnewUrl = unquotedOrigUrl;\n\t\t} else if (unquotedOrigUrl.indexOf(\"/\") === 0) {\n\t\t\t// path should be relative to the base url\n\t\t\tnewUrl = baseUrl + unquotedOrigUrl; // already starts with '/'\n\t\t} else {\n\t\t\t// path should be relative to current directory\n\t\t\tnewUrl = currentDir + unquotedOrigUrl.replace(/^\\.\\//, \"\"); // Strip leading './'\n\t\t}\n\n\t\t// send back the fixed url(...)\n\t\treturn \"url(\" + JSON.stringify(newUrl) + \")\";\n\t});\n\n\t// send back the fixed css\n\treturn fixedCss;\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/style-loader/fixUrls.js\n// module id = 26\n// module chunks = 0","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../node_modules/css-loader/index.js!../../node_modules/resolve-url-loader/index.js!../../node_modules/postcss-loader/index.js!./_comments.css\");\nif(typeof content === 'string') content = [[module.id, content, '']];\n// add the styles to the DOM\nvar update = require(\"!../../node_modules/style-loader/addStyles.js\")(content, {});\nif(content.locals) module.exports = content.locals;\n// Hot Module Replacement\nif(module.hot) {\n\t// When the styles change, update the <style> tags\n\tif(!content.locals) {\n\t\tmodule.hot.accept(\"!!../../node_modules/css-loader/index.js!../../node_modules/resolve-url-loader/index.js!../../node_modules/postcss-loader/index.js!./_comments.css\", function() {\n\t\t\tvar newContent = require(\"!!../../node_modules/css-loader/index.js!../../node_modules/resolve-url-loader/index.js!../../node_modules/postcss-loader/index.js!./_comments.css\");\n\t\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\t\t\tupdate(newContent);\n\t\t});\n\t}\n\t// When the module is disposed, remove the <style> tags\n\tmodule.hot.dispose(function() { update(); });\n}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./App_Plugins/Comments/_comments.css\n// module id = 27\n// module chunks = 0","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../css-loader/index.js!../../resolve-url-loader/index.js!../../postcss-loader/index.js!./quill.bubble.css\");\nif(typeof content === 'string') content = [[module.id, content, '']];\n// add the styles to the DOM\nvar update = require(\"!../../style-loader/addStyles.js\")(content, {});\nif(content.locals) module.exports = content.locals;\n// Hot Module Replacement\nif(module.hot) {\n\t// When the styles change, update the <style> tags\n\tif(!content.locals) {\n\t\tmodule.hot.accept(\"!!../../css-loader/index.js!../../resolve-url-loader/index.js!../../postcss-loader/index.js!./quill.bubble.css\", function() {\n\t\t\tvar newContent = require(\"!!../../css-loader/index.js!../../resolve-url-loader/index.js!../../postcss-loader/index.js!./quill.bubble.css\");\n\t\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\t\t\tupdate(newContent);\n\t\t});\n\t}\n\t// When the module is disposed, remove the <style> tags\n\tmodule.hot.dispose(function() { update(); });\n}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/quill/dist/quill.bubble.css\n// module id = 28\n// module chunks = 0","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../css-loader/index.js!../../resolve-url-loader/index.js!../../postcss-loader/index.js!./quill.core.css\");\nif(typeof content === 'string') content = [[module.id, content, '']];\n// add the styles to the DOM\nvar update = require(\"!../../style-loader/addStyles.js\")(content, {});\nif(content.locals) module.exports = content.locals;\n// Hot Module Replacement\nif(module.hot) {\n\t// When the styles change, update the <style> tags\n\tif(!content.locals) {\n\t\tmodule.hot.accept(\"!!../../css-loader/index.js!../../resolve-url-loader/index.js!../../postcss-loader/index.js!./quill.core.css\", function() {\n\t\t\tvar newContent = require(\"!!../../css-loader/index.js!../../resolve-url-loader/index.js!../../postcss-loader/index.js!./quill.core.css\");\n\t\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\t\t\tupdate(newContent);\n\t\t});\n\t}\n\t// When the module is disposed, remove the <style> tags\n\tmodule.hot.dispose(function() { update(); });\n}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/quill/dist/quill.core.css\n// module id = 29\n// module chunks = 0","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../css-loader/index.js!../../resolve-url-loader/index.js!../../postcss-loader/index.js!./quill.snow.css\");\nif(typeof content === 'string') content = [[module.id, content, '']];\n// add the styles to the DOM\nvar update = require(\"!../../style-loader/addStyles.js\")(content, {});\nif(content.locals) module.exports = content.locals;\n// Hot Module Replacement\nif(module.hot) {\n\t// When the styles change, update the <style> tags\n\tif(!content.locals) {\n\t\tmodule.hot.accept(\"!!../../css-loader/index.js!../../resolve-url-loader/index.js!../../postcss-loader/index.js!./quill.snow.css\", function() {\n\t\t\tvar newContent = require(\"!!../../css-loader/index.js!../../resolve-url-loader/index.js!../../postcss-loader/index.js!./quill.snow.css\");\n\t\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\t\t\tupdate(newContent);\n\t\t});\n\t}\n\t// When the module is disposed, remove the <style> tags\n\tmodule.hot.dispose(function() { update(); });\n}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/quill/dist/quill.snow.css\n// module id = 30\n// module chunks = 0","module.exports = __webpack_public_path__ + \"a54aba83b3d5d7702890c07c31c48147.svg\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/npm-font-open-sans/fonts/BoldItalic/OpenSans-BoldItalic.svg\n// module id = 31\n// module chunks = 0","module.exports = __webpack_public_path__ + \"c36b5ac7c2dddf6f525c8d161412ef41.ttf\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/npm-font-open-sans/fonts/BoldItalic/OpenSans-BoldItalic.ttf\n// module id = 32\n// module chunks = 0","module.exports = \"data:application/font-woff;base64,\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/npm-font-open-sans/fonts/BoldItalic/OpenSans-BoldItalic.woff\n// module id = 33\n// module chunks = 0","module.exports = \"data:application/font-woff2;base64,\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/npm-font-open-sans/fonts/BoldItalic/OpenSans-BoldItalic.woff2\n// module id = 34\n// module chunks = 0","module.exports = __webpack_public_path__ + \"d6291f88056601e360ce6cea4bf676f4.svg\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/npm-font-open-sans/fonts/Bold/OpenSans-Bold.svg\n// module id = 35\n// module chunks = 0","module.exports = __webpack_public_path__ + \"5a100916f94b0babde0c92aaa8fb80d6.ttf\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/npm-font-open-sans/fonts/Bold/OpenSans-Bold.ttf\n// module id = 36\n// module chunks = 0","module.exports = \"data:application/font-woff;base64,\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/npm-font-open-sans/fonts/Bold/OpenSans-Bold.woff\n// module id = 37\n// module chunks = 0","module.exports = \"data:application/font-woff2;base64,\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/npm-font-open-sans/fonts/Bold/OpenSans-Bold.woff2\n// module id = 38\n// module chunks = 0","module.exports = __webpack_public_path__ + \"9704305e6fd8184b40d526fca315d200.svg\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/npm-font-open-sans/fonts/ExtraBoldItalic/OpenSans-ExtraBoldItalic.svg\n// module id = 39\n// module chunks = 0","module.exports = __webpack_public_path__ + \"4595d7f8ce0e7b381abb0254f04f0ec2.ttf\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/npm-font-open-sans/fonts/ExtraBoldItalic/OpenSans-ExtraBoldItalic.ttf\n// module id = 40\n// module chunks = 0","module.exports = \"data:application/font-woff;base64,\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/npm-font-open-sans/fonts/ExtraBoldItalic/OpenSans-ExtraBoldItalic.woff\n// module id = 41\n// module chunks = 0","module.exports = \"data:application/font-woff2;base64,\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/npm-font-open-sans/fonts/ExtraBoldItalic/OpenSans-ExtraBoldItalic.woff2\n// module id = 42\n// module chunks = 0","module.exports = __webpack_public_path__ + \"8c5c497a47304f276f99ad05e0c5a395.svg\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/npm-font-open-sans/fonts/ExtraBold/OpenSans-ExtraBold.svg\n// module id = 43\n// module chunks = 0","module.exports = __webpack_public_path__ + \"19b56cfcb97fbcc245242fb28232939e.ttf\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/npm-font-open-sans/fonts/ExtraBold/OpenSans-ExtraBold.ttf\n// module id = 44\n// module chunks = 0","module.exports = \"data:application/font-woff;base64,\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/npm-font-open-sans/fonts/ExtraBold/OpenSans-ExtraBold.woff\n// module id = 45\n// module chunks = 0","module.exports = \"data:application/font-woff2;base64,\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/npm-font-open-sans/fonts/ExtraBold/OpenSans-ExtraBold.woff2\n// module id = 46\n// module chunks = 0","module.exports = __webpack_public_path__ + \"d6671d41dde41d355619fe05b44f4aac.svg\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/npm-font-open-sans/fonts/Italic/OpenSans-Italic.svg\n// module id = 47\n// module chunks = 0","module.exports = __webpack_public_path__ + \"9b30f13428e1b4a659aeeab4ac1fff35.ttf\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/npm-font-open-sans/fonts/Italic/OpenSans-Italic.ttf\n// module id = 48\n// module chunks = 0","module.exports = \"data:application/font-woff;base64,\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/npm-font-open-sans/fonts/Italic/OpenSans-Italic.woff\n// module id = 49\n// module chunks = 0","module.exports = \"data:application/font-woff2;base64,\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/npm-font-open-sans/fonts/Italic/OpenSans-Italic.woff2\n// module id = 50\n// module chunks = 0","module.exports = __webpack_public_path__ + \"b64e9910811cdcc8df89cec2b5025a9f.svg\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/npm-font-open-sans/fonts/LightItalic/OpenSans-LightItalic.svg\n// module id = 51\n// module chunks = 0","module.exports = __webpack_public_path__ + \"26f1e68dfbd8b8621e5d07f75571a1f9.ttf\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/npm-font-open-sans/fonts/LightItalic/OpenSans-LightItalic.ttf\n// module id = 52\n// module chunks = 0","module.exports = \"data:application/font-woff;base64,\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/npm-font-open-sans/fonts/LightItalic/OpenSans-LightItalic.woff\n// module id = 53\n// module chunks = 0","module.exports = \"data:application/font-woff2;base64,\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/npm-font-open-sans/fonts/LightItalic/OpenSans-LightItalic.woff2\n// module id = 54\n// module chunks = 0","module.exports = __webpack_public_path__ + \"d79f021974b1f6bc5c21f31689cde94f.svg\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/npm-font-open-sans/fonts/Light/OpenSans-Light.svg\n// module id = 55\n// module chunks = 0","module.exports = __webpack_public_path__ + \"ecb4572a5e478b107dfcb60c16a7eefa.ttf\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/npm-font-open-sans/fonts/Light/OpenSans-Light.ttf\n// module id = 56\n// module chunks = 0","module.exports = \"data:application/font-woff;base64,\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/npm-font-open-sans/fonts/Light/OpenSans-Light.woff\n// module id = 57\n// module chunks = 0","module.exports = \"data:application/font-woff2;base64,\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/npm-font-open-sans/fonts/Light/OpenSans-Light.woff2\n// module id = 58\n// module chunks = 0","module.exports = __webpack_public_path__ + \"f641a7d4e80fd6321135b1a2b4ce8bb1.svg\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/npm-font-open-sans/fonts/Regular/OpenSans-Regular.svg\n// module id = 59\n// module chunks = 0","module.exports = __webpack_public_path__ + \"cd7296352d159532b66c07d98efb1126.ttf\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/npm-font-open-sans/fonts/Regular/OpenSans-Regular.ttf\n// module id = 60\n// module chunks = 0","module.exports = \"data:application/font-woff;base64,\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/npm-font-open-sans/fonts/Regular/OpenSans-Regular.woff\n// module id = 61\n// module chunks = 0","module.exports = \"data:application/font-woff2;base64,\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/npm-font-open-sans/fonts/Regular/OpenSans-Regular.woff2\n// module id = 62\n// module chunks = 0","module.exports = __webpack_public_path__ + \"ddc348f204283c4f4090a3ed03853054.svg\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/npm-font-open-sans/fonts/SemiboldItalic/OpenSans-SemiboldItalic.svg\n// module id = 63\n// module chunks = 0","module.exports = __webpack_public_path__ + \"1c0b4eb93fcf561eec03297a24922d6c.ttf\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/npm-font-open-sans/fonts/SemiboldItalic/OpenSans-SemiboldItalic.ttf\n// module id = 64\n// module chunks = 0","module.exports = \"data:application/font-woff;base64,\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/npm-font-open-sans/fonts/SemiboldItalic/OpenSans-SemiboldItalic.woff\n// module id = 65\n// module chunks = 0","module.exports = \"data:application/font-woff2;base64,\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/npm-font-open-sans/fonts/SemiboldItalic/OpenSans-SemiboldItalic.woff2\n// module id = 66\n// module chunks = 0","module.exports = __webpack_public_path__ + \"bb100c995f1d20b8a96462fe5f528bd4.svg\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/npm-font-open-sans/fonts/Semibold/OpenSans-Semibold.svg\n// module id = 67\n// module chunks = 0","module.exports = __webpack_public_path__ + \"33f225b8f5f7d6b34a0926f58f96c1e9.ttf\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/npm-font-open-sans/fonts/Semibold/OpenSans-Semibold.ttf\n// module id = 68\n// module chunks = 0","module.exports = \"data:application/font-woff;base64,\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/npm-font-open-sans/fonts/Semibold/OpenSans-Semibold.woff\n// module id = 69\n// module chunks = 0","module.exports = \"data:application/font-woff2;base64,\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/npm-font-open-sans/fonts/Semibold/OpenSans-Semibold.woff2\n// module id = 70\n// module chunks = 0","var g;\r\n\r\n// This works in non-strict mode\r\ng = (function() {\r\n\treturn this;\r\n})();\r\n\r\ntry {\r\n\t// This works if eval is allowed (see CSP)\r\n\tg = g || Function(\"return this\")() || (1,eval)(\"this\");\r\n} catch(e) {\r\n\t// This works if the window reference is available\r\n\tif(typeof window === \"object\")\r\n\t\tg = window;\r\n}\r\n\r\n// g can still be undefined, but nothing to do about it...\r\n// We return undefined, instead of nothing here, so it's\r\n// easier to handle this case. if(!global) { ...}\r\n\r\nmodule.exports = g;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// (webpack)/buildin/global.js\n// module id = 71\n// module chunks = 0","'use strict'\n\nexports.byteLength = byteLength\nexports.toByteArray = toByteArray\nexports.fromByteArray = fromByteArray\n\nvar lookup = []\nvar revLookup = []\nvar Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array\n\nvar code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\nfor (var i = 0, len = code.length; i < len; ++i) {\n  lookup[i] = code[i]\n  revLookup[code.charCodeAt(i)] = i\n}\n\nrevLookup['-'.charCodeAt(0)] = 62\nrevLookup['_'.charCodeAt(0)] = 63\n\nfunction placeHoldersCount (b64) {\n  var len = b64.length\n  if (len % 4 > 0) {\n    throw new Error('Invalid string. Length must be a multiple of 4')\n  }\n\n  // the number of equal signs (place holders)\n  // if there are two placeholders, than the two characters before it\n  // represent one byte\n  // if there is only one, then the three characters before it represent 2 bytes\n  // this is just a cheap hack to not do indexOf twice\n  return b64[len - 2] === '=' ? 2 : b64[len - 1] === '=' ? 1 : 0\n}\n\nfunction byteLength (b64) {\n  // base64 is 4/3 + up to two characters of the original data\n  return b64.length * 3 / 4 - placeHoldersCount(b64)\n}\n\nfunction toByteArray (b64) {\n  var i, j, l, tmp, placeHolders, arr\n  var len = b64.length\n  placeHolders = placeHoldersCount(b64)\n\n  arr = new Arr(len * 3 / 4 - placeHolders)\n\n  // if there are placeholders, only get up to the last complete 4 chars\n  l = placeHolders > 0 ? len - 4 : len\n\n  var L = 0\n\n  for (i = 0, j = 0; i < l; i += 4, j += 3) {\n    tmp = (revLookup[b64.charCodeAt(i)] << 18) | (revLookup[b64.charCodeAt(i + 1)] << 12) | (revLookup[b64.charCodeAt(i + 2)] << 6) | revLookup[b64.charCodeAt(i + 3)]\n    arr[L++] = (tmp >> 16) & 0xFF\n    arr[L++] = (tmp >> 8) & 0xFF\n    arr[L++] = tmp & 0xFF\n  }\n\n  if (placeHolders === 2) {\n    tmp = (revLookup[b64.charCodeAt(i)] << 2) | (revLookup[b64.charCodeAt(i + 1)] >> 4)\n    arr[L++] = tmp & 0xFF\n  } else if (placeHolders === 1) {\n    tmp = (revLookup[b64.charCodeAt(i)] << 10) | (revLookup[b64.charCodeAt(i + 1)] << 4) | (revLookup[b64.charCodeAt(i + 2)] >> 2)\n    arr[L++] = (tmp >> 8) & 0xFF\n    arr[L++] = tmp & 0xFF\n  }\n\n  return arr\n}\n\nfunction tripletToBase64 (num) {\n  return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F]\n}\n\nfunction encodeChunk (uint8, start, end) {\n  var tmp\n  var output = []\n  for (var i = start; i < end; i += 3) {\n    tmp = (uint8[i] << 16) + (uint8[i + 1] << 8) + (uint8[i + 2])\n    output.push(tripletToBase64(tmp))\n  }\n  return output.join('')\n}\n\nfunction fromByteArray (uint8) {\n  var tmp\n  var len = uint8.length\n  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes\n  var output = ''\n  var parts = []\n  var maxChunkLength = 16383 // must be multiple of 3\n\n  // go through the array every three bytes, we'll deal with trailing stuff later\n  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\n    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))\n  }\n\n  // pad the end with zeros, but make sure to not forget the extra bytes\n  if (extraBytes === 1) {\n    tmp = uint8[len - 1]\n    output += lookup[tmp >> 2]\n    output += lookup[(tmp << 4) & 0x3F]\n    output += '=='\n  } else if (extraBytes === 2) {\n    tmp = (uint8[len - 2] << 8) + (uint8[len - 1])\n    output += lookup[tmp >> 10]\n    output += lookup[(tmp >> 4) & 0x3F]\n    output += lookup[(tmp << 2) & 0x3F]\n    output += '='\n  }\n\n  parts.push(output)\n\n  return parts.join('')\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// (webpack)/~/node-libs-browser/~/buffer/~/base64-js/index.js\n// module id = 72\n// module chunks = 0","exports.read = function (buffer, offset, isLE, mLen, nBytes) {\n  var e, m\n  var eLen = nBytes * 8 - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var nBits = -7\n  var i = isLE ? (nBytes - 1) : 0\n  var d = isLE ? -1 : 1\n  var s = buffer[offset + i]\n\n  i += d\n\n  e = s & ((1 << (-nBits)) - 1)\n  s >>= (-nBits)\n  nBits += eLen\n  for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}\n\n  m = e & ((1 << (-nBits)) - 1)\n  e >>= (-nBits)\n  nBits += mLen\n  for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}\n\n  if (e === 0) {\n    e = 1 - eBias\n  } else if (e === eMax) {\n    return m ? NaN : ((s ? -1 : 1) * Infinity)\n  } else {\n    m = m + Math.pow(2, mLen)\n    e = e - eBias\n  }\n  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)\n}\n\nexports.write = function (buffer, value, offset, isLE, mLen, nBytes) {\n  var e, m, c\n  var eLen = nBytes * 8 - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)\n  var i = isLE ? 0 : (nBytes - 1)\n  var d = isLE ? 1 : -1\n  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0\n\n  value = Math.abs(value)\n\n  if (isNaN(value) || value === Infinity) {\n    m = isNaN(value) ? 1 : 0\n    e = eMax\n  } else {\n    e = Math.floor(Math.log(value) / Math.LN2)\n    if (value * (c = Math.pow(2, -e)) < 1) {\n      e--\n      c *= 2\n    }\n    if (e + eBias >= 1) {\n      value += rt / c\n    } else {\n      value += rt * Math.pow(2, 1 - eBias)\n    }\n    if (value * c >= 2) {\n      e++\n      c /= 2\n    }\n\n    if (e + eBias >= eMax) {\n      m = 0\n      e = eMax\n    } else if (e + eBias >= 1) {\n      m = (value * c - 1) * Math.pow(2, mLen)\n      e = e + eBias\n    } else {\n      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)\n      e = 0\n    }\n  }\n\n  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}\n\n  e = (e << mLen) | m\n  eLen += mLen\n  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}\n\n  buffer[offset + i - d] |= s * 128\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// (webpack)/~/node-libs-browser/~/buffer/~/ieee754/index.js\n// module id = 73\n// module chunks = 0","var toString = {}.toString;\n\nmodule.exports = Array.isArray || function (arr) {\n  return toString.call(arr) == '[object Array]';\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// (webpack)/~/node-libs-browser/~/buffer/~/isarray/index.js\n// module id = 74\n// module chunks = 0","require('./../App_Plugins/Core/Content/Scripts/Core');\r\nrequire('./../App_Plugins/Comments/Comment');\n\n\n// WEBPACK FOOTER //\n// ./Content/main.js"],"sourceRoot":""}