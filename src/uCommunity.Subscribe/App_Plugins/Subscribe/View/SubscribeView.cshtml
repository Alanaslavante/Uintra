@using uCommunity.Core.App_Plugins.Core.Extentions
@model uCommunity.Subscribe.App_Plugins.Subscribe.Model.SubscribeViewModel
@{
    Html.EnableUnobtrusiveJavaScript(true);
    var elementId = $"subscribe_{@Model.ActivityId}";
}
@if (Model.UserId.HasValue)
{
    <div class="content__item-subscribe js-subscribe" id="@elementId">
        <div class="content__item-subscribe-set">
            @(Model.IsSubscribed ?
                  Ajax.ActionLink(Html.Localize("SubscribeView.Unsubscribe.lnk"), "Unsubscribe", "Subscribe", new { type = Model.Type, activityId = Model.ActivityId }, new AjaxOptions { HttpMethod = "Post", UpdateTargetId = elementId, OnComplete = $"App.Subscribe.init('#{elementId}');App.Subscribe.notify(true);" }, new { @class = "content__item-subscribe-btn _unsubscribe" }) :
                  Ajax.ActionLink(Html.Localize("SubscribeView.Subscribe.lnk"), "Subscribe", "Subscribe", new {type = Model.Type, activityId = Model.ActivityId }, new AjaxOptions { HttpMethod = "Post", UpdateTargetId = elementId, OnComplete = $"App.Subscribe.init('#{elementId}');App.Subscribe.notify(false);" }, new { @class = "content__item-subscribe-btn _subscribe" })
            )
        </div>
        <div class="content__item-subscribe-label">
            <div class="check">
                <label class="check__label">
                    @if (Model.IsSubscribed && Model.HasNotification)
                    {
                        @Html.CheckBoxFor(m => m.IsNotificationDisabled, new { @class = "js-subscribe-notification-disable check__box", @data_id = Model.Id })
                        <span class="check__fake-input icon-check"></span>
                    }
                    <span class="check__fake-label">@(Model.IsSubscribed ? Html.Localize("SubscribeView.IsSubscriber.lnk") : Html.Localize("SubscribeView.IsNotSubscriber.lnk"))</span>
                </label>
            </div>
        </div>
    </div>
}